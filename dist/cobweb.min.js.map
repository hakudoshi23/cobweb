{"version":3,"sources":["ajax.js","array.js","html.js","obj.js","tree.js","events.js","logger.js","cobweb.js","modules.js","asset/mesh.js","asset/shader.js","pane/pane-types.js","pane/panes.js","math/camera.js","math/octree.js","math/plane.js","math/ray.js","pane/surface/surface.js","math/halfEdge/halfedge-cache.js","math/halfEdge/halfedge.js","math/geometry/geometry.js","pane/surface/interaction/common-interaction.js","pane/surface/interaction/object-interaction.js","pane/surface/interaction/surface-interaction.js","pane/surface/render/render-solid-cache.js","pane/surface/render/render-solid.js","pane/surface/render/surface-render.js","pane/surface/interaction/edit/edit-interaction-action-all.js","pane/surface/interaction/edit/edit-interaction-action-copy.js","pane/surface/interaction/edit/edit-interaction-action-delete.js","pane/surface/interaction/edit/edit-interaction-action-extrude.js","pane/surface/interaction/edit/edit-interaction-action-face.js","pane/surface/interaction/edit/edit-interaction-action-move.js","pane/surface/interaction/edit/edit-interaction-action-rotate.js","pane/surface/interaction/edit/edit-interaction-action-scale.js","pane/surface/interaction/edit/edit-interaction-action-subdivide.js","pane/surface/interaction/edit/edit-interaction-render-cache.js","pane/surface/interaction/edit/edit-interaction-render.js","pane/surface/interaction/edit/edit-interaction-select.js","pane/surface/interaction/edit/edit-interaction.js","graphic.js","main-menu.js","scene.js"],"names":["ajax","options","Object","assign","defaultAjaxOptions","xhttp","XMLHttpRequest","onreadystatechange","this","readyState","status","success","response","error","method","params","objToParams","data","urlWithParams","url","open","async","send","get","Ajax","getJSON","JSON","parse","post","obj","key","encodeURIComponent","slice","window","safeExtend","prototype","property","value","Array","a","concat","i","length","j","splice","callback","s4","Math","floor","random","toString","substring","HTMLElement","oldClassNames","newClassNames","arguments","className","trim","replace","split","unique","join","queryClassNames","currentClassNames","index","name","indexOf","removeClassNames","removeEach","forEach","attr","__data_cache","WeakMap","elAttrs","undefined","set","setAttribute","getAttribute","removeAttribute","Element","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","matches","document","ownerDocument","querySelectorAll","item","query","parentElement","current","clientHeight","style","height","clientWidth","width","guid","overlap","querySelector","newObj","hasOwnProperty","clone","target","varArgs","TypeError","to","nextSource","nextKey","call","defaults","TreeNode","parent","children","isRoot","add","child","constructor","push","remove","dfs","check","out","bfs","extend","_TreeNode","create","EventHandler","isDebug","listeners","trigger","console","debug","apply","on","off","array","reset","own","keys","Logger","instance","handlers","addHandler","level","ALL","args","DEBUG","INFO","info","WARNING","warn","ERROR","log","warning","tmp","levelHandlers","handler","removeHandler","NONE","defaultOptions","container","selector","Cobweb","Error","addClass","logger","events","modules","Modules","onLoadedAll","names","topologicalSort","sortedNames","module","dependencies","depName","nextName","candidates","getInitialCandidates","dependant","dependantName","allDependenciesMet","loadedUntilNow","runCallback","callbacks","all","init","ex","dependencyModule","moduleName","asset","mesh","build","source","vertices","line","startsWith","vertex","map","number","parseFloat","HalfEdgeMesh","addVertices","faceVertices","parseInt","addFace","shader","firstSource","Shader","oldPane","newPane","oldType","attrData","pane","setType","types","onPaneType","dataset","paneType","onPaneCreate","onPaneSplit","origin","onPaneResize","mainPanes","createElement","appendChild","internal","Pane","separator","size","root","Camera","center","rotation","distance","projection","mat4","ortho","getViewMatrix","view","eye","getPosition","lookAt","getUpDirection","vec3","rotateX","rotateY","getDirection","direction","sub","normalize","getRay","ray","canvasCoords","canvasSize","Ray","start","auxMat","multiply","invert","transformMat4","up","vRotation","PI","computeLocalAxis","left","forward","cross","canContain","aabb","min","max","findContainingParent","result","maxItems","maxDepth","padding","OctreeNode","depth","items","getAllItems","addItems","addItem","splitIfNeeded","removeItem","removed","mergeIfNeeded","updateDimensions","redistributeItems","subItems","getCollidingNodes","nodes","collidingPoint","geo","rayAABBCollision","getCollidingItems","node","parentAabb","half","scale","ref","mul","containingParent","Octree","_addItem","onVerticesMove","newItems","allItems","updateBounds","fill","Number","MAX_VALUE","copy","Plane","point","normal","fromPoints","b","onSurfacePaneType","canvas","id","surfaceIndex","addEventListener","event","focus","surface","camera","updateCanvasSize","context","getContext","header","headerHeight","gui","guiWidth","setTransform","translate","perspective","DEG2RAD","surfaces","parentNode","superConstructor","cachedHalfEdgeMesh","heMesh","cache","meshes","e","builder","builders","rebuild","onCreate","onClean","onVerticesChange","_addVertices","invalidateCache","_addFace","newFace","addBuilder","buildEdge","end","face","edge","HalfEdgeFace","opposite","findOppositeEdge","_halfEdge","outEdges","next","he","opposites","filter","VertexGetFaces","VertexComputeNormal","getFaces","computeRawNormal","computeNormal","v1","v2","v3","tmp1","tmp2","bounds","halfEdges","faces","isArray","ownIndex","he1","he2","last","prev","clear","halfEdge","getEdges","output","getVertices","getVerticesTriangulated","triangulated","triplet","triangleNormal","computeCenter","computePointsCenter","getBarycentricCoordinates","p1","p2","p3","v0","getVectorFromPoints","d00","dot","d01","d11","d20","d21","denom","getNormal","rayFaceCollision","triangles","triangulateFace","triangle","rayTriangleCollision","rayPlaneCollision","bary","planePoint","planeNormal","numer","abs","t","minB","maxB","whichPlane","inside","quadrant","Float32Array","maxT","candidatePlane","closestPointsBetweenSegments","a0","a1","b0","b1","p_a","p_b","sc","tc","u","subtract","v","w","c","d","D","dP","rayPointDistance","aux","len","pointPointDistance","points","findClosestPointIndex","position","closestIndex","newDistance","findClosestPoint","findClosestFace","centers","combine","originalRotation","delta","upNormalMouseDown","clampRotations","getCoordsDelta","initial","rotations","pi2","mouseDownCoords","interactions","common","onMouseWheel","realCoords","wheelDelta","detail","onMouseMove","moving","onMouseDown","which","equals","onMouseUp","object","isHit","hitPoint","scene","getObjects","testRayBBox","bounding","model","selected","getLocalCoordinates","type","onKeyDown","onKeyUp","onClick","layerX","layerY","onContextMenu","preventDefault","onSurfaceEvent","getInteractionCallbacks","keepRunning","setInteraction","interaction","interactionName","onRender","tabIndex","oncontextmenu","onkeydown","onkeyup","onmousewheel","onmousemove","onmousedown","onmouseup","onclick","initialValue","uploadRange","buffer","range","bytesPerFloat32Element","BYTES_PER_ELEMENT","solidBuilder","halfEdgeMesh","indices","GL","Mesh","load","normals","Uint16Array","vertexBuffers","vRange","nRange","dirty","upload","renderObject","primitive","indexBufferName","temp","uniforms","u_mvp","u_model","draw","solidShader","wireframeShader","grid","lines","colorsArray","bufferIndex","createVertexBuffer","axisX","colors","axisZ","renders","solid","lightDirection","u_lightvector","graphics","gl","LINES","setRender","u_color","render","getRender","renderName","panes","edit","actions","selection","isEmpty","addAll","action","duplicateVertices","newVertices","newVertex","_selected","duplicateFaces","oldVertices","newFaces","objKey","objects","oldFaces","removeVertex","vIndex","removeFace","removeHalfEdge","fIndex","heIndex","oppositeVertex","delete","vertexFaces","getOuterEdgeLoop","filterNextOutEdge","outerEdges","startEdge","faceEdges","oppositeFace","nextEdge","find","duplicateOuterRing","newOutEdges","oldOutEdges","outEdge","vertexIndex","nextIndex","extrude","selectedFaces","initialCoords","vec2","selectionNormal","axisOrigin","isY","move","axis","lastCoords","selectedObj","originalPosition","currentRay","initialRay","cameraDirection","hitPointInitial","hitPointCurrent","selectionCenter","getCenter","currentRayEnd","scaleAndAdd","axisStart","axisEnd","isControlDown","round","sceneObj","getObjectByName","restore","selectionCenter2d","initialVector","rotate","fromSelectionToCursor","determinant","atan2","negatedCenter","negate","tranform","initialDistance","vectorDelta","subdivideFace","edgeIndex","oVert","currentVertIndex","loopIndex","medianPoint","subdivide","vs","wireframeBuilder","verticesBuilder","cRange","color","renderBounds","octree","recursive","updateBoundsModel","boundsModel","identity","lerp","count","rads","sin","cos","circle","wireframe","drawBounds","POINTS","LINE_LOOP","toggleVertex","toggle","selectedVertices","allSelected","includes","toggleFace","arrayName","initObjectIfNeeded","delObjectIfNeeded","edges","objSelection","getFacesFromVertices","vertexSelectionMargin","rayVertices","uniqueFaces","closestFace","vertexDistance","n","isMouseDown","isShiftDown","runAction","shiftDown","shiftKey","ctrlKey","keyCode","setAction","callbackName","drawRenderTarget","viewport","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","mainRender","surfaceRender","drawImage","Graphics","screen","animate","ondraw","renderTargets","clearColor","enable","DEPTH_TEST","getParameter","VERSION","SHADING_LANGUAGE_VERSION","download","filename","text","element","display","body","click","removeChild","meshToOBJString","f","nextHE","buildButton","clickCallback","button","marginLeft","innerHTML","handleMeshFileSelected","files","reader","FileReader","onload","addObject","readAsText","cobwebFile","mainMenu","helpContainer","confirm","alert","insertBefore","firstChild","rootNode","objectCount","TRIANGLES"],"mappings":"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","file":"cobweb.min.js","sourcesContent":["((function(){\r\n    'use strict';\r\n\r\n    var defaultAjaxOptions = {\r\n        method: 'GET',\r\n        url: '',\r\n        data: {},\r\n        async: true,\r\n        success: null,\r\n        error: null\r\n    };\r\n\r\n    function ajax (options) {\r\n        options = Object.assign({}, defaultAjaxOptions, options);\r\n        var xhttp = new XMLHttpRequest();\r\n        xhttp.onreadystatechange = function() {\r\n            if (this.readyState == 4) {\r\n                if (this.status == 200) {\r\n                    if (options.success) options.success(this.response);\r\n                } else {\r\n                    if (options.error) error.success(this.response);\r\n                }\r\n            }\r\n        };\r\n        if (options.method === 'GET') {\r\n            var params = objToParams(options.data);\r\n            var urlWithParams = options.url + (params ? '?' + params : '');\r\n            xhttp.open(options.method, urlWithParams, options.async);\r\n            xhttp.send();\r\n        } else if (options.method === 'POST') {\r\n            xhttp.open(options.method, options.url, options.async);\r\n            xhttp.send(options.data);\r\n        }\r\n        return xhttp;\r\n    }\r\n\r\n    function get (url, data, success) {\r\n        if (!success) {\r\n            success = data;\r\n            data = null;\r\n        }\r\n        return Ajax.ajax({\r\n            url: url,\r\n            data: data,\r\n            success: success,\r\n            method: 'GET'\r\n        });\r\n    }\r\n\r\n    function getJSON (url, data, success) {\r\n        if (!success) {\r\n            success = data;\r\n            data = null;\r\n        }\r\n        return Ajax.ajax({\r\n            url: url,\r\n            data: data,\r\n            success: function (response) {\r\n                success(JSON.parse(response));\r\n            },\r\n            method: 'GET'\r\n        });\r\n    }\r\n\r\n    function post (url, data, success) {\r\n        if (!success) {\r\n            success = data;\r\n            data = null;\r\n        }\r\n        return Ajax.ajax({\r\n            url: url,\r\n            data: data,\r\n            success: success,\r\n            method: 'POST'\r\n        });\r\n    }\r\n\r\n    window.Ajax = {\r\n        ajax: ajax,\r\n        get: get,\r\n        getJSON: getJSON,\r\n        post: post\r\n    };\r\n\r\n    function objToParams (obj) {\r\n        var params = '';\r\n        for (var key in obj) {\r\n            var nextParam = key + '=' + encodeURIComponent(obj[key]);\r\n            params += '&' + nextParam;\r\n        }\r\n        return params.slice(1);\r\n    }\r\n})());\r\n","((function(){\r\n    'use strict';\r\n\r\n    safeExtend(Array.prototype, 'unique', function() {\r\n        var a = this.concat();\r\n        for(var i = 0; i < a.length; ++i)\r\n            for(var j = i + 1; j < a.length; ++j)\r\n                if(a[i] === a[j]) a.splice(j--, 1);\r\n        return a;\r\n    });\r\n\r\n    safeExtend(Array.prototype, 'forEach', function(callback) {\r\n        for (var i = 0; i < this.length; i++)\r\n            callback(this[i], i, this);\r\n    });\r\n\r\n    function safeExtend(prototype, property, value) {\r\n        if(!prototype[property]) prototype[property] = value;\r\n    }\r\n})());\r\n","((function(){\r\n    'use strict';\r\n\r\n    safeExtend(HTMLElement.prototype, 'addClass', function () {\r\n        var oldClassNames, newClassNames;\r\n        for(var i in arguments){\r\n            oldClassNames = !this.className ? [] : this.className.trim().replace(/\\s+/g, ' ').split(' ');\r\n            newClassNames = !arguments[i] ? [] : arguments[i].trim().replace(/\\s+/g, ' ').split(' ');\r\n            this.className = oldClassNames.concat(newClassNames).unique().join(' ');\r\n        }\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'hasClass', function () {\r\n        var queryClassNames, currentClassNames = !this.className ? [] : this.className.trim().replace(/\\s+/g, ' ').split(' ');\r\n        for(var i in arguments){\r\n            queryClassNames = !arguments[i] ? [] : arguments[i].trim().replace(/\\s+/g, ' ').split(' ');\r\n            for (var index = 0; index < queryClassNames.length; index++) {\r\n                var name = queryClassNames[index];\r\n                if (currentClassNames.indexOf(name) == -1)\r\n                    return false;\r\n            }\r\n        }\r\n        return true;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'removeClass', function () {\r\n        var index = 0, currentClassNames, removeClassNames;\r\n        var removeEach = function (name) {\r\n            index = currentClassNames.indexOf(name);\r\n            if (index != -1)\r\n                currentClassNames.splice(index, 1);\r\n        };\r\n        for(var i in arguments){\r\n            currentClassNames = !this.className ? [] : this.className.trim().replace(/\\s+/g, ' ').split(' ');\r\n            removeClassNames = !arguments[i] ? [] : arguments[i].trim().replace(/\\s+/g, ' ').split(' ');\r\n            removeClassNames.forEach(removeEach);\r\n            this.className = currentClassNames.unique().join(' ');\r\n        }\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'data', function (attr, value) {\r\n        if (!window.__data_cache) window.__data_cache = new WeakMap();\r\n        var elAttrs = window.__data_cache.get(this) || {};\r\n        if (value !== undefined) {\r\n            elAttrs[attr] = value;\r\n            window.__data_cache.set(this, elAttrs);\r\n        } else {\r\n            if (attr) return elAttrs && elAttrs[attr];\r\n            else return elAttrs;\r\n        }\r\n        return this;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'setData', function (data) {\r\n        if (!window.__data_cache) window.__data_cache = new WeakMap();\r\n        window.__data_cache.set(this, data);\r\n        return this;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'attr', function (name, value) {\r\n        if (value !== undefined)\r\n            this.setAttribute(name, value);\r\n        else if (value === null)\r\n            this.removeAttribute(name);\r\n        else\r\n            return this.getAttribute(name);\r\n        return this;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'attrData', function (name, value) {\r\n        return this.attr('data-' + name, value);\r\n    });\r\n\r\n    safeExtend(Element.prototype, 'matches',\r\n        Element.prototype.matchesSelector ||\r\n        Element.prototype.mozMatchesSelector ||\r\n        Element.prototype.msMatchesSelector ||\r\n        Element.prototype.oMatchesSelector ||\r\n        Element.prototype.webkitMatchesSelector ||\r\n        function(s) {\r\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\r\n                i = matches.length;\r\n            while (--i >= 0 && matches.item(i) !== this) {}\r\n            return i > -1;\r\n        }\r\n    );\r\n\r\n    safeExtend(HTMLElement.prototype, 'parent', function (query) {\r\n        if (!query) return this.parentElement;\r\n        var current = this.parentElement;\r\n        while (!current.matches(query))\r\n            current = current.parentElement;\r\n        return current;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'height', function () {\r\n        if (arguments.length == 1) {\r\n            var value = arguments[0];\r\n            if (typeof value === 'number')\r\n                this.style.height = value + 'px';\r\n            else\r\n                this.style.height = value;\r\n        } else\r\n            return this.clientHeight;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'width', function () {\r\n        if (arguments.length == 1) {\r\n            var value = arguments[0];\r\n            if (typeof value === 'number')\r\n                this.style.width = value + 'px';\r\n            else\r\n                this.style.width = value;\r\n        } else\r\n            return this.clientWidth;\r\n    });\r\n\r\n    safeExtend(window, 'guid', function () {\r\n        return 'GUID-' + s4() + '-' + s4() + '-' + s4();\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'guid', function () {\r\n        var guid = null, overlap = null;\r\n        do {\r\n            guid = window.guid();\r\n            overlap = document.querySelector('#' + guid);\r\n        } while(overlap);\r\n        this.attr('id', guid);\r\n        return guid;\r\n    });\r\n\r\n    function safeExtend(prototype, property, value) {\r\n        if(!prototype[property]) prototype[property] = value;\r\n    }\r\n\r\n    function s4() {\r\n        return Math.floor((1 + Math.random()) * 0x10000)\r\n            .toString(16).substring(1);\r\n    }\r\n})());\r\n","((function(){\r\n    'use strict';\r\n\r\n    safeExtend(Object, 'clone', function (obj) {\r\n        var newObj = {};\r\n        for (var property in obj)\r\n            if (obj.hasOwnProperty(property)) {\r\n                var value = obj[property];\r\n                if (typeof value === 'object')\r\n                    newObj[property] = Object.clone(obj[property]);\r\n                else\r\n                    newObj[property] = obj[property];\r\n            }\r\n        return newObj;\r\n    });\r\n\r\n    safeExtend(Object, 'assign', function(target, varArgs) {\r\n        if (target === null)\r\n            throw new TypeError('Cannot convert undefined or null to object');\r\n        var to = Object(target);\r\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n        for (var index = 1; index < arguments.length; index++) {\r\n            var nextSource = arguments[index];\r\n            if (nextSource !== null) {\r\n                for (var nextKey in nextSource) {\r\n                    if (hasOwnProperty.call(nextSource, nextKey)) {\r\n                        to[nextKey] = nextSource[nextKey];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return to;\r\n    });\r\n\r\n    safeExtend(Object, 'extend', function(options, defaults) {\r\n        return Object.assign({}, defaults, options);\r\n    });\r\n\r\n    function safeExtend(prototype, property, value) {\r\n        if(!prototype[property]) prototype[property] = value;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var TreeNode = function (parent, data) {\r\n        this.parent = parent || null;\r\n        this.data = data || {};\r\n        this.children = [];\r\n    };\r\n\r\n    window.TreeNode = TreeNode;\r\n\r\n    TreeNode.prototype.isRoot = function () {\r\n        return !this.parent;\r\n    };\r\n\r\n    TreeNode.prototype.add = function (data) {\r\n        var child = new this.constructor(this, data);\r\n        this.children.push(child);\r\n        return child;\r\n    };\r\n\r\n    TreeNode.prototype.remove = function (index) {\r\n        this.children.slice(index, 1);\r\n        return this;\r\n    };\r\n\r\n    TreeNode.prototype.dfs = function (check) {\r\n        var out = [];\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            if (!check || (check && check(this.children[i])))\r\n                out.push(this.children[i]);\r\n            out.concat(this.children[i].dfs(check));\r\n        }\r\n        return out;\r\n    };\r\n\r\n    TreeNode.prototype.bfs = function (check) {\r\n        var out = [], i;\r\n        for (i = 0; i < this.children.length; i++)\r\n            if (!check || (check && check(this.children[i])))\r\n                out.push(this.children[i]);\r\n        for (i = 0; i < this.children.length; i++)\r\n            out.concat(this.children[i].bfs(check));\r\n        return out;\r\n    };\r\n\r\n    TreeNode.extend = function () {\r\n        var _TreeNode = function (parent, data) {\r\n            TreeNode.call(this, parent, data);\r\n        };\r\n        _TreeNode.prototype = Object.create(TreeNode.prototype);\r\n        _TreeNode.prototype.constructor = _TreeNode;\r\n        return new _TreeNode();\r\n    };\r\n})());\r\n","((function() {\r\n    'use strict';\r\n\r\n    var EventHandler = function (isDebug) {\r\n        this.isDebug = !!isDebug;\r\n        this.listeners = {};\r\n    };\r\n\r\n    EventHandler.prototype.trigger = function() {\r\n        var name = arguments[0];\r\n        var listeners = this.listeners[name] || [];\r\n        Array.prototype.splice.call(arguments, 0, 1);\r\n        if (this.isDebug) console.debug(name, arguments);\r\n        for (var i = 0; i < listeners.length; i++)\r\n            listeners[i].apply(null, arguments);\r\n    };\r\n\r\n    EventHandler.prototype.on = function(name, callback) {\r\n        if (!this.listeners[name]) this.listeners[name] = [];\r\n        this.listeners[name].push(callback);\r\n    };\r\n\r\n    EventHandler.prototype.off = function(name) {\r\n        delete this.listeners[name];\r\n    };\r\n\r\n    EventHandler.prototype.off = function(name, callback) {\r\n        if (this.listeners[name]) {\r\n            var array = this.listeners[name];\r\n            if (array.indexOf(callback) > -1) array.splice(index, 1);\r\n        }\r\n    };\r\n\r\n    EventHandler.prototype.reset = function() {\r\n        var own = this;\r\n        Object.keys(this.listeners).forEach(function(key) {\r\n            delete own.listeners[key];\r\n        });\r\n    };\r\n\r\n    window.EventHandler = EventHandler;\r\n})());\r\n","/* jshint loopfunc:true */\r\n\r\n((function(){\r\n    'use strict';\r\n\r\n    var Logger = function (instance) {\r\n        this.handlers = [];\r\n\r\n        this.addHandler(this.level.ALL, function (level, args) {\r\n            if (Logger.prototype.level.DEBUG === level) {\r\n                console.debug.apply(this, args);\r\n            } else if (Logger.prototype.level.INFO === level) {\r\n                console.info.apply(this, args);\r\n            } else if (Logger.prototype.level.WARNING === level) {\r\n                console.warn.apply(this, args);\r\n            } else if (Logger.prototype.level.ERROR === level) {\r\n                console.error.apply(this, args);\r\n            }\r\n        });\r\n    };\r\n\r\n    Logger.prototype.debug = function () {\r\n        this.log(Logger.prototype.level.DEBUG, arguments);\r\n    };\r\n\r\n    Logger.prototype.info = function () {\r\n        this.log(Logger.prototype.level.INFO, arguments);\r\n    };\r\n\r\n    Logger.prototype.warning = function () {\r\n        this.log(Logger.prototype.level.WARNING, arguments);\r\n    };\r\n\r\n    Logger.prototype.error = function () {\r\n        this.log(Logger.prototype.level.ERROR, arguments);\r\n    };\r\n\r\n    Logger.prototype.log = function (level, args) {\r\n        var tmp = level;\r\n        var levelHandlers = this.handlers[tmp] || [];\r\n        while (tmp >= 0) {\r\n            levelHandlers.forEach(function (handler) {\r\n                handler(level, args);\r\n            });\r\n            levelHandlers = this.handlers[--tmp] || [];\r\n        }\r\n    };\r\n\r\n    Logger.prototype.addHandler = function (level, callback) {\r\n        if (!this.handlers[level])\r\n            this.handlers[level] = [];\r\n        this.handlers[level].push(callback);\r\n    };\r\n\r\n    Logger.prototype.removeHandler = function (level, callback) {\r\n        var levelHandlers = this.handlers[level];\r\n        if (levelHandlers) {\r\n            var index = levelHandlers.indexOf(callback);\r\n            if (index > -1)\r\n                levelHandlers.splice(index, 1);\r\n        }\r\n    };\r\n\r\n    Logger.prototype.level = {\r\n        ALL: 0,\r\n        DEBUG: 1,\r\n        INFO: 2,\r\n        WARNING: 3,\r\n        ERROR: 4,\r\n        NONE: 5,\r\n    };\r\n\r\n    window.Logger = Logger;\r\n})());\r\n","(function(){\r\n    'use strict';\r\n\r\n    var defaultOptions = {\r\n        container: {\r\n            selector: '#cobweb'\r\n        }\r\n    };\r\n\r\n    var Cobweb = function (options) {\r\n        this.options = Object.assign({}, defaultOptions, options);\r\n        var instance = this;\r\n\r\n        this.container = document.querySelector(this.options.container.selector);\r\n        if (!this.container)\r\n            throw new Error('Invalid container selector: \\'' +\r\n                this.options.container.selector + '\\'');\r\n        this.container.addClass('cb-container');\r\n        this.container.data('instance', this);\r\n\r\n        this.logger = new Logger(this, true);\r\n        this.events = new EventHandler(true);\r\n        this.modules = new Modules([this], {\r\n            onLoadedAll: function (names) {\r\n                instance.events.trigger('modules.loaded.all', names);\r\n                instance.events.trigger('app.loaded');\r\n            }\r\n        });\r\n    };\r\n\r\n    window.Cobweb = Cobweb;\r\n}());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Modules = function (params, callbacks) {\r\n        callbacks = callbacks || {};\r\n        var modules = Modules.prototype.all;\r\n        try {\r\n            var sortedNames = topologicalSort(modules);\r\n            for (var i = 0; i < sortedNames.length; i++ ) {\r\n                var name = sortedNames[i];\r\n                var module = modules[name];\r\n                try {\r\n                    module.init.apply(this, params);\r\n                    runCallback(callbacks, 'onLoaded', [name, module]);\r\n                } catch (ex) {\r\n                    console.error('Error loading module:', name, ex);\r\n                    runCallback(callbacks, 'onError', [ex, name, module]);\r\n                }\r\n            }\r\n            runCallback(callbacks, 'onLoadedAll', [sortedNames]);\r\n        } catch (ex) {\r\n            console.error('Error loading modules:', ex);\r\n        }\r\n    };\r\n\r\n    Modules.prototype.all = {};\r\n    Modules.prototype.add = function (name, init, dependencies) {\r\n        dependencies = dependencies || [];\r\n\r\n        var dependant = [];\r\n        var dependencyModule, i;\r\n        for (var moduleName in this.all) {\r\n            var module = this.all[moduleName];\r\n            for (i = 0; i < module.dependencies.length; i++)\r\n                if (module.dependencies[i] === name)\r\n                    dependant.push(moduleName);\r\n        }\r\n        for (i = 0; i < dependencies.length; i++) {\r\n            dependencyModule = this.all[dependencies[i]];\r\n            if (dependencyModule) dependencyModule.dependant.push(name);\r\n        }\r\n\r\n        this.all[name] = {\r\n            dependencies: dependencies,\r\n            dependant: dependant,\r\n            init: init\r\n        };\r\n    };\r\n\r\n    window.Modules = Modules;\r\n\r\n    function topologicalSort (modules) {\r\n        var sortedNames = [];\r\n\r\n        var module = null, i = 0;\r\n        for (var name in modules) {\r\n            module = modules[name];\r\n            for (i = 0; i < module.dependencies.length; i++) {\r\n                var depName = module.dependencies[i];\r\n                if (!modules[depName])\r\n                    throw new Error('Missing module: ' + depName);\r\n            }\r\n        }\r\n\r\n        var nextName = null;\r\n        var candidates = getInitialCandidates(modules);\r\n        while (candidates.length > 0) {\r\n            nextName = candidates.splice(0, 1)[0];\r\n            module = modules[nextName];\r\n            if (module) {\r\n                sortedNames.push(nextName);\r\n                for (i = 0; i < module.dependant.length; i++) {\r\n                    var dependantName = module.dependant[i];\r\n                    if (allDependenciesMet(sortedNames, modules[dependantName]))\r\n                        candidates.push(dependantName);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (Object.keys(modules).length !== sortedNames.length)\r\n            throw new Error('Dependency cycle!');\r\n\r\n        return sortedNames;\r\n    }\r\n\r\n    function getInitialCandidates (modules) {\r\n        var candidates = [];\r\n        for (var name in modules)\r\n            if (modules[name].dependencies.length === 0)\r\n                candidates.push(name);\r\n        return candidates;\r\n    }\r\n\r\n    function allDependenciesMet (loadedUntilNow, module) {\r\n        for (var i = 0; i < module.dependencies.length; i++)\r\n            if (loadedUntilNow.indexOf(module.dependencies[i]) === -1) return false;\r\n        return true;\r\n    }\r\n\r\n    function runCallback (callbacks, name, params) {\r\n        var callback = callbacks[name];\r\n        var isFunction = typeof callback === 'function';\r\n        if (isFunction) callback.apply(null, params);\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('mesh', function (instance) {\r\n        instance.asset = instance.asset || {};\r\n        instance.asset.mesh = {\r\n            get: function (name, callback) {\r\n                Ajax.get('asset/mesh/' + name + '.obj', function (response) {\r\n                    callback(instance.asset.mesh.build(response));\r\n                });\r\n            },\r\n            build: function (source) {\r\n                var mesh = null;\r\n                var vertices = [];\r\n                var lines = source.split(/\\r?\\n/);\r\n                lines.forEach(function (line) {\r\n                    if (line.startsWith('v')) {\r\n                        var vertex = line.substring(2).split(' ').map(function (number) {\r\n                            return parseFloat(number);\r\n                        });\r\n                        vertices.push(vertex);\r\n                    } else if (line.startsWith('f')) {\r\n                        if (mesh === null) {\r\n                            mesh = new Math.HalfEdgeMesh();\r\n                            mesh.addVertices(vertices);\r\n                        }\r\n                        var faceVertices = line.substring(2).split(' ').map(function (index) {\r\n                            return vertices[parseInt(index) - 1];\r\n                        });\r\n                        mesh.addFace(faceVertices);\r\n                    }\r\n                });\r\n                return mesh;\r\n            }\r\n        };\r\n    });\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('shader', function (instance) {\r\n        instance.asset = instance.asset || {};\r\n        instance.asset.shader = {\r\n            get: function (name, callback) {\r\n                var shader = null, firstSource = null;\r\n                Ajax.get('asset/shader/' + name + '.vert', function (response) {\r\n                    if (firstSource) {\r\n                        shader = new Shader(response, firstSource);\r\n                        callback(shader);\r\n                    } firstSource = response;\r\n                });\r\n                Ajax.get('asset/shader/' + name + '.frag', function (response) {\r\n                    if (firstSource) {\r\n                        shader = new Shader(firstSource, response);\r\n                        callback(shader);\r\n                    } firstSource = response;\r\n                });\r\n            }\r\n        };\r\n    });\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('pane-types', function (instance) {\r\n\r\n        instance.events.on('pane.split', function (oldPane, newPane) {\r\n            var oldType = oldPane.attrData('pane-type');\r\n            if (oldType) instance.pane.setType(newPane, oldType);\r\n        });\r\n\r\n        instance.pane.types = {};\r\n\r\n        instance.pane.setType = function (pane, name) {\r\n            if (this.types[name]) {\r\n                var typeCallbacks = this.types[name];\r\n                typeCallbacks.onPaneType(pane, instance);\r\n                pane.dataset.paneType = name;\r\n            }\r\n        };\r\n    }, ['pane']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('pane', function (instance) {\r\n        var mainPanes = document.createElement('div');\r\n        mainPanes.className = 'main-panes';\r\n\r\n        var container = document.querySelector(instance.options.container.selector);\r\n        container.appendChild(mainPanes);\r\n\r\n        instance.events.on('app.loaded', function () {\r\n            instance.pane.internal = new Pane({\r\n                container: 'div.main-panes',\r\n                separator: {\r\n                    size: 3\r\n                },\r\n                callbacks: {\r\n                    onPaneCreate: onPaneCreate,\r\n                    onPaneSplit: onPaneSplit,\r\n                    onPaneResize: onPaneResize,\r\n                    //onPaneMerge: onPaneMerge,\r\n                    //onPaneDestroy: onPaneDestroy,\r\n                }\r\n            });\r\n\r\n            var root = instance.pane.internal.container.querySelector('.pane');\r\n            instance.pane.setType(root, 'surface');\r\n        });\r\n\r\n        instance.pane = {};\r\n\r\n        function onPaneCreate (pane) {\r\n            instance.events.trigger('pane.create', pane);\r\n        }\r\n\r\n        function onPaneSplit (origin, newPane) {\r\n            instance.events.trigger('pane.split', origin, newPane);\r\n        }\r\n\r\n        function onPaneResize (pane) {\r\n            instance.events.trigger('pane.resize', pane);\r\n        }\r\n\r\n        function onPaneMerge (merger, toRemove) {\r\n            console.debug('onPaneMerge', merger, toRemove);\r\n        }\r\n\r\n        function onPaneDestroy (pane) {\r\n            console.debug('onPaneDestroy', pane);\r\n        }\r\n    });\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Camera = function (center, rotation, distance) {\r\n        this.center = center || [0, 0, 0];\r\n        this.rotation = rotation || [2.8, 0.5];\r\n        this.distance = distance || 15;\r\n        this.projection = mat4.create();\r\n        this.ortho = mat4.create();\r\n        this.height = 0;\r\n        this.width = 0;\r\n    };\r\n\r\n    Camera.prototype.getViewMatrix = function (view) {\r\n        view = view || mat4.create();\r\n        var eye = [0, 0, 0];\r\n        this.getPosition(eye);\r\n        mat4.lookAt(view, eye, this.center, this.getUpDirection());\r\n        return view;\r\n    };\r\n\r\n    Camera.prototype.getPosition = function (eye) {\r\n        eye = eye || vec3.create();\r\n        vec3.set(eye, 0, 0, -this.distance);\r\n        vec3.rotateX(eye, eye, this.rotation[1]);\r\n        vec3.rotateY(eye, eye, -this.rotation[0]);\r\n        return eye;\r\n    };\r\n\r\n    Camera.prototype.getDirection = function (direction) {\r\n        direction = direction || vec3.create();\r\n        var eye = this.getPosition();\r\n        vec3.sub(direction, this.center, eye);\r\n        vec3.normalize(direction, direction);\r\n        return direction;\r\n    };\r\n\r\n    Camera.prototype.getRay = function (ray, canvasCoords, canvasSize) {\r\n        ray = ray || new Math.Ray();\r\n        this.getPosition(ray.start);\r\n        vec3.set(ray.direction, canvasCoords[0] / (canvasSize[0] * 0.5) - 1.0,\r\n            canvasCoords[1] / (canvasSize[1] * 0.5) - 1.0, 1);\r\n        var auxMat = mat4.create();\r\n        mat4.multiply(auxMat, this.projection, this.getViewMatrix());\r\n        mat4.invert(auxMat, auxMat);\r\n        vec3.transformMat4(ray.direction, ray.direction, auxMat);\r\n        vec3.normalize(ray.direction, ray.direction);\r\n        return ray;\r\n    };\r\n\r\n    Camera.prototype.getUpDirection = function (up) {\r\n        up = up || vec3.create();\r\n        var vRotation = this.rotation[1];\r\n        if (vRotation >= Math.PI / 2 &&\r\n            vRotation <= ((Math.PI * 3) / 2))\r\n            vec3.set(up, 0, 1, 0);\r\n        else vec3.set(up, 0, -1, 0);\r\n        return up;\r\n    };\r\n\r\n    Camera.prototype.computeLocalAxis = function () {\r\n        var left = [0, 0, 0];\r\n        var up = [0, 0, 0];\r\n\r\n        var forward = this.getDirection();\r\n        vec3.cross(left, forward, [0, 1, 0]);\r\n        vec3.cross(up, forward, left);\r\n\r\n        return {up: up, left: left};\r\n    };\r\n\r\n    window.Math.Camera = Camera;\r\n})());\r\n","(function () {\r\n\t'use strict';\r\n\r\n\tvar defaultOptions = {\r\n\t\tmaxItems: 10,\r\n\t\tmaxDepth: 10,\r\n\t\tpadding: 0.1\r\n\t};\r\n\r\n\tvar OctreeNode = function (parent, depth) {\r\n\t\tthis.items = [];\r\n\t\tthis.children = null;\r\n\t\tthis.depth = depth || 0;\r\n\t\tthis.parent = parent || null;\r\n\t\tthis.aabb = { max: [0, 0, 0], min: [0, 0, 0] };\r\n\r\n\t\tthis.root = this;\r\n\t\twhile (this.root.parent !== null)\r\n\t\t\tthis.root = this.root.parent;\r\n\t};\r\n\r\n\tOctreeNode.prototype.getAllItems = function (container) {\r\n\t\tcontainer = container || [];\r\n\t\tvar i;\r\n        if (!this.children) {\r\n\t\t\tcontainer = container.concat(this.items);\r\n\t\t} else {\r\n            for (i = 0; i < this.children.length; i++)\r\n                container = this.children[i].getAllItems(container);\r\n        }\r\n\t\treturn container;\r\n\t};\r\n\r\n\tOctreeNode.prototype.addItems = function (items) {\r\n\t\tvar result = false;\r\n\t\tfor (var i = 0; i < items.length; i++) {\r\n\t\t\tvar item = items[i];\r\n\t\t\tresult |= this.addItem(item);\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\tOctreeNode.prototype.addItem = function (item) {\r\n\t\tif (this.canContain(item)) {\r\n\t\t\tif (this.children) {\r\n\t\t\t\tfor (var i = 0; i < 8; i++)\r\n\t\t\t\t\tif (this.children[i].addItem(item))\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\tthis.items.push(item);\r\n\t\t\t\tthis.splitIfNeeded();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tOctreeNode.prototype.removeItem = function (item) {\r\n\t\tvar removed = false;\r\n\t\tvar index = this.items.indexOf(item);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.items.splice(index, 1);\r\n\t\t\tthis.mergeIfNeeded();\r\n\t\t\tremoved = true;\r\n\t\t} else {\r\n\t\t\tif (this.children) {\r\n\t\t\t\tfor (var i = 0; i < this.children.length; i++) {\r\n\t\t\t\t\tremoved |= this.children[i].removeItem(item);\r\n\t\t\t\t\tif (removed) break;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (removed) this.mergeIfNeeded();\r\n\t\treturn removed;\r\n\t};\r\n\r\n\tOctreeNode.prototype.splitIfNeeded = function () {\r\n\t\tif (this.root.options.maxItems < this.items.length &&\r\n\t\t\tthis.root.options.maxDepth > this.depth) {\r\n\t\t\tthis.children = [];\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tthis.children[i] = new OctreeNode(this, this.depth + 1);\r\n\t\t\t\tthis.children[i].updateDimensions(this.aabb, i);\r\n\t\t\t}\r\n\t\t\tthis.redistributeItems(this.items);\r\n\t\t\tthis.items = [];\r\n\t\t}\r\n\t};\r\n\r\n\tOctreeNode.prototype.mergeIfNeeded = function () {\r\n\t\tif (this.children) {\r\n\t\t\tvar canMerge = false;\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tthis.children[i].mergeIfNeeded();\r\n\t\t\t\tcanMerge = !this.children[i].children;\r\n\t\t\t\tif (!canMerge) return false;\r\n\t\t\t}\r\n\t\t\tvar subItems = this.getAllItems();\r\n\t\t\tif (this.root.options.maxItems > subItems.length) {\r\n\t\t\t\tthis.children = null;\r\n\t\t\t\tthis.redistributeItems(subItems);\r\n\t\t\t\treturn true;\r\n\t\t\t} else return false;\r\n\t\t} else return false;\r\n\t};\r\n\r\n\tOctreeNode.prototype.canContain = function (item) {\r\n\t\treturn canContain(item, this.aabb);\r\n\t};\r\n\r\n\tOctreeNode.prototype.getCollidingNodes = function (ray) {\r\n\t\tvar nodes = [];\r\n\t\tvar aabb = this.aabb;\r\n\t\tvar collidingPoint = [0, 0, 0];\r\n\t\tif (Math.geo.rayAABBCollision(ray.start, ray.direction,\r\n\t\t\tthis.aabb.min, this.aabb.max, collidingPoint)) {\r\n\t\t\tif (this.children) {\r\n\t\t\t\tfor (var i = 0; i < this.children.length; i++) {\r\n\t\t\t\t\tvar child = this.children[i];\r\n\t\t\t\t\tnodes = nodes.concat(child.getCollidingNodes(ray));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnodes.push(this);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nodes;\r\n\t};\r\n\r\n\tOctreeNode.prototype.getCollidingItems = function (ray) {\r\n\t\tvar items = [];\r\n\t\tthis.getCollidingNodes(ray).forEach(function (node) {\r\n\t\t\titems = items.concat(node.items);\r\n\t\t});\r\n\t\treturn items;\r\n\t};\r\n\r\n\tOctreeNode.prototype.updateDimensions = function (parentAabb, index) {\r\n\t\tvar half = [0, 0, 0];\r\n\t\tvec3.sub(half, parentAabb.max, parentAabb.min);\r\n\t\tvec3.scale(half, half, 0.5);\r\n\t\tvar ref = [!(index & 1), !(index & 2), !(index & 4)];\r\n\t\tvec3.mul(this.aabb.min, half, ref);\r\n\t\tvec3.add(this.aabb.min, this.aabb.min, parentAabb.min);\r\n\t\tvec3.add(this.aabb.max, this.aabb.min, half);\r\n\t\tif (this.children)\r\n\t\t\tfor (var i = 0; i < this.children.length; i++)\r\n\t\t\t\tthis.children[i].updateDimensions(this.aabb, i);\r\n\t};\r\n\r\n\tOctreeNode.prototype.redistributeItems = function (items) {\r\n\t\titems = items || this.items;\r\n\t\tfor (var i = 0; i < items.length; i++) {\r\n\t\t\tvar item = items[i];\r\n\t\t\tvar containingParent = findContainingParent(this, item);\r\n\t\t\tif (containingParent === null) {\r\n\t\t\t\tconsole.warn('Recomputing bounds...');\r\n\t\t\t\tthis.root.updateDimensions([item]);\r\n\t\t\t\tcontainingParent = findContainingParent(this, item);\r\n\t\t\t}\r\n\t\t\tcontainingParent.addItem(item);\r\n\t\t}\r\n\t};\r\n\r\n\tvar Octree = function (options) {\r\n\t\tthis.options = Object.assign({}, defaultOptions, options);\r\n\t\tOctreeNode.call(this);\r\n\t};\r\n\r\n\tOctree.prototype = Object.create(OctreeNode.prototype);\r\n\tOctree.prototype.constructor = OctreeNode;\r\n\r\n\tvar _addItem = Octree.prototype.addItem;\r\n\tOctree.prototype.addItem = function (item) {\r\n\t\tif (!this.canContain(item))\r\n\t\t\tthis.updateDimensions([item]);\r\n\t\treturn _addItem.call(this, item);\r\n\t};\r\n\r\n\tOctree.prototype.onVerticesMove = function (items) {\r\n\t\tfor (var i = 0; i < items.length; i++)\r\n\t\t\tif (this.removeItem(items[i]))\r\n\t\t\t\tthis.addItem(items[i]);\r\n\t};\r\n\r\n\tOctree.prototype.updateDimensions = function (newItems) {\r\n\t\tvar allItems = this.getAllItems(newItems);\r\n\t\tthis.updateBounds(allItems);\r\n\t\tif (this.children) {\r\n\t\t\tfor (var i = 0; i < this.children.length; i++) {\r\n\t\t\t\tthis.children[i].updateDimensions(this.aabb, i);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tOctree.prototype.updateBounds = function (items) {\r\n\t\tvar max = [0, 0, 0].fill(-Number.MAX_VALUE);\r\n\t\tvar min = [0, 0, 0].fill(Number.MAX_VALUE);\r\n\t\tvar padding = this.options.padding;\r\n\t\titems.forEach(function (item) {\r\n\t\t\tfor (var j = 0; j < 3; j++) {\r\n\t\t\t\tmin[j] = Math.min(min[j], item[j] - padding);\r\n\t\t\t\tmax[j] = Math.max(max[j], item[j] + padding);\r\n\t\t\t}\r\n\t\t});\r\n\t\tvec3.copy(this.aabb.min, min);\r\n\t\tvec3.copy(this.aabb.max, max);\r\n\t};\r\n\r\n\tMath.Octree = Octree;\r\n\r\n\tfunction canContain (item, aabb) {\r\n\t\tfor (var j = 0; j < 3; j++) {\r\n\t\t\tif (item[j] < aabb.min[j]) return false;\r\n\t\t\tif (item[j] > aabb.max[j]) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction findContainingParent (current, item) {\r\n\t\tvar result = current;\r\n\t\twhile (result && !result.canContain(item))\r\n\t\t\tresult = result.parent;\r\n\t\treturn result;\r\n\t}\r\n})();\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Plane = function (point, normal) {\r\n        this.normal = normal || [0, 1, 0];\r\n        this.point = point || vec3.create();\r\n        vec3.normalize(this.normal, this.normal);\r\n    };\r\n\r\n    window.Math.Plane = Plane;\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Ray = function (start, direction) {\r\n        this.direction = direction || [0, 0, 1];\r\n        this.start = start || vec3.create();\r\n        vec3.normalize(this.direction, this.direction);\r\n    };\r\n\r\n    Ray.fromPoints = function (a, b) {\r\n        var direction = vec3.create();\r\n        vec3.sub(direction, b, a);\r\n        return new Ray(a, direction);\r\n    };\r\n\r\n    window.Math.Ray = Ray;\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('surface', function (instance) {\r\n        instance.pane.types.surface = {\r\n            onPaneType: onSurfacePaneType\r\n        };\r\n\r\n        instance.events.on('pane.resize', function (pane) {\r\n            if (pane.attrData('pane-type') === 'surface')\r\n                updateCanvasSize(instance, pane);\r\n        });\r\n\r\n        window.addEventListener('resize', function (event) {\r\n            var surfaces = instance.pane.internal.container\r\n                .querySelectorAll('.pane canvas');\r\n            for (var i = 0; i < surfaces.length; i++) {\r\n                updateCanvasSize(instance, surfaces[i].parentNode);\r\n            }\r\n        });\r\n\r\n        instance.surface = {};\r\n    }, ['pane-types']);\r\n\r\n    var surfaceIndex = 0;\r\n    function onSurfacePaneType (pane, instance) {\r\n        var canvas = document.createElement('canvas');\r\n        canvas.id = 'surface' + (surfaceIndex++);\r\n        canvas.addEventListener('mouseover', function (event) {\r\n            event.target.focus();\r\n        });\r\n        canvas.className = 'surface';\r\n        pane.appendChild(canvas);\r\n\r\n        instance.surface.map = instance.surface.map || {};\r\n        instance.surface.map[canvas.id] = {\r\n            camera: new Math.Camera()\r\n        };\r\n\r\n        updateCanvasSize(instance, pane);\r\n\r\n        instance.events.trigger('surface.create', canvas);\r\n    }\r\n\r\n    function updateCanvasSize (instance, pane) {\r\n        var canvas = pane.querySelector('canvas');\r\n        var context = canvas.getContext('2d');\r\n        var data = instance.surface.map[canvas.id];\r\n\r\n        var header = pane.querySelector('.pane-header');\r\n        var headerHeight = header ? header.height() : 0;\r\n\r\n        var gui = pane.querySelector('.surface-toolbar');\r\n        var guiWidth = gui ? gui.width() : 0;\r\n\r\n        var width = pane.width() - guiWidth;\r\n        var height = pane.height() - headerHeight;\r\n        canvas.height = height;\r\n        canvas.width = width;\r\n\r\n        context.setTransform(1, 0, 0, 1, 0, 0);\r\n        context.translate(0, height);\r\n        context.scale(1, -1);\r\n\r\n        data.camera.width = width;\r\n        data.camera.height = height;\r\n        mat4.perspective(data.camera.projection, 45 * DEG2RAD, width / height, 0.1, 1000);\r\n        mat4.ortho(data.camera.ortho, 0, width, 0, height, -1, 1);\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('halfedge-cache', function (instance) {\r\n        var superConstructor = Math.HalfEdgeMesh;\r\n        var cachedHalfEdgeMesh = function () {\r\n            superConstructor.call(this);\r\n            var heMesh = this;\r\n            this.cache = {\r\n                meshes: {},\r\n                get: function (key) {\r\n                    var e = this.meshes[key];\r\n                    var builder = Math.HalfEdgeMesh.prototype.builders[key];\r\n                    if (!e || e.rebuild) {\r\n                        e = builder.onCreate(heMesh);\r\n                        heMesh.rebuild = false;\r\n                        this.meshes[key] = e;\r\n                    }\r\n                    if (builder.onClean) builder.onClean(e);\r\n                    return e;\r\n                },\r\n                onVerticesChange: function (vertices) {\r\n                    for (var key in this.meshes) {\r\n                        var e = this.meshes[key];\r\n                        var builder = Math.HalfEdgeMesh.prototype.builders[key];\r\n                        if (builder.onVerticesChange)\r\n                            builder.onVerticesChange(vertices, e);\r\n                    }\r\n                }\r\n            };\r\n        };\r\n        cachedHalfEdgeMesh.prototype = Object.create(Math.HalfEdgeMesh.prototype);\r\n        cachedHalfEdgeMesh.prototype.constructor = cachedHalfEdgeMesh;\r\n\r\n        Math.HalfEdgeMesh = cachedHalfEdgeMesh;\r\n\r\n        var _addVertices = Math.HalfEdgeMesh.prototype.addVertices;\r\n        Math.HalfEdgeMesh.prototype.addVertices = function (vertices) {\r\n            _addVertices.call(this, vertices);\r\n            this.invalidateCache();\r\n        };\r\n\r\n        var _addFace = Math.HalfEdgeMesh.prototype.addFace;\r\n        Math.HalfEdgeMesh.prototype.addFace = function (vertices) {\r\n            var newFace = _addFace.call(this, vertices);\r\n            this.invalidateCache();\r\n            return newFace;\r\n        };\r\n\r\n        Math.HalfEdgeMesh.prototype.invalidateCache = function () {\r\n        for (var key in this.cache.meshes) {\r\n            this.cache.meshes[key].rebuild = true;\r\n        }\r\n        };\r\n\r\n        Math.HalfEdgeMesh.prototype.builders = {};\r\n        Math.HalfEdgeMesh.prototype.addBuilder = function (key, builder) {\r\n            this.builders[key] = builder;\r\n        };\r\n\r\n    }, ['halfedge']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('halfedge', function (instance) {\r\n        Math.HalfEdgeMesh = HalfEdgeMesh;\r\n    });\r\n\r\n    var HalfEdgeMesh = function () {\r\n        this.bounds = new Math.Octree();\r\n        this.halfEdges = [];\r\n        this.vertices = [];\r\n        this.faces = [];\r\n    };\r\n\r\n    HalfEdgeMesh.prototype.addVertices = function (vertices) {\r\n        if (arguments.length > 1) this.addVertices.apply(this, arguments);\r\n        if (!Array.isArray(vertices)) return;\r\n        this.bounds.addItems(vertices);\r\n        for (var i = 0; i < vertices.length; i++) {\r\n            var vertex = vertices[i];\r\n            var index = this.vertices.indexOf(vertex);\r\n            if (index < 0) {\r\n                var _halfEdge = null;\r\n                if (!vertex._halfEdge) {\r\n                    _halfEdge = {};\r\n                    _halfEdge.computeNormal = VertexComputeNormal;\r\n                    _halfEdge.getFaces = VertexGetFaces;\r\n                    _halfEdge.outEdges = [];\r\n                    vertex._halfEdge = _halfEdge;\r\n                } else _halfEdge = vertex._halfEdge;\r\n                _halfEdge.ownIndex = this.vertices.length;\r\n                this.vertices.push(vertex);\r\n            } else {\r\n                console.error('addVertices: Adding vertex twice!', vertex);\r\n            }\r\n        }\r\n    };\r\n\r\n    HalfEdgeMesh.prototype.addFace = function (vertices) {\r\n        if (arguments.length > 1) return this.addFace.apply(this, arguments);\r\n        if (!Array.isArray(vertices)) return null;\r\n        if (vertices.length >= 3) {\r\n            var he1 = buildEdge(vertices[0], vertices[1]);\r\n            var he2 = buildEdge(vertices[1], vertices[2], he1.face);\r\n            he1.next = he2;\r\n            this.halfEdges.push(he1, he2);\r\n\r\n            var last, prev = he2;\r\n            for (var i = 2; i < vertices.length - 1; i++) {\r\n                last = buildEdge(vertices[i], vertices[i + 1], he1.face);\r\n                prev.next = last;\r\n                this.halfEdges.push(last);\r\n                prev = last;\r\n            }\r\n            last = buildEdge(vertices[i], vertices[0], he1.face);\r\n            last.next = he1;\r\n            this.halfEdges.push(last);\r\n            prev.next = last;\r\n\r\n            this.faces.push(he1.face);\r\n            return he1.face;\r\n        } else {\r\n            console.error('addFace: 3 or more vertices needed to form a face!');\r\n        }\r\n        return null;\r\n    };\r\n\r\n    HalfEdgeMesh.prototype.onVerticesChange = function (vertex) {\r\n        if (this.cache && this.cache.onVerticesChange)\r\n            this.cache.onVerticesChange(vertex);\r\n        this.bounds.onVerticesMove(vertex);\r\n    };\r\n\r\n    HalfEdgeMesh.prototype.clear = function () {\r\n        this.halfEdges = [];\r\n        this.vertices = [];\r\n        this.faces = [];\r\n    };\r\n\r\n    function buildEdge (start, end, face) {\r\n        var edge = {};\r\n        edge.vertex = end;\r\n        edge.face = face ? face : new HalfEdgeFace(edge);\r\n        edge.opposite = findOppositeEdge(start, end, edge);\r\n        start._halfEdge.outEdges.push(edge);\r\n        edge.next = null;\r\n        return edge;\r\n    }\r\n\r\n    function findOppositeEdge(start, end, he) {\r\n        var opposites = end._halfEdge.outEdges.filter(function (he) {\r\n            return he.vertex === start;\r\n        });\r\n        if (opposites.length > 0) {\r\n            var opposite = opposites[0];\r\n            opposite.opposite = he;\r\n            return opposite;\r\n        } else return null;\r\n    }\r\n\r\n    function VertexGetFaces () {\r\n        return this.outEdges.map(function (edge) {\r\n            return edge.face;\r\n        });\r\n    }\r\n\r\n    function VertexComputeNormal () {\r\n        var normal = [0, 0, 0];\r\n        this.getFaces().forEach(function (face) {\r\n            vec3.add(normal, normal, face.computeRawNormal());\r\n        });\r\n        vec3.normalize(normal, normal);\r\n        return normal;\r\n    }\r\n\r\n    var HalfEdgeFace = function (halfEdge) {\r\n        this.halfEdge = halfEdge;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.getEdges = function () {\r\n        var output = [];\r\n        var he = this.halfEdge;\r\n        while (he.next !== this.halfEdge) {\r\n            output.push(he);\r\n            he = he.next;\r\n            if (he === null) {\r\n                var a = 0;\r\n            }\r\n        }\r\n        output.push(he);\r\n        return output;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.getVertices = function () {\r\n        return this.getEdges().map(function (edge) {\r\n            return edge.vertex;\r\n        });\r\n    };\r\n\r\n    HalfEdgeFace.prototype.getVerticesTriangulated = function () {\r\n        var triangulated = [];\r\n        var vertices = this.getVertices();\r\n        for (var i = 0; i < vertices.length - 2; i++) {\r\n            triangulated.push([vertices[0], vertices[i + 1], vertices[i + 2]]);\r\n        }\r\n        return triangulated;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.computeRawNormal = function () {\r\n        var normal = [0, 0, 0];\r\n        this.getVerticesTriangulated().forEach(function (triplet) {\r\n            var triangleNormal = computeNormal(triplet[0], triplet[1], triplet[2]);\r\n            vec3.add(normal, normal, triangleNormal);\r\n        });\r\n        return normal;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.computeNormal = function () {\r\n        var normal = this.computeRawNormal();\r\n        vec3.normalize(normal, normal);\r\n        return normal;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.computeCenter = function () {\r\n        return Math.geo.computePointsCenter(this.getVertices());\r\n    };\r\n\r\n    function computeNormal (v1, v2, v3) {\r\n        var tmp1 = vec3.create();\r\n        var tmp2 = vec3.create();\r\n        vec3.sub(tmp1, v2, v1);\r\n        vec3.sub(tmp2, v3, v1);\r\n        vec3.cross(tmp1, tmp1, tmp2);\r\n        return tmp1;\r\n    }\r\n})());\r\n","(function () {\r\n    'use strict';\r\n\r\n    var EPSILON = 0.000001;\r\n\r\n    Math.geo = Math.geo || {};\r\n\r\n    Math.geo.rayFaceCollision = function (start, direction, vertices, result) {\r\n        var triangles = Math.geo.triangulateFace(vertices);\r\n        for (var i = 0; i < triangles.length; i++) {\r\n            var triangle = triangles[i];\r\n            if (Math.geo.rayTriangleCollision(start, direction,\r\n                triangle[0], triangle[1], triangle[2], result))\r\n                return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    Math.geo.rayTriangleCollision = function (start, direction, v1, v2, v3, result) {\r\n        result = result || [0, 0, 0];\r\n    \tvar triangleNormal = getNormal(v1, v2, v3);\r\n        if (Math.geo.rayPlaneCollision(start, direction, v1, triangleNormal, result)) {\r\n            var bary = getBarycentricCoordinates(v1, v2, v3, result);\r\n        \treturn (bary[0] <= 1 && bary[0] >= 0) &&\r\n                (bary[1] <= 1 && bary[1] >= 0) &&\r\n                (bary[2] <= 1 && bary[2] >= 0);\r\n        }\r\n    \treturn false;\r\n    };\r\n\r\n    Math.geo.rayPlaneCollision = function (start, direction, planePoint, planeNormal, result) {\r\n\t\tvar numer = vec3.dot(planePoint, planeNormal) -\r\n            vec3.dot(planeNormal, start);\r\n\t\tvar denom = vec3.dot(planeNormal, direction);\r\n\t\tif (Math.abs(denom) < EPSILON) return false;\r\n\t\tvar t = numer / denom;\r\n\t\tif (t < 0.0) return false;\r\n\t\tif (result) {\r\n            vec3.scale(result, direction, t);\r\n            vec3.add(result, start, result);\r\n        }\r\n\t\treturn true;\r\n    };\r\n\r\n    //TODO: refactor to reduce number of operations\r\n    Math.geo.rayAABBCollision = function (start, direction, minB, maxB, result) {\r\n        result = result || vec3.create();\r\n\r\n\t\tvar inside = true;\r\n\t\tvar quadrant = new Float32Array(3);\r\n\t\tvar i = 0|0;\r\n\t\tvar whichPlane;\r\n\t\tvar maxT = new Float32Array(3);\r\n\t\tvar candidatePlane = new Float32Array(3);\r\n\r\n\t\t/* Find candidate planes; this loop can be avoided if\r\n\t\trays cast all from the eye(assume perpsective view) */\r\n\t\tfor (i=0; i < 3; ++i)\r\n\t\t\tif(start[i] < minB[i]) {\r\n\t\t\t\tquadrant[i] = 1;\r\n\t\t\t\tcandidatePlane[i] = minB[i];\r\n\t\t\t\tinside = false;\r\n\t\t\t}else if (start[i] > maxB[i]) {\r\n\t\t\t\tquadrant[i] = 0;\r\n\t\t\t\tcandidatePlane[i] = maxB[i];\r\n\t\t\t\tinside = false;\r\n\t\t\t}else\t{\r\n\t\t\t\tquadrant[i] = 2;\r\n\t\t\t}\r\n\r\n\t\t/* Ray origin inside bounding box */\r\n\t\tif(inside)\t{\r\n\t\t\tvec3.copy(result, start);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/* Calculate T distances to candidate planes */\r\n\t\tfor (i = 0; i < 3; ++i)\r\n\t\t\tif (quadrant[i] !== 2 && direction[i] !== 0)\r\n\t\t\t\tmaxT[i] = (candidatePlane[i] - start[i]) / direction[i];\r\n\t\t\telse\r\n\t\t\t\tmaxT[i] = -1;\r\n\r\n\t\t/* Get largest of the maxT's for final choice of intersection */\r\n\t\twhichPlane = 0;\r\n\t\tfor (i = 1; i < 3; i++)\r\n\t\t\tif (maxT[whichPlane] < maxT[i])\r\n\t\t\t\twhichPlane = i;\r\n\r\n\t\t/* Check final candidate actually inside box */\r\n\t\tif (maxT[whichPlane] < 0) return false;\r\n\t\tif (maxT[whichPlane] > Number.MAX_VALUE) return false; //NOT TESTED\r\n\r\n\t\tfor (i = 0; i < 3; ++i)\r\n\t\t\tif (whichPlane != i) {\r\n\t\t\t\tresult[i] = start[i] + maxT[whichPlane] * direction[i];\r\n\t\t\t\tif (result[i] < minB[i] || result[i] > maxB[i])\r\n\t\t\t\t\treturn false;\r\n\t\t\t} else {\r\n\t\t\t\tresult[i] = candidatePlane[i];\r\n\t\t\t}\r\n\t\treturn true;\r\n    };\r\n\r\n    //TODO: refactor to reduce number of operations\r\n    Math.geo.closestPointsBetweenSegments = function (a0,a1, b0,b1, p_a, p_b) {\r\n\t\tvar u = vec3.subtract( vec3.create(), a1, a0 );\r\n\t\tvar v = vec3.subtract( vec3.create(), b1, b0 );\r\n\t\tvar w = vec3.subtract( vec3.create(), a0, b0 );\r\n\r\n\t\tvar a = vec3.dot(u,u);         // always >= 0\r\n\t\tvar b = vec3.dot(u,v);\r\n\t\tvar c = vec3.dot(v,v);         // always >= 0\r\n\t\tvar d = vec3.dot(u,w);\r\n\t\tvar e = vec3.dot(v,w);\r\n\t\tvar D = a*c - b*b;        // always >= 0\r\n\t\tvar sc, tc;\r\n\r\n\t\t// compute the line parameters of the two closest points\r\n\t\tif (D < EPSILON) {          // the lines are almost parallel\r\n\t\t\tsc = 0.0;\r\n\t\t\ttc = (b>c ? d/b : e/c);    // use the largest denominator\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsc = (b*e - c*d) / D;\r\n\t\t\ttc = (a*e - b*d) / D;\r\n\t\t}\r\n\r\n\t\t// get the difference of the two closest points\r\n\t\tif(p_a)\tvec3.add(p_a, a0, vec3.scale(vec3.create(),u,sc));\r\n\t\tif(p_b)\tvec3.add(p_b, b0, vec3.scale(vec3.create(),v,tc));\r\n\r\n\t\tvar dP = vec3.add( vec3.create(), w, vec3.subtract( vec3.create(), vec3.scale(vec3.create(),u,sc) , vec3.scale(vec3.create(),v,tc)) );  // =  L1(sc) - L2(tc)\r\n\t\treturn vec3.length(dP);   // return the closest distance\r\n\t};\r\n\r\n    Math.geo.rayPointDistance = function (start, direction, point) {\r\n        var aux = [0, 0, 0];\r\n        vec3.sub(aux, point, start);\r\n        vec3.cross(aux, direction, aux);\r\n        return vec3.len(aux);\r\n    };\r\n\r\n    Math.geo.pointPointDistance = function (p1, p2) {\r\n        var aux = [0, 0, 0];\r\n        vec3.sub(aux, p2, p1);\r\n        return vec3.len(aux);\r\n    };\r\n\r\n    Math.geo.triangulateFace = function (vertices) {\r\n        var triangulated = [];\r\n        for (var i = 0; i < vertices.length - 2; i++) {\r\n            triangulated.push([vertices[0], vertices[i + 1], vertices[i + 2]]);\r\n        }\r\n        return triangulated;\r\n    };\r\n\r\n    Math.geo.computePointsCenter = function (points) {\r\n        if (!points || points.length === 0) return null;\r\n        var center = [0, 0, 0];\r\n        points.forEach(function(point) {\r\n            vec3.add(center, center, point);\r\n        });\r\n        vec3.scale(center, center, 1 / points.length);\r\n        return center;\r\n    };\r\n\r\n    Math.geo.findClosestPointIndex = function (position, points) {\r\n        if (!points || !points.length) return null;\r\n        var distance = Math.geo.pointPointDistance(position, points[0]);\r\n        var closestIndex = 0;\r\n        for (var i = 1; i < points.length; i++) {\r\n            var newDistance = Math.geo.pointPointDistance(position, points[i]);\r\n            if (newDistance < distance) {\r\n                distance = newDistance;\r\n                closestIndex = i;\r\n            }\r\n        }\r\n        return closestIndex;\r\n    };\r\n\r\n    Math.geo.findClosestPoint = function (position, points) {\r\n        if (!points || !points.length) return null;\r\n        var index = Math.geo.findClosestPointIndex(position, points);\r\n        return points[index];\r\n    };\r\n\r\n    Math.geo.findClosestFace = function (position, faces) {\r\n        if (!faces || !faces.length) return null;\r\n        var centers = faces.map(function (face) {\r\n            return face.computeCenter();\r\n        });\r\n        var index = Math.geo.findClosestPointIndex(position, centers);\r\n        return faces[index];\r\n    };\r\n\r\n    function getBarycentricCoordinates (p1, p2, p3, point) {\r\n        var v0 = getVectorFromPoints(p1, p2);\r\n        var v1 = getVectorFromPoints(p1, p3);\r\n        var v2 = getVectorFromPoints(p1, point);\r\n\r\n    \tvar d00 = vec3.dot(v0, v0);\r\n    \tvar d01 = vec3.dot(v0, v1);\r\n    \tvar d11 = vec3.dot(v1, v1);\r\n    \tvar d20 = vec3.dot(v2, v0);\r\n    \tvar d21 = vec3.dot(v2, v1);\r\n    \tvar denom = d00 * d11 - d01 * d01;\r\n\r\n        var result = [(d11 * d20 - d01 * d21) / denom,\r\n            (d00 * d21 - d01 * d20) / denom, 0];\r\n        result[2] = 1 - result[0] - result[1];\r\n    \treturn result;\r\n    }\r\n\r\n    function getNormal (v1, v2, v3) {\r\n        var tmp1 = vec3.create();\r\n        var tmp2 = vec3.create();\r\n        vec3.sub(tmp1, v2, v1);\r\n        vec3.sub(tmp2, v3, v1);\r\n        vec3.cross(tmp1, tmp1, tmp2);\r\n        return tmp1;\r\n    }\r\n\r\n    function getVectorFromPoints (a, b) {\r\n        var output = vec3.create();\r\n        vec3.sub(output, b, a);\r\n        return output;\r\n    }\r\n})();\r\n","((function () {\r\n    'use strict';\r\n\r\n    var originalRotation = null;\r\n    var mouseDownCoords = null;\r\n\r\n    Modules.prototype.add('common-interaction', function (instance) {\r\n        instance.surface.interactions.common = {\r\n            onMouseWheel: function (event, realCoords) {\r\n                var canvas = event.target;\r\n                var delta = Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail)));\r\n\r\n                var data = instance.surface.map[canvas.id];\r\n                data.camera.distance -= (delta * data.camera.distance) / 25;\r\n\r\n                return true;\r\n            },\r\n            onMouseMove: function (event, realCoords) {\r\n                if (event.target.dataset.moving) {\r\n                    var canvas = event.target;\r\n                    var data = instance.surface.map[canvas.id];\r\n                    if (data) {\r\n                        var delta = getCoordsDelta(mouseDownCoords, realCoords);\r\n                        combine(data.camera, originalRotation, delta);\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            onMouseDown: function (event, realCoords) {\r\n                var canvas = event.target;\r\n                var data = instance.surface.map[canvas.id];\r\n                if (event.which === 3) {\r\n                    event.target.dataset.moving = 'true';\r\n                    upNormalMouseDown = vec3.equals(data.camera.getUpDirection(), [0, 1, 0]);\r\n                    originalRotation = data.camera.rotation.slice();\r\n                    mouseDownCoords = realCoords;\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n            onMouseUp: function (event, realCoords) {\r\n                if (event.which === 3) {\r\n                    delete event.target.dataset.moving;\r\n                    var data = instance.surface.map[event.target.id];\r\n                    mouseDownCoords = null;\r\n                }\r\n                return true;\r\n            }\r\n        };\r\n    }, ['surface-interaction']);\r\n\r\n    var upNormalMouseDown = true;\r\n    function combine (surface, originalRotation, delta) {\r\n        if (!originalRotation) return;\r\n        if (!upNormalMouseDown) delta[0] = -delta[0];\r\n\r\n        var rotation = surface.rotation;\r\n        rotation[0] = originalRotation[0] + delta[0] * 0.005;\r\n        rotation[1] = originalRotation[1] + delta[1] * 0.005;\r\n        clampRotations(rotation);\r\n    }\r\n\r\n    function getCoordsDelta (initial, current) {\r\n        if (!initial) return [0, 0];\r\n        return [\r\n            initial[0] - current[0],\r\n            current[1] - initial[1]\r\n        ];\r\n    }\r\n\r\n    function clampRotations (rotations) {\r\n        var pi2 = Math.PI * 2;\r\n        if (rotations[0] < 0) rotations[0] = pi2 + rotations[0];\r\n        if (rotations[0] >= pi2) rotations[0] = rotations[0] - pi2;\r\n        if (rotations[1] < 0) rotations[1] = pi2 + rotations[1];\r\n        if (rotations[1] >= pi2) rotations[1] = rotations[1] - pi2;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('object-interaction', function (instance) {\r\n        instance.surface.interactions.object = {\r\n            onMouseDown: function (event, realCoords) {\r\n                var canvas = event.target;\r\n                var data = instance.surface.map[canvas.id];\r\n                if (event.which === 1) {\r\n                    var ray = data.camera.getRay(null, realCoords,\r\n                        [canvas.width, canvas.height]);\r\n\r\n                    var isHit = false, hitPoint = vec3.create();\r\n                    instance.scene.getObjects().forEach(function (node) {\r\n                        isHit = geo.testRayBBox(ray.start, ray.direction, node.data.mesh.bounding, node.data.model, hitPoint);\r\n                        if (isHit) {\r\n                            node.data.selected = true;\r\n                        } else delete node.data.selected;\r\n                    });\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n        };\r\n\r\n    }, ['surface-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('surface-interaction', function (instance) {\r\n        instance.surface.interactions = {};\r\n\r\n        instance.surface.setInteraction = function (surface, name) {\r\n            surface.dataset.interaction = name;\r\n        };\r\n\r\n        instance.surface.getInteractionCallbacks = function (surface) {\r\n            var interactionName = surface.dataset.interaction;\r\n            return instance.surface.interactions[interactionName];\r\n        };\r\n\r\n        instance.surface.onRender = function (canvas, surface) {\r\n            var keepRunning = true;\r\n            var callbacks = instance.surface.getInteractionCallbacks(canvas);\r\n            if (callbacks.onRender) keepRunning = callbacks.onRender(surface);\r\n            if (keepRunning) {\r\n                var common = instance.surface.interactions.common;\r\n                common.onRender(surface);\r\n            }\r\n        };\r\n\r\n        instance.events.on('surface.create', function (surface) {\r\n            surface.tabIndex = 1000;\r\n\r\n            surface.oncontextmenu = onContextMenu;\r\n\r\n            surface.onkeydown = onSurfaceEvent;\r\n            surface.onkeyup = onSurfaceEvent;\r\n\r\n            surface.onmousewheel = onSurfaceEvent;\r\n            surface.onmousemove = onSurfaceEvent;\r\n            surface.onmousedown = onSurfaceEvent;\r\n            surface.onmouseup = onSurfaceEvent;\r\n            surface.onclick = onSurfaceEvent;\r\n        });\r\n\r\n        function onSurfaceEvent (event) {\r\n            var callbacks = instance.surface.getInteractionCallbacks(event.target);\r\n            var keepRunning = runCallback(callbacks, event);\r\n            if (keepRunning === undefined) keepRunning = true;\r\n            if (keepRunning) {\r\n                var common = instance.surface.interactions.common;\r\n                runCallback(common, event);\r\n            }\r\n        }\r\n\r\n        instance.events.on('pane.split', function (oldPane, newPane) {\r\n            var initialValue = oldPane.dataset.interaction;\r\n            newPane.dataset.interaction = initialValue;\r\n        });\r\n    }, ['surface']);\r\n\r\n    function runCallback (callbacks, event) {\r\n        var realCoords = getLocalCoordinates(event);\r\n        switch (event.type) {\r\n            case 'keydown': if (callbacks.onKeyDown) return callbacks.onKeyDown(event); break;\r\n            case 'keyup': if (callbacks.onKeyUp) return callbacks.onKeyUp(event); break;\r\n\r\n            case 'mousewheel': if (callbacks.onMouseWheel) return callbacks.onMouseWheel(event, realCoords); break;\r\n            case 'mousemove': if (callbacks.onMouseMove) return callbacks.onMouseMove(event, realCoords); break;\r\n            case 'mousedown': if (callbacks.onMouseDown) return callbacks.onMouseDown(event, realCoords); break;\r\n            case 'mouseup': if (callbacks.onMouseUp) return callbacks.onMouseUp(event, realCoords); break;\r\n            case 'click': if (callbacks.onClick) return callbacks.onClick(event, realCoords); break;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getLocalCoordinates (event) {\r\n        return [event.layerX, event.layerY];\r\n    }\r\n\r\n    function onContextMenu (event) {\r\n        event.preventDefault();\r\n        return false;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var bytesPerFloat32Element = Float32Array.BYTES_PER_ELEMENT;\r\n\r\n    Modules.prototype.add('render-solid-cache', function (instance) {\r\n        Math.HalfEdgeMesh.prototype.addBuilder('render-solid', solidBuilder);\r\n    }, ['halfedge-cache']);\r\n\r\n    var solidBuilder = {\r\n        onCreate: function (halfEdgeMesh) {\r\n            var indices = [];\r\n            halfEdgeMesh.faces.forEach(function (face) {\r\n                var faceNormal = face.computeNormal();\r\n                face.getVerticesTriangulated().forEach(function (t) {\r\n                    indices.push(t[0]._halfEdge.ownIndex,\r\n                        t[1]._halfEdge.ownIndex, t[2]._halfEdge.ownIndex);\r\n                });\r\n            });\r\n\r\n            var mesh = GL.Mesh.load({\r\n                vertices: new Float32Array(halfEdgeMesh.vertices.length * 3),\r\n                normals: new Float32Array(halfEdgeMesh.vertices.length * 3),\r\n                triangles: new Uint16Array(indices)\r\n            });\r\n            this.onVerticesChange(halfEdgeMesh.vertices, mesh);\r\n            return mesh;\r\n        },\r\n        onVerticesChange: function (vertices, mesh) {\r\n            var buffer = mesh.vertexBuffers;\r\n            var vRange = [Number.MAX_VALUE, 0];\r\n            var nRange = [Number.MAX_VALUE, 0];\r\n\r\n            for (var i = 0; i < vertices.length; i++) {\r\n                var vertex = vertices[i];\r\n                var index = vertex._halfEdge.ownIndex;\r\n\r\n                buffer.vertices.data.set(vertex, index * 3);\r\n                vRange[0] = Math.min(vRange[0], index * 3);\r\n                vRange[1] = Math.max(vRange[1], index * 3 + 3);\r\n\r\n                var normal = vertex._halfEdge.computeNormal();\r\n                buffer.normals.data.set(normal, index * 3);\r\n                nRange[0] = Math.min(nRange[0], index * 3);\r\n                nRange[1] = Math.max(nRange[1], index * 3 + 3);\r\n            }\r\n            uploadRange(buffer.vertices, vRange);\r\n            uploadRange(buffer.normals, nRange);\r\n        },\r\n        onClean: function (mesh) {\r\n            if (mesh.vertexBuffers.vertices.dirty) {\r\n                mesh.vertexBuffers.vertices.upload();\r\n                delete mesh.vertexBuffers.vertices.dirty;\r\n            }\r\n            if (mesh.vertexBuffers.normals.dirty) {\r\n                mesh.vertexBuffers.normals.upload();\r\n                delete mesh.vertexBuffers.normals.dirty;\r\n            }\r\n        }\r\n    };\r\n\r\n    function uploadRange (buffer, range) {\r\n        buffer.uploadRange(range[0] * bytesPerFloat32Element,\r\n            (range[1] - range[0]) * bytesPerFloat32Element);\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var solidShader = null;\r\n    var wireframeShader = null;\r\n\r\n    Modules.prototype.add('render-solid', function (instance) {\r\n        instance.asset.shader.get('solid', function (s) {\r\n            solidShader = s;\r\n        });\r\n        instance.asset.shader.get('wireframe', function (s) {\r\n            wireframeShader = s;\r\n        });\r\n\r\n        var grid = GL.Mesh.grid({lines:17,size:16});\r\n        var colorsArray = [];\r\n        grid.vertexBuffers.vertices.forEach(function (vertex, bufferIndex) {\r\n            colorsArray.push(0.4, 0.4, 0.4, 1);\r\n        });\r\n        grid.createVertexBuffer('colors', 'a_color', 4, new Float32Array(colorsArray));\r\n        var axisX = GL.Mesh.load({\r\n            vertices: new Float32Array([-8, 0.001, 0, 8, 0.001, 0]),\r\n            colors: new Float32Array([1, 0, 0, 1, 1, 0, 0, 1])\r\n        });\r\n        var axisZ = GL.Mesh.load({\r\n            vertices: new Float32Array([0, 0.001, -8, 0, 0.001, 8]),\r\n            colors: new Float32Array([0, 1, 0, 1, 0, 1, 0, 1])\r\n        });\r\n\r\n        instance.surface.renders.solid = function (surface) {\r\n            var lightDirection = vec3.create();\r\n            surface.camera.getPosition(lightDirection);\r\n            vec3.add(lightDirection, lightDirection, [1, 2, 0]);\r\n            vec3.normalize(lightDirection, lightDirection);\r\n            uniforms.u_lightvector = lightDirection;\r\n\r\n            renderObject(surface, grid, wireframeShader, instance.graphics.gl.LINES);\r\n            renderObject(surface, axisX, wireframeShader, instance.graphics.gl.LINES);\r\n            renderObject(surface, axisZ, wireframeShader, instance.graphics.gl.LINES);\r\n            instance.scene.getObjects().forEach(function (node) {\r\n                var mesh = node.data.mesh.cache.get('render-solid');\r\n                renderObject(surface, mesh, solidShader, node.data.primitive, node.data.model);\r\n            });\r\n        };\r\n\r\n        instance.events.on('surface.create', function (surface) {\r\n            instance.surface.setRender(surface, 'solid');\r\n        });\r\n    }, ['surface-render', 'shader', 'render-solid-cache']);\r\n\r\n    var uniforms = {\r\n        u_color: [0.5, 0.5, 0.5, 1],\r\n        u_lightvector: null,\r\n        u_model: null,\r\n        u_mvp: mat4.create()\r\n    };\r\n\r\n    var temp = mat4.create();\r\n    function renderObject (surface, mesh, shader, primitive, model, indexBufferName) {\r\n        model = model || mat4.create();\r\n\r\n        surface.camera.getViewMatrix(temp);\r\n        mat4.multiply(temp, surface.camera.projection, temp);\r\n        mat4.multiply(uniforms.u_mvp, temp, model);\r\n\r\n        uniforms.u_model = model;\r\n\r\n        if (shader) {\r\n            shader.uniforms(uniforms);\r\n            if (mesh instanceof Math.HalfEdgeMesh) {\r\n                if (mesh) shader.draw(mesh, primitive, indexBufferName);\r\n            } else {\r\n                shader.draw(mesh, primitive, indexBufferName);\r\n            }\r\n        }\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('surface-render', function (instance) {\r\n        instance.surface.renders = {};\r\n\r\n        instance.surface.setRender = function (surface, name) {\r\n            surface.dataset.render = name;\r\n        };\r\n\r\n        instance.surface.getRender = function (surface) {\r\n            var renderName = surface.dataset.render;\r\n            return instance.surface.renders[renderName];\r\n        };\r\n\r\n        var panes = document.querySelectorAll('.pane');\r\n        for (var i = 0; i < panes.length; i++) {\r\n            if (panes[i].dataset.paneType == 'surface') {\r\n                var canvas = panes[i].querySelector('canvas');\r\n                canvas.dataset.render = 'solid';\r\n            }\r\n        }\r\n\r\n        instance.events.on('pane.split', function (oldPane, newPane) {\r\n            newPane.attrData('surface-render', oldPane.attrData('surface-render'));\r\n        });\r\n    }, ['surface']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-all', function (instance) {\r\n        instance.surface.interactions.edit.actions.all = {\r\n            init: function (context, event) {\r\n                if (!context.selection.isEmpty()) context.selection.clear();\r\n                else {\r\n                    var selection = context.selection;\r\n                    instance.scene.getObjects().forEach(function (object) {\r\n                        var result = selection.addAll(object.data);\r\n                        object.data.mesh.cache.onVerticesChange(result);\r\n                    });\r\n                }\r\n                context.action = null;\r\n            }\r\n        };\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-copy', function (instance) {\r\n        instance.surface.interactions.edit.actions.copy = {\r\n            init: function (context, event) {\r\n                if (!context.selection.isEmpty()) {\r\n                    for (var objKey in context.selection.objects) {\r\n                        var obj = context.selection.objects[objKey];\r\n                        var oldVertices = obj.vertices;\r\n                        var oldFaces = obj.faces;\r\n\r\n                        var data = instance.scene.getObjects()[0].data;\r\n                        var mesh = data.mesh;\r\n\r\n                        var newVertices = duplicateVertices(mesh, oldVertices);\r\n                        var newFaces = duplicateFaces(mesh, oldVertices,\r\n                                newVertices, oldFaces);\r\n\r\n                        context.selection.clear();\r\n                        for (var i = 0; i < newFaces.length; i++) {\r\n                            context.selection.addFace(data, newFaces[i]);\r\n                        }\r\n                        mesh.invalidateCache();\r\n                    }\r\n                } else console.warn('Cannot copy an empty selection!');\r\n                context.action = null;\r\n            }\r\n        };\r\n\r\n        function duplicateVertices (mesh, vertices) {\r\n            var newVertices = [];\r\n            for (var i = 0; i < vertices.length; i++) {\r\n                var newVertex = Object.assign([], vertices[i]);\r\n                delete newVertex._halfEdge;\r\n                delete newVertex._selected;\r\n                mesh.addVertices([newVertex]);\r\n                newVertices.push(newVertex);\r\n            }\r\n            return newVertices;\r\n        }\r\n\r\n        function duplicateFaces (mesh, oldVertices, newVertices, faces) {\r\n            var newFaces = [];\r\n            for (var i = 0; i < faces.length; i++) {\r\n                var faceVertices = faces[i].getVertices();\r\n                faceVertices = faceVertices.map(function (item) {\r\n                    return newVertices[oldVertices.indexOf(item)];\r\n                });\r\n                var newFace = mesh.addFace(faceVertices);\r\n                newFaces.push(newFace);\r\n            }\r\n            return newFaces;\r\n        }\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-delete', function (instance) {\r\n        instance.surface.interactions.edit.actions.delete = {\r\n            init: function (context, event) {\r\n                if (!context.selection.isEmpty()) {\r\n                    for (var objKey in context.selection.objects) {\r\n                        var obj = context.selection.objects[objKey];\r\n                        var mesh = instance.scene.getObjects()[0].data.mesh;\r\n\r\n                        var i, j, w;\r\n                        if (obj.faces && obj.faces.length > 0) {\r\n                            for (i = 0; i < obj.faces.length; i++) {\r\n                                var faceVertices = obj.faces[i].getVertices();\r\n                                removeFace(mesh, obj.faces[i]);\r\n                                for (j = 0; j < faceVertices.length; j++) {\r\n                                    if (faceVertices[j]._halfEdge.outEdges.length === 0) {\r\n                                        removeVertex(mesh, faceVertices[j]);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else if (obj.vertices && obj.vertices.length > 0) {\r\n                            for (i = 0; i < obj.vertices.length; i++) {\r\n                                var vertexFaces = obj.vertices[i]._halfEdge.getFaces();\r\n                                for (j = 0; j < vertexFaces.length; j++) {\r\n                                    removeFace(mesh, vertexFaces[j]);\r\n                                }\r\n                                removeVertex(mesh, obj.vertices[i]);\r\n                            }\r\n                        }\r\n\r\n                        context.selection.clear();\r\n                        mesh.invalidateCache();\r\n                    }\r\n                } else console.warn('Cannot delete an empty selection!');\r\n                context.action = null;\r\n            }\r\n        };\r\n\r\n        function removeVertex (mesh, vertex) {\r\n            var vIndex = vertex._halfEdge.ownIndex;\r\n            mesh.vertices.splice(vIndex, 1);\r\n            for (var i = vIndex; i < mesh.vertices.length; i++) {\r\n                mesh.vertices[i]._halfEdge.ownIndex--;\r\n            }\r\n        }\r\n\r\n        function removeFace (mesh, face) {\r\n            var current = face.halfEdge;\r\n            removeHalfEdge(mesh, current);\r\n            while (current.next !== face.halfEdge) {\r\n                current = current.next;\r\n                removeHalfEdge(mesh, current);\r\n            }\r\n            var fIndex = mesh.faces.indexOf(face);\r\n            mesh.faces.splice(fIndex, 1);\r\n        }\r\n\r\n        function removeHalfEdge (mesh, halfEdge) {\r\n            var heIndex = mesh.halfEdges.indexOf(halfEdge);\r\n            mesh.halfEdges.splice(heIndex, 1);\r\n            if (halfEdge.opposite) {\r\n                var oppositeVertex = halfEdge.opposite.vertex;\r\n                var outEdges = oppositeVertex._halfEdge.outEdges;\r\n                heIndex = outEdges.indexOf(halfEdge);\r\n                outEdges.splice(heIndex, 1);\r\n            }\r\n        }\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-extrude', function (instance) {\r\n        instance.surface.interactions.edit.actions.extrude = {\r\n            init: function (context, event) {\r\n                if (!context.selection.isEmpty()) {\r\n                    for (var objKey in context.selection.objects) {\r\n                        var obj = context.selection.objects[objKey];\r\n                        var selectedFaces = obj.faces;\r\n\r\n                        var mesh = instance.scene.getObjects()[0].data.mesh;\r\n\r\n                        var outerEdges = getOuterEdgeLoop(selectedFaces);\r\n                        var newOuterEdges = duplicateOuterRing(outerEdges,\r\n                                selectedFaces, mesh);\r\n\r\n                        context.selection.clear();\r\n                        for (var i = 0; i < selectedFaces.length; i++) {\r\n                            context.selection.addFace(instance.scene.getObjects()[0].data,\r\n                                selectedFaces[i]);\r\n                        }\r\n                        mesh.invalidateCache();\r\n                    }\r\n                } else console.warn('Cannot extrude an empty selection!');\r\n                context.action = null;\r\n            }\r\n        };\r\n\r\n        function getOuterEdgeLoop (faces) {\r\n            var outerEdges = [], startEdge = null;\r\n            for (var i = 0; i < faces.length; i++) {\r\n                var faceEdges = faces[i].getEdges();\r\n                for (var j = 0; j < faceEdges.length; j++) {\r\n                    var he = faceEdges[j];\r\n                    var oppositeFace = he.opposite.face;\r\n                    if (!oppositeFace._selected) {\r\n                        startEdge = he;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function filterNextOutEdge (he) {\r\n                if (!he.opposite) return null;\r\n                return he.face._selected && !he.opposite.face._selected;\r\n            }\r\n            outerEdges.push(startEdge);\r\n            var nextEdge = startEdge.vertex\r\n                ._halfEdge.outEdges.find(filterNextOutEdge);\r\n            while (nextEdge && nextEdge != startEdge) {\r\n                outerEdges.push(nextEdge);\r\n                nextEdge = nextEdge.vertex._halfEdge\r\n                    .outEdges.find(filterNextOutEdge);\r\n            }\r\n\r\n            return outerEdges;\r\n        }\r\n\r\n        function duplicateOuterRing (outerEdges, faces, mesh) {\r\n            var newVertices = [], oldVertices = [];\r\n            for (var i = 0; i < outerEdges.length; i++) {\r\n                var newVertex = Object.assign([], outerEdges[i].vertex);\r\n                newVertex._halfEdge = Object.assign({}, outerEdges[i].vertex._halfEdge);\r\n                delete newVertex._selected;\r\n\r\n                var newOutEdges = [];\r\n                var oldOutEdges = outerEdges[i].vertex._halfEdge.outEdges;\r\n                for (var j = 0; j < oldOutEdges.length; j++) {\r\n                    var outEdge = oldOutEdges[j];\r\n                    if (outEdge.face._selected) {\r\n                        oldOutEdges.splice(j, 1);\r\n                        newOutEdges.push(outEdge);\r\n                        j -= 1;\r\n                    }\r\n                }\r\n                newVertex._halfEdge.outEdges = newOutEdges;\r\n                oldVertices.push(outerEdges[i].vertex);\r\n                newVertices.push(newVertex);\r\n            }\r\n            mesh.addVertices(newVertices);\r\n            for (i = 0; i < faces.length; i++) {\r\n                var faceEdges = faces[i].getEdges();\r\n                for (var w = 0; w < faceEdges.length; w++) {\r\n                    var he = faceEdges[w];\r\n                    if (!he.opposite) console.debug(he);\r\n                    else {\r\n                        var vertexIndex = oldVertices.indexOf(he.vertex);\n                        if (vertexIndex >= 0)\r\n                            he.vertex = newVertices[vertexIndex];\r\n                    }\r\n                }\r\n            }\r\n            for (i = 0; i < newVertices.length; i++) {\r\n                var nextIndex = i + 1 >= newVertices.length ? 0 : i + 1;\r\n                mesh.addFace([oldVertices[i], oldVertices[nextIndex],\r\n                        newVertices[nextIndex], newVertices[i]]);\r\n            }\r\n        }\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-face', function (instance) {\r\n        instance.surface.interactions.edit.actions.face = {\r\n            init: function (context, event) {\r\n                if (!context.selection.isEmpty()) {\r\n                    for (var objKey in context.selection.objects) {\r\n                        var obj = context.selection.objects[objKey];\r\n                        var mesh = instance.scene.getObjects()[0].data.mesh;\r\n\r\n                        if (obj.vertices && obj.vertices.length > 0) {\r\n                            mesh.addFace(obj.vertices);\r\n                        }\r\n\r\n                        context.selection.clear();\r\n                        mesh.invalidateCache();\r\n                    }\r\n                } else console.warn('Cannot create a face with an empty selection!');\r\n                context.action = null;\r\n            }\r\n        };\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-move', function (instance) {\r\n        var initialCoords = vec2.create();\r\n        var selectionNormal = null;\r\n        var axisOrigin = null;\r\n        var isY = false;\r\n\r\n        instance.surface.interactions.edit.actions.move = {\r\n            axis: null,\r\n            init: function (context, event) {\r\n                vec2.copy(initialCoords, context.lastCoords);\r\n                selectionNormal = context.selection.getNormal();\r\n                for (var name in context.selection.objects) {\r\n                    var selectedObj = context.selection.objects[name];\r\n                    for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                        var vertex = selectedObj.vertices[i];\r\n                        vertex.originalPosition = vertex.slice();\r\n                    }\r\n                }\r\n            },\r\n            onMouseMove: function (context, event) {\r\n                if (!context.selection.isEmpty()) {\r\n                    var canvas = event.target;\r\n                    var data = instance.surface.map[canvas.id];\r\n\r\n                    var currentRay = data.camera.getRay(null, context.lastCoords,\r\n                        [canvas.width, canvas.height]);\r\n                    var initialRay = data.camera.getRay(null, initialCoords,\r\n                        [canvas.width, canvas.height]);\r\n                    var cameraDirection = data.camera.getDirection();\r\n\r\n                    var hitPointInitial = [0, 0, 0], hitPointCurrent = [0, 0, 0];\r\n\r\n                    var selectionCenter = context.selection.getCenter();\r\n                    Math.geo.rayPlaneCollision(initialRay.start, initialRay.direction,\r\n                        selectionCenter, cameraDirection, hitPointInitial);\r\n\r\n                    var delta = vec3.create();\r\n\r\n                    if (this.axis) {\r\n                        var currentRayEnd = vec3.scaleAndAdd(vec3.create(), currentRay.start, currentRay.direction, 100);\r\n                        var axisStart = vec3.scale(vec3.create(), this.axis, -50);\r\n                        var axisEnd = vec3.scale(vec3.create(), this.axis, 50);\r\n                        Math.geo.closestPointsBetweenSegments(axisStart, axisEnd, currentRay.start, currentRayEnd, hitPointCurrent);\r\n\r\n                        if (!axisOrigin) {\r\n                            axisOrigin = vec3.copy(vec3.create(), hitPointCurrent);\r\n                        } else vec3.sub(delta, hitPointCurrent, axisOrigin);\r\n                    } else {\r\n                        Math.geo.rayPlaneCollision(currentRay.start, currentRay.direction,\r\n                            selectionCenter, cameraDirection, hitPointCurrent);\r\n                        vec3.sub(delta, hitPointCurrent, hitPointInitial);\r\n                    }\r\n\r\n                    if (context.isControlDown)\r\n                        for (var j = 0; j < 3; j++)\r\n                            delta[j] = Math.round(delta[j]);\r\n\r\n                    for (var name in context.selection.objects) {\r\n                        var hitPoint = [0, 0, 0];\r\n                        var selectedObj = context.selection.objects[name];\r\n                        var sceneObj = instance.scene.getObjectByName(name);\r\n\r\n                        for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                            var vertex = selectedObj.vertices[i];\r\n                            if (vertex.originalPosition)\r\n                                vec3.add(vertex, vertex.originalPosition, delta);\r\n                        }\r\n                        sceneObj.mesh.onVerticesChange(selectedObj.vertices);\r\n                    }\r\n                }\r\n            },\r\n            onMouseDown: function (context, event) {\r\n                if (event.which === 1 || event.which === 3) {\r\n                    var restore = event.which === 3;\r\n                    for (var name in context.selection.objects) {\r\n                        var selectedObj = context.selection.objects[name];\r\n                        var sceneObj = instance.scene.getObjectByName(name);\r\n                        for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                            var vertex = selectedObj.vertices[i];\r\n                            if (vertex.originalPosition) {\r\n                                if (restore)\r\n                                    vec3.copy(vertex, vertex.originalPosition);\r\n                                delete vertex.originalPosition;\r\n                            }\r\n                        }\r\n                        sceneObj.mesh.bounds.updateDimensions();\r\n                        sceneObj.mesh.onVerticesChange(sceneObj.mesh.vertices);\r\n                    }\r\n                }\r\n                isY = false;\r\n                this.axis = null;\r\n                context.action = null;\r\n            },\r\n            onKeyDown: function (context, event) {\r\n                if (event.key === 'x') this.axis = vec3.set(vec3.create(), 1, 0, 0);\r\n                else if (event.key === 'y') {\r\n                    if (isY) {\r\n                        this.axis = selectionNormal;\r\n                        isY = false;\r\n                    } else {\r\n                        this.axis = vec3.set(vec3.create(), 0, 1, 0);\r\n                        isY = true;\r\n                    }\r\n                } else if (event.key === 'z') this.axis = vec3.set(vec3.create(), 0, 0, 1);\r\n                axisOrigin = null;\r\n            }\r\n        };\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-rotate', function (instance) {\r\n        var selectionCenter2d = vec2.create();\r\n        var selectionCenter = vec3.create();\r\n        var initialVector = vec2.create();\r\n\r\n        var aux = vec2.create();\r\n\r\n        instance.surface.interactions.edit.actions.rotate = {\r\n            axis: vec3.create(),\r\n            init: function (context, event) {\r\n                if (context.selection.isEmpty()) {\r\n                    context.action = null;\r\n                    return;\r\n                }\r\n                var canvas = event.target;\r\n                var data = instance.surface.map[canvas.id];\r\n\r\n                var center = context.selection.getCenter();\r\n                vec3.copy(selectionCenter, center);\r\n                vec3.transformMat4(center, center, data.camera.getViewMatrix());\r\n                vec3.transformMat4(center, center, data.camera.projection);\r\n                center[0] = ((center[0] + 1) / 2) * canvas.width;\r\n                center[1] = ((center[1] + 1) / 2) * canvas.height;\r\n                vec2.copy(selectionCenter2d, center);\r\n\r\n                data.camera.getDirection(this.axis);\r\n\r\n                vec2.sub(initialVector, selectionCenter2d, context.lastCoords);\r\n                vec2.normalize(initialVector, initialVector);\r\n                for (var name in context.selection.objects) {\r\n                    var selectedObj = context.selection.objects[name];\r\n                    for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                        var vertex = selectedObj.vertices[i];\r\n                        vertex.originalPosition = vertex.slice();\r\n                    }\r\n                }\r\n            },\r\n            onMouseMove: function (context, event) {\r\n                if (!context.selection.isEmpty()) {\r\n                    var fromSelectionToCursor = vec2.sub(vec2.create(), selectionCenter2d, context.lastCoords);\r\n                    vec2.normalize(fromSelectionToCursor, fromSelectionToCursor);\r\n                    var determinant = fromSelectionToCursor[0] * initialVector[1] -\r\n                        initialVector[0] * fromSelectionToCursor[1];\r\n                    var delta = Math.atan2(determinant, vec2.dot(fromSelectionToCursor, initialVector));\r\n                    var negatedCenter = vec3.negate(vec3.create(), selectionCenter);\r\n\r\n                    var tranform = mat4.create();\r\n                    mat4.translate(tranform, tranform, selectionCenter);\r\n                    mat4.rotate(tranform, tranform, delta, this.axis);\r\n                    mat4.translate(tranform, tranform, negatedCenter);\r\n\r\n                    for (var name in context.selection.objects) {\r\n                        var selectedObj = context.selection.objects[name];\r\n                        var sceneObj = instance.scene.getObjectByName(name);\r\n                        for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                            var vertex = selectedObj.vertices[i];\r\n                            vec3.transformMat4(vertex, vertex.originalPosition, tranform);\r\n                        }\r\n                        sceneObj.mesh.onVerticesChange(selectedObj.vertices);\r\n                    }\r\n                }\r\n            },\r\n            onMouseDown: function (context, event) {\r\n                if (event.which === 1 || event.which === 3) {\r\n                    var restore = event.which === 3;\r\n                    for (var name in context.selection.objects) {\r\n                        var selectedObj = context.selection.objects[name];\r\n                        var sceneObj = instance.scene.getObjectByName(name);\r\n                        for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                            var vertex = selectedObj.vertices[i];\r\n                            if (vertex.originalPosition) {\r\n                                if (restore)\r\n                                    vec3.copy(vertex, vertex.originalPosition);\r\n                                delete vertex.originalPosition;\r\n                            }\r\n                        }\r\n                        sceneObj.mesh.bounds.updateDimensions();\r\n                        sceneObj.mesh.onVerticesChange(sceneObj.mesh.vertices);\r\n                    }\r\n                }\r\n                context.action = null;\r\n            },\r\n            onKeyDown: function (context, event) {\r\n                if (event.key === 'x') this.axis = vec3.set(vec3.create(), 1, 0, 0);\r\n                else if (event.key === 'y') this.axis = vec3.set(vec3.create(), 0, 1, 0);\r\n                else if (event.key === 'z') this.axis = vec3.set(vec3.create(), 0, 0, 1);\r\n            }\r\n        };\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-scale', function (instance) {\r\n        var selectionCenter2d = vec2.create();\r\n        var selectionCenter = vec3.create();\r\n        var initialDistance = 0;\r\n\r\n        var aux = vec2.create();\r\n\r\n        instance.surface.interactions.edit.actions.scale = {\r\n            axis: null,\r\n            init: function (context, event) {\r\n                if (context.selection.isEmpty()) {\r\n                    context.action = null;\r\n                    return;\r\n                }\r\n                var canvas = event.target;\r\n                var data = instance.surface.map[canvas.id];\r\n\r\n                var center = context.selection.getCenter();\r\n                vec3.copy(selectionCenter, center);\r\n                vec3.transformMat4(center, center, data.camera.getViewMatrix());\r\n                vec3.transformMat4(center, center, data.camera.projection);\r\n                center[0] = ((center[0] + 1) / 2) * canvas.width;\r\n                center[1] = ((center[1] + 1) / 2) * canvas.height;\r\n                vec2.copy(selectionCenter2d, center);\r\n\r\n                vec2.sub(aux, context.lastCoords, selectionCenter2d);\r\n                initialDistance = vec2.length(aux);\r\n                for (var name in context.selection.objects) {\r\n                    var selectedObj = context.selection.objects[name];\r\n                    for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                        var vertex = selectedObj.vertices[i];\r\n                        vertex.originalPosition = vertex.slice();\r\n                    }\r\n                }\r\n            },\r\n            onMouseMove: function (context, event) {\r\n                if (!context.selection.isEmpty()) {\r\n                    vec2.sub(aux, context.lastCoords, selectionCenter2d);\r\n                    var delta = (vec2.length(aux) / initialDistance);\r\n                    var vectorDelta = vec3.scale(vec3.create(), this.axis || [1, 1, 1], delta);\r\n                    var negatedCenter = vec3.negate(vec3.create(), selectionCenter);\r\n\r\n                    var tranform = mat4.create();\r\n                    mat4.translate(tranform, tranform, selectionCenter);\r\n                    mat4.scale(tranform, tranform, vectorDelta);\r\n                    mat4.translate(tranform, tranform, negatedCenter);\r\n\r\n                    for (var name in context.selection.objects) {\r\n                        var selectedObj = context.selection.objects[name];\r\n                        var sceneObj = instance.scene.getObjectByName(name);\r\n                        for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                            var vertex = selectedObj.vertices[i];\r\n                            vec3.transformMat4(vertex, vertex.originalPosition, tranform);\r\n                        }\r\n                        sceneObj.mesh.onVerticesChange(selectedObj.vertices);\r\n                    }\r\n                }\r\n            },\r\n            onMouseDown: function (context, event) {\r\n                if (event.which === 1 || event.which === 3) {\r\n                    var restore = event.which === 3;\r\n                    for (var name in context.selection.objects) {\r\n                        var selectedObj = context.selection.objects[name];\r\n                        var sceneObj = instance.scene.getObjectByName(name);\r\n                        for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                            var vertex = selectedObj.vertices[i];\r\n                            if (vertex.originalPosition) {\r\n                                if (restore)\r\n                                    vec3.copy(vertex, vertex.originalPosition);\r\n                                delete vertex.originalPosition;\r\n                            }\r\n                        }\r\n                        sceneObj.mesh.bounds.updateDimensions();\r\n                        sceneObj.mesh.onVerticesChange(sceneObj.mesh.vertices);\r\n                    }\r\n                }\r\n                this.axis = null;\r\n                context.action = null;\r\n            },\r\n            onKeyDown: function (context, event) {\r\n                if (event.key === 'x') this.axis = vec3.set(vec3.create(), 1, 0, 0);\r\n                else if (event.key === 'y') this.axis = vec3.set(vec3.create(), 0, 1, 0);\r\n                else if (event.key === 'z') this.axis = vec3.set(vec3.create(), 0, 0, 1);\r\n            }\r\n        };\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-subdivide', function (instance) {\r\n        instance.surface.interactions.edit.actions.subdivide = {\r\n            init: function (context, event) {\r\n                if (!context.selection.isEmpty()) {\r\n                    for (var objKey in context.selection.objects) {\r\n                        var obj = context.selection.objects[objKey];\r\n                        var mesh = instance.scene.getObjects()[0].data.mesh;\r\n\r\n                        if (obj.faces && obj.faces.length > 0) {\r\n                            for (var i = 0; i < obj.faces.length; i++) {\r\n                                var vs = subdivideFace(obj.faces[i], mesh);\r\n                                if (vs !== null) {\r\n                                    removeFace(mesh, obj.faces[i]);\r\n                                    if (vs.length === 6) {\r\n                                        mesh.addFace([vs[0], vs[1], vs[5]]);\r\n                                        mesh.addFace([vs[1], vs[2], vs[3]]);\r\n                                        mesh.addFace([vs[5], vs[3], vs[4]]);\r\n                                        mesh.addFace([vs[5], vs[1], vs[3]]);\r\n                                    } else if (vs.length === 9) {\r\n                                        mesh.addFace([vs[0], vs[1], vs[8], vs[7]]);\r\n                                        mesh.addFace([vs[1], vs[2], vs[3], vs[8]]);\r\n                                        mesh.addFace([vs[8], vs[3], vs[4], vs[5]]);\r\n                                        mesh.addFace([vs[7], vs[8], vs[5], vs[6]]);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        context.selection.clear();\r\n                        mesh.invalidateCache();\r\n                    }\r\n                } else console.warn('Cannot subdivide an empty selection!');\r\n                context.action = null;\r\n            }\r\n        };\r\n\r\n        function subdivideFace (face, mesh) {\r\n            var faceEdges = face.getEdges();\r\n            var faceVertices = face.getVertices();\r\n            var i, loopIndex = 0, medianPoint = [0, 0, 0];\r\n            var next, edgeIndex, oVert, currentVertIndex;\r\n            if (faceVertices.length === 3) {\r\n                for (i = 0; i < faceVertices.length; i++) {\r\n                    next = i + 1;\r\n                    next = next === faceVertices.length ? 0 : next;\r\n\r\n                    medianPoint = [0, 0, 0];\r\n                    vec3.add(medianPoint, faceVertices[i], faceVertices[next]);\r\n                    vec3.scale(medianPoint, medianPoint, 0.5);\r\n                    mesh.addVertices([medianPoint]);\r\n\r\n                    edgeIndex = loopIndex + 1;\r\n                    edgeIndex = edgeIndex === faceEdges.length ? 0 : edgeIndex;\r\n                    if (faceEdges[edgeIndex].opposite) {\r\n                        oVert = faceEdges[edgeIndex].opposite.face.getVertices();\r\n                        currentVertIndex = oVert.indexOf(faceVertices[i]);\r\n                        oVert.splice(currentVertIndex, 0, medianPoint);\r\n                        removeFace(mesh, faceEdges[edgeIndex].opposite.face);\r\n                        mesh.addFace(oVert);\r\n                    }\r\n\r\n                    faceVertices.splice(i + 1, 0, medianPoint);\r\n                    loopIndex += 1;\r\n                    i += 1;\r\n                }\r\n                return faceVertices;\r\n            } else if (faceVertices.length === 4) {\r\n                for (i = 0; i < faceVertices.length; i++) {\r\n                    next = i + 1;\r\n                    next = next === faceVertices.length ? 0 : next;\r\n\r\n                    medianPoint = [0, 0, 0];\r\n                    vec3.add(medianPoint, faceVertices[i], faceVertices[next]);\r\n                    vec3.scale(medianPoint, medianPoint, 0.5);\r\n                    mesh.addVertices([medianPoint]);\n\n                    edgeIndex = loopIndex + 1;\r\n                    edgeIndex = edgeIndex === faceEdges.length ? 0 : edgeIndex;\r\n                    if (faceEdges[edgeIndex].opposite) {\r\n                        oVert = faceEdges[edgeIndex].opposite.face.getVertices();\r\n                        currentVertIndex = oVert.indexOf(faceVertices[i]);\r\n                        oVert.splice(currentVertIndex, 0, medianPoint);\r\n                        removeFace(mesh, faceEdges[edgeIndex].opposite.face);\r\n                        mesh.addFace(oVert);\r\n                    }\r\n\r\n                    faceVertices.splice(i + 1, 0, medianPoint);\r\n                    loopIndex += 1;\r\n                    i += 1;\r\n                }\r\n                medianPoint = [0, 0, 0];\r\n                vec3.add(medianPoint, medianPoint, faceVertices[0]);\r\n                vec3.add(medianPoint, medianPoint, faceVertices[2]);\r\n                vec3.add(medianPoint, medianPoint, faceVertices[4]);\r\n                vec3.add(medianPoint, medianPoint, faceVertices[6]);\r\n                vec3.scale(medianPoint, medianPoint, 0.25);\r\n                mesh.addVertices([medianPoint]);\r\n                faceVertices.push(medianPoint);\r\n                return faceVertices;\r\n            } else console.debug('Can only subdivide 3 or 4 sides polygons!');\r\n            return null;\r\n        }\r\n\r\n        function removeFace (mesh, face) {\r\n            var current = face.halfEdge;\r\n            removeHalfEdge(mesh, current);\r\n            while (current.next !== face.halfEdge) {\r\n                current = current.next;\r\n                removeHalfEdge(mesh, current);\r\n            }\r\n            var fIndex = mesh.faces.indexOf(face);\r\n            mesh.faces.splice(fIndex, 1);\r\n        }\r\n\r\n        function removeHalfEdge (mesh, halfEdge) {\r\n            var heIndex = mesh.halfEdges.indexOf(halfEdge);\r\n            mesh.halfEdges.splice(heIndex, 1);\r\n            if (halfEdge.opposite) {\r\n                var oppositeVertex = halfEdge.opposite.vertex;\r\n                var outEdges = oppositeVertex._halfEdge.outEdges;\r\n                heIndex = outEdges.indexOf(halfEdge);\r\n                outEdges.splice(heIndex, 1);\r\n            }\r\n        }\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var bytesPerFloat32Element = Float32Array.BYTES_PER_ELEMENT;\r\n\r\n    Modules.prototype.add('edit-interaction-render-cache', function (instance) {\r\n        Math.HalfEdgeMesh.prototype.addBuilder('edit-interaction-render-wireframe', wireframeBuilder);\r\n        Math.HalfEdgeMesh.prototype.addBuilder('edit-interaction-render-vertices', verticesBuilder);\r\n    }, ['edit-interaction', 'shader']);\r\n\r\n    var wireframeBuilder = {\r\n        onCreate: function (halfEdgeMesh) {\r\n            var indices = [];\r\n            halfEdgeMesh.faces.forEach(function (face) {\r\n                face.getVertices().forEach(function (vertex, i, array) {\r\n                    var index = i >= array.length - 1 ? 0 : i + 1;\r\n                    indices.push(vertex._halfEdge.ownIndex);\r\n                    indices.push(array[index]._halfEdge.ownIndex);\r\n                });\r\n            });\r\n\r\n            var mesh = GL.Mesh.load({\r\n                vertices: new Float32Array(halfEdgeMesh.vertices.length * 3),\r\n                colors: new Float32Array(halfEdgeMesh.vertices.length * 4),\r\n                lines: new Uint16Array(indices)\r\n            });\r\n            this.onVerticesChange(halfEdgeMesh.vertices, mesh);\r\n            return mesh;\r\n        },\r\n        onVerticesChange: function (vertices, mesh) {\r\n            var buffer = mesh.vertexBuffers;\r\n            var vRange = [Number.MAX_VALUE, 0];\r\n            var cRange = [Number.MAX_VALUE, 0];\r\n            for (var i = 0; i < vertices.length; i++) {\r\n                var vertex = vertices[i];\r\n                var index = vertex._halfEdge.ownIndex;\r\n                buffer.vertices.data.set(vertex, index * 3);\r\n                vRange[0] = Math.min(vRange[0], index * 3);\r\n                vRange[1] = Math.max(vRange[1], index * 3 + 3);\r\n                var color = vertex._selected ? [1, 0.4, 0.1, 1] : [0, 0, 0, 1];\r\n                buffer.colors.data.set(color, index * 4);\r\n                cRange[0] = Math.min(cRange[0], index * 4);\r\n                cRange[1] = Math.max(cRange[1], index * 4 + 4);\r\n            }\r\n            uploadRange(buffer.vertices, vRange);\r\n            uploadRange(buffer.colors, cRange);\r\n        }\r\n    };\r\n\r\n    var verticesBuilder = {\r\n        onCreate: function (halfEdgeMesh) {\r\n            var mesh = GL.Mesh.load({\r\n                vertices: new Float32Array(halfEdgeMesh.vertices.length * 3),\r\n                colors: new Float32Array(halfEdgeMesh.vertices.length * 4)\r\n            });\r\n            this.onVerticesChange(halfEdgeMesh.vertices, mesh);\r\n            return mesh;\r\n        },\r\n        onVerticesChange: function (vertices, mesh) {\r\n            var buffer = mesh.vertexBuffers;\r\n            var vRange = [Number.MAX_VALUE, 0];\r\n            var cRange = [Number.MAX_VALUE, 0];\r\n            for (var i = 0; i < vertices.length; i++) {\r\n                var vertex = vertices[i];\r\n                var index = vertex._halfEdge.ownIndex;\r\n\r\n                buffer.vertices.data.set(vertex, index * 3);\r\n                vRange[0] = Math.min(vRange[0], index * 3);\r\n                vRange[1] = Math.max(vRange[1], index * 3 + 3);\r\n\r\n                var color = vertex._selected ? [1, 0.4, 0.1, 1] : [0, 0, 0, 1];\r\n                buffer.colors.data.set(color, index * 4);\r\n                cRange[0] = Math.min(cRange[0], index * 4);\r\n                cRange[1] = Math.max(cRange[1], index * 4 + 4);\r\n            }\r\n            uploadRange(buffer.vertices, vRange);\r\n            uploadRange(buffer.colors, cRange);\r\n        }\r\n    };\r\n\r\n    function uploadRange (buffer, range) {\r\n        buffer.uploadRange(range[0] * bytesPerFloat32Element,\r\n            (range[1] - range[0]) * bytesPerFloat32Element);\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var shader = null;\r\n\r\n    Modules.prototype.add('edit-interaction-render', function (instance) {\r\n        instance.asset.shader.get('wireframe', function (s) {\r\n            shader = s;\r\n        });\r\n\r\n        var vertices = [], colors = [], count = 0;\r\n        for (var rads = 0; rads < (Math.PI * 2); rads += 0.1) {\r\n            vertices[count * 3 + 0] = Math.sin(rads) * 5;\r\n            vertices[count * 3 + 1] = Math.cos(rads) * 5;\r\n            vertices[count * 3 + 2] = 0;\r\n            colors[count * 4 + 0] = 1;\r\n            colors[count * 4 + 1] = 1;\r\n            colors[count * 4 + 2] = 1;\r\n            colors[count * 4 + 3] = 1;\r\n            count++;\r\n        }\r\n        var circle = GL.Mesh.load({\r\n            vertices: new Float32Array(vertices),\r\n            colors: new Float32Array(colors)\r\n        });\r\n        var bounds = GL.Mesh.load({\r\n            vertices: new Float32Array([\r\n                0.5, 0.5, 0.5, -0.5, 0.5, 0.5, 0.5, -0.5, 0.5, -0.5, -0.5, 0.5,\r\n                0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, -0.5, -0.5, -0.5, -0.5, -0.5,\r\n            ]),\r\n            colors: new Float32Array([\r\n                0.6, 0.6, 0.6, 1, 0.6, 0.6, 0.6, 1, 0.6, 0.6, 0.6, 1, 0.6, 0.6, 0.6, 1,\r\n                0.6, 0.6, 0.6, 1, 0.6, 0.6, 0.6, 1, 0.6, 0.6, 0.6, 1, 0.6, 0.6, 0.6, 1\r\n            ]),\r\n            wireframe: new Uint16Array([\r\n                0, 1, 1, 3, 3, 2, 2, 0,\r\n                4, 5, 5, 7, 7, 6, 6, 4,\r\n                0, 4, 1, 5, 2, 6, 3, 7\r\n            ])\r\n        });\r\n\r\n        var uniforms = {\r\n            u_mvp: mat4.create()\r\n        };\r\n\r\n        instance.surface.interactions.edit.drawBounds = null;\r\n        instance.surface.interactions.edit.onRender = function (surface) {\r\n            var selection = this.selection;\r\n            instance.scene.getObjects().forEach(function (node) {\r\n                var obj = node.data;\r\n\r\n                var wireframe = obj.mesh.cache.get('edit-interaction-render-wireframe');\r\n                var vertices = obj.mesh.cache.get('edit-interaction-render-vertices');\r\n                var drawBounds = instance.surface.interactions.edit.drawBounds;\r\n\r\n                renderObject(surface, wireframe, shader, instance.graphics.gl.LINES);\r\n                renderObject(surface, vertices, shader, instance.graphics.gl.POINTS);\r\n                if (drawBounds !== null)\r\n                    renderBounds(surface, shader, bounds, obj.mesh.bounds, drawBounds);\r\n\r\n                if (!selection.isEmpty()) {\r\n                    var c = selection.getCenter();\r\n                    vec3.transformMat4(c, c, surface.camera.getViewMatrix());\r\n                    vec3.transformMat4(c, c, surface.camera.projection);\r\n                    c[0] = ((c[0] + 1) / 2) * surface.camera.width;\r\n                    c[1] = ((c[1] + 1) / 2) * surface.camera.height;\r\n\r\n                    mat4.identity(uniforms.u_mvp);\r\n                    mat4.translate(uniforms.u_mvp, uniforms.u_mvp, [c[0], c[1], 0]);\r\n                    mat4.multiply(uniforms.u_mvp, surface.camera.ortho, uniforms.u_mvp);\r\n\r\n                    shader.uniforms(uniforms);\r\n                    shader.draw(circle, instance.graphics.gl.LINE_LOOP);\r\n                }\r\n            });\r\n        };\r\n\r\n        var temp = mat4.create();\r\n        function renderObject (surface, mesh, shader, primitive, model, indexBufferName) {\r\n            model = model || mat4.create();\r\n\r\n            surface.camera.getViewMatrix(temp);\r\n            mat4.multiply(temp, surface.camera.projection, temp);\r\n            mat4.multiply(uniforms.u_mvp, temp, model);\r\n\r\n            uniforms.u_model = model;\r\n\r\n            if (shader) {\r\n                shader.uniforms(uniforms);\r\n                if (mesh instanceof Math.HalfEdgeMesh) {\r\n                    if (mesh) shader.draw(mesh, primitive, indexBufferName);\r\n                } else {\r\n                    shader.draw(mesh, primitive, indexBufferName);\r\n                }\r\n            }\r\n        }\r\n\r\n        var boundsModel = mat4.create();\r\n        function renderBounds (surface, shader, bounds, octree, recursive) {\r\n            updateBoundsModel(boundsModel, octree);\r\n            renderObject(surface, bounds, shader, instance.graphics.gl.LINES, boundsModel, 'wireframe');\r\n            if (recursive && octree.children)\r\n                for (var i = 0; i < octree.children.length; i++)\r\n                    renderBounds(surface, shader, bounds, octree.children[i], instance.graphics.gl.LINES);\r\n        }\r\n\r\n        function updateBoundsModel (model, octree) {\r\n            mat4.identity(model);\r\n            var scale = [0, 0, 0], position = [0, 0, 0];\r\n            vec3.lerp(position, octree.aabb.min, octree.aabb.max, 0.5);\r\n            mat4.translate(model, model, position);\r\n            vec3.sub(scale, octree.aabb.max, octree.aabb.min);\r\n            mat4.scale(model, model, scale);\r\n        }\r\n    }, ['edit-interaction', 'shader', 'edit-interaction-render-cache']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-selection', function (instance) {\r\n        instance.surface.interactions.edit.selection = {\r\n            objects: {},\r\n            addAll: function (object) {\r\n                var result = [];\r\n                var selection = this;\r\n                object.mesh.vertices.forEach(function (vertex) {\r\n                    toggleVertex(selection, object, vertex);\r\n                    result.push(vertex);\r\n                });\r\n                return result;\r\n            },\r\n            add: function (ray, object, camera) {\r\n                var position = camera.getPosition();\r\n                var selection = this;\r\n\r\n                var result = {\r\n                    vertex: null,\r\n                    face: null\r\n                };\r\n\r\n                var vertexSelectionMargin = camera.distance / 200;\r\n                var vertices = object.mesh.bounds.getCollidingItems(ray);\r\n                var rayVertices = vertices.filter(function (vertex) {\r\n                    return Math.geo.rayPointDistance(ray.start, ray.direction, vertex) <= vertexSelectionMargin;\r\n                });\r\n                var vertex = Math.geo.findClosestPoint(position, rayVertices);\r\n                if (vertex) result.vertex = vertex;\r\n\r\n                var uniqueFaces = getFacesFromVertices(vertices);\r\n                uniqueFaces = uniqueFaces.filter(function (face) {\r\n                    return Math.geo.rayFaceCollision(ray.start, ray.direction,\r\n                        face.getVertices());\r\n                });\r\n                var closestFace = Math.geo.findClosestFace(position, uniqueFaces);\r\n                if (closestFace) result.face = closestFace;\r\n\r\n                var vertexDistance = result.vertex ? Math.geo.pointPointDistance(position, result.vertex) : Number.MAX_VALUE;\r\n                var faceDistance = result.face ? Math.geo.pointPointDistance(position, result.face.computeCenter()) : Number.MAX_VALUE;\r\n\r\n                if (faceDistance > vertexDistance) {\r\n                    result.face = null;\r\n                    toggleVertex(selection, object, result.vertex);\r\n                } else {\r\n                    result.vertex = null;\r\n                    toggleFace(selection, object, result.face);\r\n                }\r\n\r\n                return result;\r\n            },\r\n            addFace: function (object, face) {\r\n                toggleFace(this, object, face);\r\n            },\r\n            getCenter: function () {\r\n                //TODO: take into account multiple objects\r\n                var name = Object.keys(this.objects)[0];\r\n                return Math.geo.computePointsCenter(this.objects[name].vertices);\r\n            },\r\n            getNormal: function () {\r\n                var normal = vec3.create();\r\n                for (var name in this.objects) {\r\n                    var obj = this.objects[name];\r\n                    for (var i = 0; i < obj.vertices.length; i++) {\r\n                        var vertex = obj.vertices[i];\r\n                        var n = vertex._halfEdge.computeNormal();\r\n                        vec3.add(normal, normal, n);\r\n                    }\r\n                }\r\n                vec3.normalize(normal, normal);\r\n                return normal;\r\n            },\r\n            clear: function () {\r\n                for (var name in this.objects) {\r\n                    var selectedObj = this.objects[name];\r\n                    var sceneObj = instance.scene.getObjectByName(name);\r\n                    for (var i = 0; i < selectedObj.faces.length; i++) {\r\n                        var face = selectedObj.faces[i];\r\n                        if (face._selected) delete face._selected;\r\n                    }\r\n                    for (i = 0; i < selectedObj.vertices.length; i++) {\r\n                        var vertex = selectedObj.vertices[i];\r\n                        if (vertex._selected) delete vertex._selected;\r\n                    }\r\n                    sceneObj.mesh.onVerticesChange(selectedObj.vertices);\r\n                }\r\n                this.objects = {};\r\n            },\r\n            isEmpty: function () {\r\n                return !Object.keys(this.objects).length;\r\n            }\r\n        };\r\n\r\n    }, ['edit-interaction']);\r\n\r\n    function toggleVertex (selection, object, vertex) {\r\n        if (vertex) {\r\n            if (toggle(selection, object, vertex, 'vertices')) {\r\n                vertex._selected = true;\r\n                vertex._halfEdge.getFaces().forEach(function (face) {\r\n                    var selectedVertices = selection.objects[object.name].vertices;\r\n                    var faceVertices = face.getVertices();\r\n                    var allSelected = true;\r\n                    faceVertices.forEach(function (vertex) {\r\n                        allSelected &= selectedVertices.includes(vertex);\r\n                    });\r\n                    if (allSelected && !face._selected)\r\n                        toggleFace(selection, object, face);\r\n                });\r\n            } else delete vertex._selected;\r\n        }\r\n    }\r\n\r\n    function toggleEdge (selection, object, edge) {\r\n        if (edge) {\r\n            if (toggle(selection, object, edge, 'edges')) {\r\n                edge._selected = true;\r\n            } else delete edge._selected;\r\n        }\r\n    }\r\n\r\n    function toggleFace (selection, object, face) {\r\n        if (face) {\r\n            if (toggle(selection, object, face, 'faces')) {\r\n                face._selected = true;\r\n                face.getVertices().forEach(function (vertex) {\r\n                    if (!vertex._selected)\r\n                        toggleVertex(selection, object, vertex);\r\n                });\r\n            } else delete face._selected;\r\n        }\r\n    }\r\n\r\n    function toggle (selection, object, item, arrayName) {\r\n        initObjectIfNeeded(selection, object);\r\n        var array = selection.objects[object.name][arrayName];\r\n        var index = array.indexOf(item);\r\n        if (index >= 0) {\r\n            array.splice(index, 1);\r\n            delObjectIfNeeded(selection, object);\r\n            return false;\r\n        } else {\r\n            array.push(item);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function initObjectIfNeeded (selection, object) {\r\n        var name = object.name;\r\n        if (!selection.objects[name]) {\r\n            selection.objects[name] = {\r\n                faces: [],\r\n                edges: [],\r\n                vertices: []\r\n            };\r\n        }\r\n    }\r\n\r\n    function delObjectIfNeeded (selection, object) {\r\n        var name = object.name;\r\n        if (selection.objects[name]) {\r\n            var objSelection = selection.objects[name];\r\n            if (!objSelection.vertices.length &&\r\n                !objSelection.vertices.length &&\r\n                !objSelection.vertices.length)\r\n                delete selection.objects[name];\r\n        }\r\n    }\r\n\r\n    function getEdgesFromVertices (vertices) {\r\n        var edges = [];\r\n        vertices.forEach(function (vertex) {\r\n            vertex._halfEdge.outEdges.forEach(function (edge) {\r\n                if (edges.indexOf(edge) === -1)\r\n                    edges.push(edge);\r\n            });\r\n        });\r\n        return edges;\r\n    }\r\n\r\n    function getFacesFromVertices (vertices) {\r\n        var faces = [];\r\n        vertices.forEach(function (vertex) {\r\n            vertex._halfEdge.getFaces().forEach(function (face) {\r\n                if (faces.indexOf(face) === -1)\r\n                    faces.push(face);\r\n            });\r\n        });\r\n        return faces;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction', function (instance) {\r\n        instance.surface.interactions.edit = {\r\n            actions: {},\r\n            action: null,\r\n            isMouseDown: false,\r\n            isShiftDown: false,\r\n            isControlDown: false,\r\n            lastCoords: [0, 0],\r\n            onMouseMove: function (event, realCoords) {\r\n                vec2.copy(this.lastCoords, realCoords);\r\n                this.runAction('onMouseMove', event, realCoords);\r\n            },\r\n            onMouseUp: function (event, realCoords) {\r\n                if (event.which === 1) this.isMouseDown = false;\r\n                this.runAction('onMouseUp', event, realCoords);\r\n            },\r\n            onMouseDown: function (event, realCoords) {\r\n                if (!this.action) {\r\n                    var canvas = event.target;\r\n                    var data = instance.surface.map[canvas.id];\r\n\r\n                    if (event.which === 1) {\r\n                        this.isMouseDown = true;\r\n\r\n                        var ray = data.camera.getRay(null, realCoords,\r\n                            [canvas.width, canvas.height]);\r\n\r\n                        var selection = this.selection;\r\n                        var shiftDown = this.isShiftDown;\r\n                        instance.scene.getObjects().forEach(function (node) {\r\n                            if (!shiftDown) selection.clear();\r\n                            var result = selection.add(ray, node.data, data.camera);\r\n                            if (result.vertex)\r\n                                node.data.mesh.cache.onVerticesChange([result.vertex]);\r\n                            if (result.face)\r\n                                node.data.mesh.cache.onVerticesChange(result.face.getVertices());\r\n                        });\r\n                        return false;\r\n                    }\r\n                }\r\n                this.runAction('onMouseDown', event, realCoords);\r\n                return true;\r\n            },\r\n            onKeyDown: function (event, realCoords) {\r\n                this.isShiftDown = event.shiftKey;\r\n                this.isShiftDown = event.ctrlKey;\r\n                if (!this.action) {\r\n                    if (event.key === 'a') this.setAction('all', event);\r\n                    else if (event.key === 'g') this.setAction('move', event);\r\n                    else if (event.key === 's') this.setAction('scale', event);\r\n                    else if (event.key === 'r') this.setAction('rotate', event);\r\n                    else if (event.key === 'f') this.setAction('face', event);\r\n                    else if (event.key === 'n') this.setAction('subdivide', event);\r\n                    else if (event.keyCode === 46) this.setAction('delete', event);\r\n                    else if (event.key === 'c') {\r\n                        this.setAction('copy', event);\r\n                        this.setAction('move', event);\r\n                    } else if (event.key === 'e') {\r\n                        this.setAction('extrude', event);\r\n                        this.setAction('move', event);\r\n                    } else if (event.key === 'b') {\r\n                        if (this.drawBounds === null) this.drawBounds = false;\r\n                        else if (this.drawBounds === false) this.drawBounds = true;\r\n                        else if (this.drawBounds === true) this.drawBounds = null;\r\n                    }\r\n                } else {\r\n                    if (event.keyCode === 13) this.action = null;\r\n                    else this.runAction('onKeyDown', event, realCoords);\r\n                }\r\n            },\r\n            onKeyUp: function (event, realCoords) {\r\n                this.isShiftDown = event.shiftKey;\r\n                this.isShiftDown = event.ctrlKey;\r\n                this.runAction('onKeyUp', event, realCoords);\r\n            },\r\n            setAction: function (name, event) {\r\n                if (name && this.actions[name]) {\r\n                    this.action = name;\r\n                    this.runAction('init', event);\r\n                }\r\n            },\r\n            runAction : function (callbackName, event) {\r\n                if (this.action && this.actions[this.action]) {\r\n                    var action = this.actions[this.action];\r\n                    var callback = action[callbackName];\r\n                    if (callback) callback.call(action, this, event);\r\n                }\r\n            }\r\n        };\r\n\r\n        instance.events.on('surface.create', function (surface) {\r\n            instance.surface.setInteraction(surface, 'edit');\r\n        });\r\n\r\n    }, ['surface-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Graphics = function (instance) {\r\n        this.gl = GL.create({\r\n            height: screen.height,\r\n            width: screen.width\r\n        });\r\n        this.gl.animate();\r\n        this.gl.ondraw = function () {\r\n            var renderTargets = document.querySelectorAll('canvas');\r\n            for (var i = 0; i < renderTargets.length; i++)\r\n                drawRenderTarget(instance, renderTargets[i]);\r\n        };\r\n        this.gl.clearColor(0.349, 0.349, 0.349, 1);\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n\r\n        console.info(this.gl.getParameter(this.gl.VERSION));\r\n        console.info(this.gl.getParameter(this.gl.SHADING_LANGUAGE_VERSION));\r\n    };\r\n\r\n    Modules.prototype.add('graphics', function (instance) {\r\n        instance.graphics = new Graphics(instance);\r\n    });\r\n\r\n    function drawRenderTarget (instance, canvas) {\r\n        var width  = canvas.clientWidth, height = canvas.clientHeight;\r\n        var data = instance.surface.map[canvas.id];\r\n        var gl = instance.graphics.gl;\r\n\r\n        var c = instance.graphics.gl.canvas;\r\n        gl.viewport(0, c.height - height, width, height);\r\n\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        var mainRender = instance.surface.getRender(canvas);\r\n        var surfaceRender = instance.surface.onRender;\r\n        if (mainRender) mainRender(data);\r\n        if (surfaceRender) surfaceRender(canvas, data);\r\n\r\n        var context = canvas.getContext('2d');\r\n        if (context) context.drawImage(c, 0, 0, width, height, 0, 0, width, height);\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('main-menu', function (instance) {\r\n        var container = document.querySelector(instance.options.container.selector);\r\n\r\n        var cobwebFile = document.querySelector('#cobweb-file');\r\n        cobwebFile.addEventListener('change', handleMeshFileSelected);\r\n\r\n        var mainMenu = document.createElement('div');\r\n        mainMenu.className = 'main-menu';\r\n\r\n        mainMenu.appendChild(buildButton('Toggle Help', function () {\r\n            var helpContainer = document.querySelector('#surface-help');\r\n            if (helpContainer.style.display) {\r\n                helpContainer.style.display = '';\r\n            } else helpContainer.style.display = 'none';\r\n        }));\r\n\r\n        mainMenu.appendChild(buildButton('Download Object', function () {\r\n            if (instance.scene.children.length > 0) {\r\n                var objString = meshToOBJString(instance.scene.children[0].data.mesh);\r\n                download('export.obj', objString);\r\n            }\r\n        }));\r\n\r\n        mainMenu.appendChild(buildButton('Upload Object', function () {\r\n            if (instance.scene.children.length > 0) {\r\n                var sure = confirm('The current mesh will be removed. Are you sure?');\r\n                if (!sure) return;\r\n            }\r\n            instance.scene.children = [];\r\n            if (window.FileReader) {\r\n                cobwebFile.click();\r\n            } else {\r\n                alert('window.FileReader is undefined, File API not present!');\r\n            }\r\n        }));\r\n\r\n        container.insertBefore(mainMenu, container.firstChild);\r\n\r\n        function handleMeshFileSelected (event) {\r\n            var files = event.target.files;\r\n            if (files.length > 0) {\r\n                var reader = new FileReader();\r\n                reader.onload = function(e) {\r\n                    var mesh = instance.asset.mesh.build(e.target.result);\r\n                    instance.scene.addObject({mesh: mesh});\r\n                };\r\n                reader.readAsText(files[0]);\r\n            }\r\n        }\r\n    });\r\n\r\n    function download(filename, text) {\r\n        var element = document.createElement('a');\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' +\r\n            encodeURIComponent(text));\r\n        element.setAttribute('download', filename);\r\n\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n\r\n        element.click();\r\n\r\n        document.body.removeChild(element);\r\n    }\r\n\r\n    function meshToOBJString (mesh) {\r\n        var result = '';\r\n        console.debug(mesh);\r\n        for (var i = 0; i < mesh.vertices.length; i++) {\r\n            var v = mesh.vertices[i];\r\n            result += 'v ';\r\n            result += v[0] + ' ';\r\n            result += v[1] + ' ';\r\n            result += v[2] + '\\r\\n';\r\n        }\r\n        result += 's off\\r\\n';\r\n        for (i = 0; i < mesh.faces.length; i++) {\r\n            var f = mesh.faces[i];\r\n            var nextHE = f.halfEdge;\r\n            result += 'f ' + (nextHE.vertex._halfEdge.ownIndex + 1);\r\n            while (nextHE.next != f.halfEdge) {\r\n                nextHE = nextHE.next;\r\n                result += ' ' + (nextHE.vertex._halfEdge.ownIndex + 1);\r\n            }\r\n            result += '\\r\\n';\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function buildButton (name, clickCallback) {\r\n        var button = document.createElement('button');\r\n        button.style.marginLeft = '5px';\r\n        button.innerHTML = name;\r\n        button.onclick = clickCallback;\r\n        return button;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var objectCount = 0;\r\n\r\n    Modules.prototype.add('scene', function (instance) {\r\n        instance.scene = TreeNode.extend();\r\n\r\n        instance.scene.addObject = function (info) {\r\n            if (!info.primitive) info.primitive = instance.graphics.gl.TRIANGLES;\r\n            if (!info.model) info.model = mat4.create();\r\n            if (!info.type) info.type = 'object';\r\n            if (!info.name) info.name = 'object_' + (objectCount++);\r\n            this.add(info);\r\n        };\r\n\r\n        instance.scene.getObjectByName = function (name) {\r\n            return getObjectByName(this, name);\r\n        };\r\n\r\n        instance.scene.getObjects = function () {\r\n            return this.dfs(function (node) {\r\n                return node.data.type === 'object';\r\n            });\r\n        };\r\n\r\n        instance.asset.mesh.get('cube', function (mesh) {\r\n            instance.scene.addObject({mesh: mesh});\r\n        });\r\n    }, ['graphics']);\r\n\r\n    function getObjectByName (rootNode, name) {\r\n        for (var i = 0; i < rootNode.children.length; i++) {\r\n            var child = rootNode.children[i];\r\n            if (child.data.name === name) {\r\n                return child.data;\r\n            } else {\r\n                var node = getObjectByName(child, name);\r\n                if (node) return node.data;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n})());\r\n"]}