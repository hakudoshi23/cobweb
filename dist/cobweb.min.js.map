{"version":3,"sources":["ajax.js","array.js","html.js","obj.js","tree.js","events.js","logger.js","cobweb.js","modules.js","asset/mesh.js","asset/shader.js","pane/pane-header.js","pane/pane-types.js","pane/panes.js","math/camera.js","math/octree.js","math/plane.js","math/ray.js","pane/surface/surface.js","math/halfEdge/halfedge-cache.js","math/halfEdge/halfedge.js","math/geometry/geometry.js","pane/surface/interaction/common-interaction.js","pane/surface/interaction/object-interaction.js","pane/surface/interaction/surface-interaction.js","pane/surface/render/render-solid-cache.js","pane/surface/render/render-solid.js","pane/surface/render/surface-render.js","pane/surface/interaction/edit/edit-interaction-action-all.js","pane/surface/interaction/edit/edit-interaction-action-delete.js","pane/surface/interaction/edit/edit-interaction-action-extrude.js","pane/surface/interaction/edit/edit-interaction-action-face.js","pane/surface/interaction/edit/edit-interaction-action-move.js","pane/surface/interaction/edit/edit-interaction-action-rotate.js","pane/surface/interaction/edit/edit-interaction-action-scale.js","pane/surface/interaction/edit/edit-interaction-render-cache.js","pane/surface/interaction/edit/edit-interaction-render.js","pane/surface/interaction/edit/edit-interaction-select.js","pane/surface/interaction/edit/edit-interaction.js","graphic.js","main-menu.js","scene.js"],"names":["ajax","options","Object","assign","defaultAjaxOptions","xhttp","XMLHttpRequest","onreadystatechange","this","readyState","status","success","response","error","method","params","objToParams","data","urlWithParams","url","open","async","send","get","Ajax","getJSON","JSON","parse","post","obj","key","encodeURIComponent","slice","window","safeExtend","prototype","property","value","Array","a","concat","i","length","j","splice","callback","s4","Math","floor","random","toString","substring","HTMLElement","oldClassNames","newClassNames","arguments","className","trim","replace","split","unique","join","queryClassNames","currentClassNames","index","name","indexOf","removeClassNames","removeEach","forEach","attr","__data_cache","WeakMap","elAttrs","undefined","set","setAttribute","getAttribute","removeAttribute","Element","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","matches","document","ownerDocument","querySelectorAll","item","query","parentElement","current","clientHeight","style","height","clientWidth","width","guid","overlap","querySelector","newObj","hasOwnProperty","clone","target","varArgs","TypeError","to","nextSource","nextKey","call","defaults","TreeNode","parent","children","isRoot","add","child","constructor","push","remove","dfs","check","out","bfs","extend","_TreeNode","create","EventHandler","isDebug","listeners","trigger","console","debug","apply","on","off","array","reset","own","keys","Logger","instance","handlers","addHandler","level","ALL","args","DEBUG","INFO","info","WARNING","warn","ERROR","log","warning","tmp","levelHandlers","handler","removeHandler","NONE","defaultOptions","container","selector","Cobweb","Error","addClass","logger","events","modules","Modules","onLoadedAll","names","topologicalSort","sortedNames","module","dependencies","depName","nextName","candidates","getInitialCandidates","dependant","dependantName","allDependenciesMet","loadedUntilNow","runCallback","callbacks","all","init","ex","dependencyModule","moduleName","buildHalfEdge","objSource","mesh","vertices","line","startsWith","vertex","map","number","parseFloat","HalfEdgeMesh","addVertices","faceVertices","parseInt","addFace","asset","shader","firstSource","Shader","onCreateCallback","pane","header","createHeader","appendChild","div","createElement","oldPane","newPane","oldType","attrData","setType","types","typeCallbacks","onPaneType","paneHeader","onCreateHeader","dataset","paneType","onPaneCreate","onPaneSplit","origin","onPaneResize","mainPanes","internal","Pane","separator","size","root","Camera","center","rotation","distance","projection","mat4","ortho","getViewMatrix","view","eye","getPosition","lookAt","getUpDirection","vec3","rotateX","rotateY","getDirection","direction","sub","normalize","getRay","ray","canvasCoords","canvasSize","Ray","start","auxMat","multiply","invert","transformMat4","up","vRotation","PI","computeLocalAxis","left","forward","cross","canContain","aabb","min","max","findContainingParent","result","maxItems","maxDepth","padding","OctreeNode","depth","items","getAllItems","addItems","addItem","splitIfNeeded","removeItem","removed","mergeIfNeeded","updateDimensions","redistributeItems","subItems","getCollidingNodes","nodes","collidingPoint","geo","rayAABBCollision","getCollidingItems","node","parentAabb","half","scale","ref","mul","containingParent","Octree","_addItem","onVerticesMove","newItems","allItems","updateBounds","fill","Number","MAX_VALUE","copy","Plane","point","normal","fromPoints","b","onSurfacePaneType","canvas","id","surfaceIndex","addEventListener","event","focus","surfaceGUI","float","innerHTML","surface","camera","updateCanvasSize","onCreateSurfaceHeader","label","context","getContext","headerHeight","gui","guiWidth","setTransform","translate","perspective","DEG2RAD","surfaces","parentNode","superConstructor","cachedHalfEdgeMesh","heMesh","cache","meshes","e","builder","builders","rebuild","onCreate","onClean","onVerticesChange","_addVertices","invalidateCache","_addFace","addBuilder","buildEdge","end","face","edge","HalfEdgeFace","opposite","findOppositeEdge","_halfEdge","outEdges","next","he","opposites","filter","VertexGetFaces","VertexComputeNormal","getFaces","computeRawNormal","computeNormal","v1","v2","v3","tmp1","tmp2","bounds","halfEdges","faces","isArray","ownIndex","he1","he2","last","prev","clear","halfEdge","getEdges","output","getVertices","getVerticesTriangulated","triangulated","triplet","triangleNormal","computeCenter","computePointsCenter","getBarycentricCoordinates","p1","p2","p3","v0","getVectorFromPoints","d00","dot","d01","d11","d20","d21","denom","getNormal","rayFaceCollision","triangles","triangulateFace","triangle","rayTriangleCollision","rayPlaneCollision","bary","planePoint","planeNormal","numer","abs","t","minB","maxB","whichPlane","inside","quadrant","Float32Array","maxT","candidatePlane","closestPointsBetweenSegments","a0","a1","b0","b1","p_a","p_b","sc","tc","u","subtract","v","w","c","d","D","dP","rayPointDistance","aux","len","pointPointDistance","points","findClosestPointIndex","position","closestIndex","newDistance","findClosestPoint","findClosestFace","centers","combine","originalRotation","delta","upNormalMouseDown","clampRotations","getCoordsDelta","initial","rotations","pi2","mouseDownCoords","interactions","common","onMouseWheel","realCoords","wheelDelta","detail","onMouseMove","moving","onMouseDown","which","equals","onMouseUp","object","isHit","hitPoint","scene","getObjects","testRayBBox","bounding","model","selected","getLocalCoordinates","type","onKeyDown","onKeyUp","onClick","layerX","layerY","onContextMenu","preventDefault","onSurfaceEvent","getInteractionCallbacks","keepRunning","setInteraction","interaction","interactionName","onRender","tabIndex","oncontextmenu","onkeydown","onkeyup","onmousewheel","onmousemove","onmousedown","onmouseup","onclick","initialValue","uploadRange","buffer","range","bytesPerFloat32Element","BYTES_PER_ELEMENT","solidBuilder","halfEdgeMesh","indices","GL","Mesh","load","normals","Uint16Array","vertexBuffers","vRange","nRange","dirty","upload","renderObject","primitive","indexBufferName","temp","uniforms","u_mvp","u_model","draw","solidShader","wireframeShader","grid","lines","colorsArray","bufferIndex","createVertexBuffer","axisX","colors","axisZ","renders","solid","lightDirection","u_lightvector","graphics","gl","LINES","setRender","u_color","render","getRender","renderName","panes","edit","actions","selection","isEmpty","addAll","action","removeVertex","removeFace","vIndex","removeHalfEdge","fIndex","heIndex","oppositeVertex","delete","objKey","objects","getOuterEdgeLoop","filterNextOutEdge","_selected","outerEdges","startEdge","faceEdges","oppositeFace","nextEdge","find","duplicateOuterRing","newVertices","oldVertices","newVertex","newOutEdges","oldOutEdges","outEdge","vertexIndex","nextIndex","extrude","selectedFaces","getCenter","vertexCounterClockwise","ac","bc","sortedVertices","sort","initialCoords","vec2","selectionNormal","axisOrigin","isY","move","axis","lastCoords","selectedObj","originalPosition","currentRay","initialRay","cameraDirection","hitPointInitial","hitPointCurrent","selectionCenter","currentRayEnd","scaleAndAdd","axisStart","axisEnd","isControlDown","round","sceneObj","getObjectByName","restore","selectionCenter2d","initialVector","rotate","fromSelectionToCursor","determinant","atan2","negatedCenter","negate","tranform","initialDistance","vectorDelta","wireframeBuilder","verticesBuilder","cRange","color","renderBounds","octree","recursive","updateBoundsModel","boundsModel","identity","lerp","count","rads","sin","cos","circle","wireframe","drawBounds","POINTS","LINE_LOOP","toggleVertex","toggle","selectedVertices","allSelected","includes","toggleFace","arrayName","initObjectIfNeeded","delObjectIfNeeded","edges","objSelection","getFacesFromVertices","vertexSelectionMargin","rayVertices","uniqueFaces","closestFace","vertexDistance","n","isMouseDown","isShiftDown","delta2d","setAction","runAction","shiftDown","shiftKey","ctrlKey","keyCode","callbackName","drawRenderTarget","viewport","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","mainRender","surfaceRender","drawImage","Graphics","screen","animate","ondraw","renderTargets","clearColor","enable","DEPTH_TEST","getParameter","VERSION","SHADING_LANGUAGE_VERSION","mainMenu","insertBefore","firstChild","rootNode","objectCount","addObject","TRIANGLES"],"mappings":"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","file":"cobweb.min.js","sourcesContent":["((function(){\r\n    'use strict';\r\n\r\n    var defaultAjaxOptions = {\r\n        method: 'GET',\r\n        url: '',\r\n        data: {},\r\n        async: true,\r\n        success: null,\r\n        error: null\r\n    };\r\n\r\n    function ajax (options) {\r\n        options = Object.assign({}, defaultAjaxOptions, options);\r\n        var xhttp = new XMLHttpRequest();\r\n        xhttp.onreadystatechange = function() {\r\n            if (this.readyState == 4) {\r\n                if (this.status == 200) {\r\n                    if (options.success) options.success(this.response);\r\n                } else {\r\n                    if (options.error) error.success(this.response);\r\n                }\r\n            }\r\n        };\r\n        if (options.method === 'GET') {\r\n            var params = objToParams(options.data);\r\n            var urlWithParams = options.url + (params ? '?' + params : '');\r\n            xhttp.open(options.method, urlWithParams, options.async);\r\n            xhttp.send();\r\n        } else if (options.method === 'POST') {\r\n            xhttp.open(options.method, options.url, options.async);\r\n            xhttp.send(options.data);\r\n        }\r\n        return xhttp;\r\n    }\r\n\r\n    function get (url, data, success) {\r\n        if (!success) {\r\n            success = data;\r\n            data = null;\r\n        }\r\n        return Ajax.ajax({\r\n            url: url,\r\n            data: data,\r\n            success: success,\r\n            method: 'GET'\r\n        });\r\n    }\r\n\r\n    function getJSON (url, data, success) {\r\n        if (!success) {\r\n            success = data;\r\n            data = null;\r\n        }\r\n        return Ajax.ajax({\r\n            url: url,\r\n            data: data,\r\n            success: function (response) {\r\n                success(JSON.parse(response));\r\n            },\r\n            method: 'GET'\r\n        });\r\n    }\r\n\r\n    function post (url, data, success) {\r\n        if (!success) {\r\n            success = data;\r\n            data = null;\r\n        }\r\n        return Ajax.ajax({\r\n            url: url,\r\n            data: data,\r\n            success: success,\r\n            method: 'POST'\r\n        });\r\n    }\r\n\r\n    window.Ajax = {\r\n        ajax: ajax,\r\n        get: get,\r\n        getJSON: getJSON,\r\n        post: post\r\n    };\r\n\r\n    function objToParams (obj) {\r\n        var params = '';\r\n        for (var key in obj) {\r\n            var nextParam = key + '=' + encodeURIComponent(obj[key]);\r\n            params += '&' + nextParam;\r\n        }\r\n        return params.slice(1);\r\n    }\r\n})());\r\n","((function(){\r\n    'use strict';\r\n\r\n    safeExtend(Array.prototype, 'unique', function() {\r\n        var a = this.concat();\r\n        for(var i = 0; i < a.length; ++i)\r\n            for(var j = i + 1; j < a.length; ++j)\r\n                if(a[i] === a[j]) a.splice(j--, 1);\r\n        return a;\r\n    });\r\n\r\n    safeExtend(Array.prototype, 'forEach', function(callback) {\r\n        for (var i = 0; i < this.length; i++)\r\n            callback(this[i], i, this);\r\n    });\r\n\r\n    function safeExtend(prototype, property, value) {\r\n        if(!prototype[property]) prototype[property] = value;\r\n    }\r\n})());\r\n","((function(){\r\n    'use strict';\r\n\r\n    safeExtend(HTMLElement.prototype, 'addClass', function () {\r\n        var oldClassNames, newClassNames;\r\n        for(var i in arguments){\r\n            oldClassNames = !this.className ? [] : this.className.trim().replace(/\\s+/g, ' ').split(' ');\r\n            newClassNames = !arguments[i] ? [] : arguments[i].trim().replace(/\\s+/g, ' ').split(' ');\r\n            this.className = oldClassNames.concat(newClassNames).unique().join(' ');\r\n        }\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'hasClass', function () {\r\n        var queryClassNames, currentClassNames = !this.className ? [] : this.className.trim().replace(/\\s+/g, ' ').split(' ');\r\n        for(var i in arguments){\r\n            queryClassNames = !arguments[i] ? [] : arguments[i].trim().replace(/\\s+/g, ' ').split(' ');\r\n            for (var index = 0; index < queryClassNames.length; index++) {\r\n                var name = queryClassNames[index];\r\n                if (currentClassNames.indexOf(name) == -1)\r\n                    return false;\r\n            }\r\n        }\r\n        return true;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'removeClass', function () {\r\n        var index = 0, currentClassNames, removeClassNames;\r\n        var removeEach = function (name) {\r\n            index = currentClassNames.indexOf(name);\r\n            if (index != -1)\r\n                currentClassNames.splice(index, 1);\r\n        };\r\n        for(var i in arguments){\r\n            currentClassNames = !this.className ? [] : this.className.trim().replace(/\\s+/g, ' ').split(' ');\r\n            removeClassNames = !arguments[i] ? [] : arguments[i].trim().replace(/\\s+/g, ' ').split(' ');\r\n            removeClassNames.forEach(removeEach);\r\n            this.className = currentClassNames.unique().join(' ');\r\n        }\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'data', function (attr, value) {\r\n        if (!window.__data_cache) window.__data_cache = new WeakMap();\r\n        var elAttrs = window.__data_cache.get(this) || {};\r\n        if (value !== undefined) {\r\n            elAttrs[attr] = value;\r\n            window.__data_cache.set(this, elAttrs);\r\n        } else {\r\n            if (attr) return elAttrs && elAttrs[attr];\r\n            else return elAttrs;\r\n        }\r\n        return this;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'setData', function (data) {\r\n        if (!window.__data_cache) window.__data_cache = new WeakMap();\r\n        window.__data_cache.set(this, data);\r\n        return this;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'attr', function (name, value) {\r\n        if (value !== undefined)\r\n            this.setAttribute(name, value);\r\n        else if (value === null)\r\n            this.removeAttribute(name);\r\n        else\r\n            return this.getAttribute(name);\r\n        return this;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'attrData', function (name, value) {\r\n        return this.attr('data-' + name, value);\r\n    });\r\n\r\n    safeExtend(Element.prototype, 'matches',\r\n        Element.prototype.matchesSelector ||\r\n        Element.prototype.mozMatchesSelector ||\r\n        Element.prototype.msMatchesSelector ||\r\n        Element.prototype.oMatchesSelector ||\r\n        Element.prototype.webkitMatchesSelector ||\r\n        function(s) {\r\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\r\n                i = matches.length;\r\n            while (--i >= 0 && matches.item(i) !== this) {}\r\n            return i > -1;\r\n        }\r\n    );\r\n\r\n    safeExtend(HTMLElement.prototype, 'parent', function (query) {\r\n        if (!query) return this.parentElement;\r\n        var current = this.parentElement;\r\n        while (!current.matches(query))\r\n            current = current.parentElement;\r\n        return current;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'height', function () {\r\n        if (arguments.length == 1) {\r\n            var value = arguments[0];\r\n            if (typeof value === 'number')\r\n                this.style.height = value + 'px';\r\n            else\r\n                this.style.height = value;\r\n        } else\r\n            return this.clientHeight;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'width', function () {\r\n        if (arguments.length == 1) {\r\n            var value = arguments[0];\r\n            if (typeof value === 'number')\r\n                this.style.width = value + 'px';\r\n            else\r\n                this.style.width = value;\r\n        } else\r\n            return this.clientWidth;\r\n    });\r\n\r\n    safeExtend(window, 'guid', function () {\r\n        return 'GUID-' + s4() + '-' + s4() + '-' + s4();\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'guid', function () {\r\n        var guid = null, overlap = null;\r\n        do {\r\n            guid = window.guid();\r\n            overlap = document.querySelector('#' + guid);\r\n        } while(overlap);\r\n        this.attr('id', guid);\r\n        return guid;\r\n    });\r\n\r\n    function safeExtend(prototype, property, value) {\r\n        if(!prototype[property]) prototype[property] = value;\r\n    }\r\n\r\n    function s4() {\r\n        return Math.floor((1 + Math.random()) * 0x10000)\r\n            .toString(16).substring(1);\r\n    }\r\n})());\r\n","((function(){\r\n    'use strict';\r\n\r\n    safeExtend(Object, 'clone', function (obj) {\r\n        var newObj = {};\r\n        for (var property in obj)\r\n            if (obj.hasOwnProperty(property)) {\r\n                var value = obj[property];\r\n                if (typeof value === 'object')\r\n                    newObj[property] = Object.clone(obj[property]);\r\n                else\r\n                    newObj[property] = obj[property];\r\n            }\r\n        return newObj;\r\n    });\r\n\r\n    safeExtend(Object, 'assign', function(target, varArgs) {\r\n        if (target === null)\r\n            throw new TypeError('Cannot convert undefined or null to object');\r\n        var to = Object(target);\r\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n        for (var index = 1; index < arguments.length; index++) {\r\n            var nextSource = arguments[index];\r\n            if (nextSource !== null) {\r\n                for (var nextKey in nextSource) {\r\n                    if (hasOwnProperty.call(nextSource, nextKey)) {\r\n                        to[nextKey] = nextSource[nextKey];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return to;\r\n    });\r\n\r\n    safeExtend(Object, 'extend', function(options, defaults) {\r\n        return Object.assign({}, defaults, options);\r\n    });\r\n\r\n    function safeExtend(prototype, property, value) {\r\n        if(!prototype[property]) prototype[property] = value;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var TreeNode = function (parent, data) {\r\n        this.parent = parent || null;\r\n        this.data = data || {};\r\n        this.children = [];\r\n    };\r\n\r\n    window.TreeNode = TreeNode;\r\n\r\n    TreeNode.prototype.isRoot = function () {\r\n        return !this.parent;\r\n    };\r\n\r\n    TreeNode.prototype.add = function (data) {\r\n        var child = new this.constructor(this, data);\r\n        this.children.push(child);\r\n        return child;\r\n    };\r\n\r\n    TreeNode.prototype.remove = function (index) {\r\n        this.children.slice(index, 1);\r\n        return this;\r\n    };\r\n\r\n    TreeNode.prototype.dfs = function (check) {\r\n        var out = [];\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            if (!check || (check && check(this.children[i])))\r\n                out.push(this.children[i]);\r\n            out.concat(this.children[i].dfs(check));\r\n        }\r\n        return out;\r\n    };\r\n\r\n    TreeNode.prototype.bfs = function (check) {\r\n        var out = [], i;\r\n        for (i = 0; i < this.children.length; i++)\r\n            if (!check || (check && check(this.children[i])))\r\n                out.push(this.children[i]);\r\n        for (i = 0; i < this.children.length; i++)\r\n            out.concat(this.children[i].bfs(check));\r\n        return out;\r\n    };\r\n\r\n    TreeNode.extend = function () {\r\n        var _TreeNode = function (parent, data) {\r\n            TreeNode.call(this, parent, data);\r\n        };\r\n        _TreeNode.prototype = Object.create(TreeNode.prototype);\r\n        _TreeNode.prototype.constructor = _TreeNode;\r\n        return new _TreeNode();\r\n    };\r\n})());\r\n","((function() {\r\n    'use strict';\r\n\r\n    var EventHandler = function (isDebug) {\r\n        this.isDebug = !!isDebug;\r\n        this.listeners = {};\r\n    };\r\n\r\n    EventHandler.prototype.trigger = function() {\r\n        var name = arguments[0];\r\n        var listeners = this.listeners[name] || [];\r\n        Array.prototype.splice.call(arguments, 0, 1);\r\n        if (this.isDebug) console.debug(name, arguments);\r\n        for (var i = 0; i < listeners.length; i++)\r\n            listeners[i].apply(null, arguments);\r\n    };\r\n\r\n    EventHandler.prototype.on = function(name, callback) {\r\n        if (!this.listeners[name]) this.listeners[name] = [];\r\n        this.listeners[name].push(callback);\r\n    };\r\n\r\n    EventHandler.prototype.off = function(name) {\r\n        delete this.listeners[name];\r\n    };\r\n\r\n    EventHandler.prototype.off = function(name, callback) {\r\n        if (this.listeners[name]) {\r\n            var array = this.listeners[name];\r\n            if (array.indexOf(callback) > -1) array.splice(index, 1);\r\n        }\r\n    };\r\n\r\n    EventHandler.prototype.reset = function() {\r\n        var own = this;\r\n        Object.keys(this.listeners).forEach(function(key) {\r\n            delete own.listeners[key];\r\n        });\r\n    };\r\n\r\n    window.EventHandler = EventHandler;\r\n})());\r\n","/* jshint loopfunc:true */\r\n\r\n((function(){\r\n    'use strict';\r\n\r\n    var Logger = function (instance) {\r\n        this.handlers = [];\r\n\r\n        this.addHandler(this.level.ALL, function (level, args) {\r\n            if (Logger.prototype.level.DEBUG === level) {\r\n                console.debug.apply(this, args);\r\n            } else if (Logger.prototype.level.INFO === level) {\r\n                console.info.apply(this, args);\r\n            } else if (Logger.prototype.level.WARNING === level) {\r\n                console.warn.apply(this, args);\r\n            } else if (Logger.prototype.level.ERROR === level) {\r\n                console.error.apply(this, args);\r\n            }\r\n        });\r\n    };\r\n\r\n    Logger.prototype.debug = function () {\r\n        this.log(Logger.prototype.level.DEBUG, arguments);\r\n    };\r\n\r\n    Logger.prototype.info = function () {\r\n        this.log(Logger.prototype.level.INFO, arguments);\r\n    };\r\n\r\n    Logger.prototype.warning = function () {\r\n        this.log(Logger.prototype.level.WARNING, arguments);\r\n    };\r\n\r\n    Logger.prototype.error = function () {\r\n        this.log(Logger.prototype.level.ERROR, arguments);\r\n    };\r\n\r\n    Logger.prototype.log = function (level, args) {\r\n        var tmp = level;\r\n        var levelHandlers = this.handlers[tmp] || [];\r\n        while (tmp >= 0) {\r\n            levelHandlers.forEach(function (handler) {\r\n                handler(level, args);\r\n            });\r\n            levelHandlers = this.handlers[--tmp] || [];\r\n        }\r\n    };\r\n\r\n    Logger.prototype.addHandler = function (level, callback) {\r\n        if (!this.handlers[level])\r\n            this.handlers[level] = [];\r\n        this.handlers[level].push(callback);\r\n    };\r\n\r\n    Logger.prototype.removeHandler = function (level, callback) {\r\n        var levelHandlers = this.handlers[level];\r\n        if (levelHandlers) {\r\n            var index = levelHandlers.indexOf(callback);\r\n            if (index > -1)\r\n                levelHandlers.splice(index, 1);\r\n        }\r\n    };\r\n\r\n    Logger.prototype.level = {\r\n        ALL: 0,\r\n        DEBUG: 1,\r\n        INFO: 2,\r\n        WARNING: 3,\r\n        ERROR: 4,\r\n        NONE: 5,\r\n    };\r\n\r\n    window.Logger = Logger;\r\n})());\r\n","(function(){\r\n    'use strict';\r\n\r\n    var defaultOptions = {\r\n        container: {\r\n            selector: '#cobweb'\r\n        }\r\n    };\r\n\r\n    var Cobweb = function (options) {\r\n        this.options = Object.assign({}, defaultOptions, options);\r\n        var instance = this;\r\n\r\n        this.container = document.querySelector(this.options.container.selector);\r\n        if (!this.container)\r\n            throw new Error('Invalid container selector: \\'' +\r\n                this.options.container.selector + '\\'');\r\n        this.container.addClass('cb-container');\r\n        this.container.data('instance', this);\r\n\r\n        this.logger = new Logger(this, true);\r\n        this.events = new EventHandler(true);\r\n        this.modules = new Modules([this], {\r\n            onLoadedAll: function (names) {\r\n                instance.events.trigger('modules.loaded.all', names);\r\n                instance.events.trigger('app.loaded');\r\n            }\r\n        });\r\n    };\r\n\r\n    window.Cobweb = Cobweb;\r\n}());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Modules = function (params, callbacks) {\r\n        callbacks = callbacks || {};\r\n        var modules = Modules.prototype.all;\r\n        try {\r\n            var sortedNames = topologicalSort(modules);\r\n            for (var i = 0; i < sortedNames.length; i++ ) {\r\n                var name = sortedNames[i];\r\n                var module = modules[name];\r\n                try {\r\n                    module.init.apply(this, params);\r\n                    runCallback(callbacks, 'onLoaded', [name, module]);\r\n                } catch (ex) {\r\n                    console.error('Error loading module:', name, ex);\r\n                    runCallback(callbacks, 'onError', [ex, name, module]);\r\n                }\r\n            }\r\n            runCallback(callbacks, 'onLoadedAll', [sortedNames]);\r\n        } catch (ex) {\r\n            console.error('Error loading modules:', ex);\r\n        }\r\n    };\r\n\r\n    Modules.prototype.all = {};\r\n    Modules.prototype.add = function (name, init, dependencies) {\r\n        dependencies = dependencies || [];\r\n\r\n        var dependant = [];\r\n        var dependencyModule, i;\r\n        for (var moduleName in this.all) {\r\n            var module = this.all[moduleName];\r\n            for (i = 0; i < module.dependencies.length; i++)\r\n                if (module.dependencies[i] === name)\r\n                    dependant.push(moduleName);\r\n        }\r\n        for (i = 0; i < dependencies.length; i++) {\r\n            dependencyModule = this.all[dependencies[i]];\r\n            if (dependencyModule) dependencyModule.dependant.push(name);\r\n        }\r\n\r\n        this.all[name] = {\r\n            dependencies: dependencies,\r\n            dependant: dependant,\r\n            init: init\r\n        };\r\n    };\r\n\r\n    window.Modules = Modules;\r\n\r\n    function topologicalSort (modules) {\r\n        var sortedNames = [];\r\n\r\n        var module = null, i = 0;\r\n        for (var name in modules) {\r\n            module = modules[name];\r\n            for (i = 0; i < module.dependencies.length; i++) {\r\n                var depName = module.dependencies[i];\r\n                if (!modules[depName])\r\n                    throw new Error('Missing module: ' + depName);\r\n            }\r\n        }\r\n\r\n        var nextName = null;\r\n        var candidates = getInitialCandidates(modules);\r\n        while (candidates.length > 0) {\r\n            nextName = candidates.splice(0, 1)[0];\r\n            module = modules[nextName];\r\n            if (module) {\r\n                sortedNames.push(nextName);\r\n                for (i = 0; i < module.dependant.length; i++) {\r\n                    var dependantName = module.dependant[i];\r\n                    if (allDependenciesMet(sortedNames, modules[dependantName]))\r\n                        candidates.push(dependantName);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (Object.keys(modules).length !== sortedNames.length)\r\n            throw new Error('Dependency cycle!');\r\n\r\n        return sortedNames;\r\n    }\r\n\r\n    function getInitialCandidates (modules) {\r\n        var candidates = [];\r\n        for (var name in modules)\r\n            if (modules[name].dependencies.length === 0)\r\n                candidates.push(name);\r\n        return candidates;\r\n    }\r\n\r\n    function allDependenciesMet (loadedUntilNow, module) {\r\n        for (var i = 0; i < module.dependencies.length; i++)\r\n            if (loadedUntilNow.indexOf(module.dependencies[i]) === -1) return false;\r\n        return true;\r\n    }\r\n\r\n    function runCallback (callbacks, name, params) {\r\n        var callback = callbacks[name];\r\n        var isFunction = typeof callback === 'function';\r\n        if (isFunction) callback.apply(null, params);\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('mesh', function (instance) {\r\n        instance.asset = instance.asset || {};\r\n        instance.asset.mesh = {\r\n            get: function (name, callback) {\r\n                Ajax.get('asset/mesh/' + name + '.obj', function (response) {\r\n                    callback(buildHalfEdge(response));\r\n                });\r\n            }\r\n        };\r\n    });\r\n\r\n    function buildHalfEdge (objSource) {\r\n        var mesh = null;\r\n        var vertices = [];\r\n        var lines = objSource.split(/\\r?\\n/);\r\n        lines.forEach(function (line) {\r\n            if (line.startsWith('v')) {\r\n                var vertex = line.substring(2).split(' ').map(function (number) {\r\n                    return parseFloat(number);\r\n                });\r\n                vertices.push(vertex);\r\n            } else if (line.startsWith('f')) {\r\n                if (mesh === null) {\r\n                    mesh = new Math.HalfEdgeMesh();\r\n                    mesh.addVertices(vertices);\r\n                }\r\n                var faceVertices = line.substring(2).split(' ').map(function (index) {\r\n                    return vertices[parseInt(index) - 1];\r\n                });\r\n                mesh.addFace(faceVertices);\r\n            }\r\n        });\r\n        return mesh;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('shader', function (instance) {\r\n        instance.asset = instance.asset || {};\r\n        instance.asset.shader = {\r\n            get: function (name, callback) {\r\n                var shader = null, firstSource = null;\r\n                Ajax.get('asset/shader/' + name + '.vert', function (response) {\r\n                    if (firstSource) {\r\n                        shader = new Shader(response, firstSource);\r\n                        callback(shader);\r\n                    } firstSource = response;\r\n                });\r\n                Ajax.get('asset/shader/' + name + '.frag', function (response) {\r\n                    if (firstSource) {\r\n                        shader = new Shader(firstSource, response);\r\n                        callback(shader);\r\n                    } firstSource = response;\r\n                });\r\n            }\r\n        };\r\n    });\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('pane-header', function (instance) {\r\n        instance.events.on('pane.create', function (pane) {\r\n            onCreateCallback(pane, instance);\r\n        });\r\n    }, ['pane-types']);\r\n\r\n    function onCreateCallback (pane, instance) {\r\n        var header = createHeader();\r\n        pane.appendChild(header);\r\n    }\r\n\r\n    function createHeader () {\r\n        var div = document.createElement('div');\r\n        div.className = 'pane-header';\r\n        return div;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('pane-types', function (instance) {\r\n\r\n        instance.events.on('pane.split', function (oldPane, newPane) {\r\n            var oldType = oldPane.attrData('pane-type');\r\n            if (oldType) instance.pane.setType(newPane, oldType);\r\n        });\r\n\r\n        instance.pane.types = {};\r\n\r\n        instance.pane.setType = function (pane, name) {\r\n            if (this.types[name]) {\r\n                var typeCallbacks = this.types[name];\r\n                typeCallbacks.onPaneType(pane, instance);\r\n                var paneHeader = pane.querySelector('.pane-header');\r\n                typeCallbacks.onCreateHeader(paneHeader, instance);\r\n                pane.dataset.paneType = name;\r\n            }\r\n        };\r\n    }, ['pane']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('pane', function (instance) {\r\n        var mainPanes = document.createElement('div');\r\n        mainPanes.className = 'main-panes';\r\n\r\n        var container = document.querySelector(instance.options.container.selector);\r\n        container.appendChild(mainPanes);\r\n\r\n        instance.events.on('app.loaded', function () {\r\n            instance.pane.internal = new Pane({\r\n                container: 'div.main-panes',\r\n                separator: {\r\n                    size: 3\r\n                },\r\n                callbacks: {\r\n                    onPaneCreate: onPaneCreate,\r\n                    onPaneSplit: onPaneSplit,\r\n                    onPaneResize: onPaneResize,\r\n                    //onPaneMerge: onPaneMerge,\r\n                    //onPaneDestroy: onPaneDestroy,\r\n                }\r\n            });\r\n\r\n            var root = instance.pane.internal.container.querySelector('.pane');\r\n            instance.pane.setType(root, 'surface');\r\n        });\r\n\r\n        instance.pane = {};\r\n\r\n        function onPaneCreate (pane) {\r\n            instance.events.trigger('pane.create', pane);\r\n        }\r\n\r\n        function onPaneSplit (origin, newPane) {\r\n            instance.events.trigger('pane.split', origin, newPane);\r\n        }\r\n\r\n        function onPaneResize (pane) {\r\n            instance.events.trigger('pane.resize', pane);\r\n        }\r\n\r\n        function onPaneMerge (merger, toRemove) {\r\n            console.debug('onPaneMerge', merger, toRemove);\r\n        }\r\n\r\n        function onPaneDestroy (pane) {\r\n            console.debug('onPaneDestroy', pane);\r\n        }\r\n    });\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Camera = function (center, rotation, distance) {\r\n        this.center = center || [0, 0, 0];\r\n        this.rotation = rotation || [2.8, 0.5];\r\n        this.distance = distance || 15;\r\n        this.projection = mat4.create();\r\n        this.ortho = mat4.create();\r\n        this.height = 0;\r\n        this.width = 0;\r\n    };\r\n\r\n    Camera.prototype.getViewMatrix = function (view) {\r\n        view = view || mat4.create();\r\n        var eye = [0, 0, 0];\r\n        this.getPosition(eye);\r\n        mat4.lookAt(view, eye, this.center, this.getUpDirection());\r\n        return view;\r\n    };\r\n\r\n    Camera.prototype.getPosition = function (eye) {\r\n        eye = eye || vec3.create();\r\n        vec3.set(eye, 0, 0, -this.distance);\r\n        vec3.rotateX(eye, eye, this.rotation[1]);\r\n        vec3.rotateY(eye, eye, -this.rotation[0]);\r\n        return eye;\r\n    };\r\n\r\n    Camera.prototype.getDirection = function (direction) {\r\n        direction = direction || vec3.create();\r\n        var eye = this.getPosition();\r\n        vec3.sub(direction, this.center, eye);\r\n        vec3.normalize(direction, direction);\r\n        return direction;\r\n    };\r\n\r\n    Camera.prototype.getRay = function (ray, canvasCoords, canvasSize) {\r\n        ray = ray || new Math.Ray();\r\n        this.getPosition(ray.start);\r\n        vec3.set(ray.direction, canvasCoords[0] / (canvasSize[0] * 0.5) - 1.0,\r\n            canvasCoords[1] / (canvasSize[1] * 0.5) - 1.0, 1);\r\n        var auxMat = mat4.create();\r\n        mat4.multiply(auxMat, this.projection, this.getViewMatrix());\r\n        mat4.invert(auxMat, auxMat);\r\n        vec3.transformMat4(ray.direction, ray.direction, auxMat);\r\n        vec3.normalize(ray.direction, ray.direction);\r\n        return ray;\r\n    };\r\n\r\n    Camera.prototype.getUpDirection = function (up) {\r\n        up = up || vec3.create();\r\n        var vRotation = this.rotation[1];\r\n        if (vRotation >= Math.PI / 2 &&\r\n            vRotation <= ((Math.PI * 3) / 2))\r\n            vec3.set(up, 0, 1, 0);\r\n        else vec3.set(up, 0, -1, 0);\r\n        return up;\r\n    };\r\n\r\n    Camera.prototype.computeLocalAxis = function () {\r\n        var left = [0, 0, 0];\r\n        var up = [0, 0, 0];\r\n\r\n        var forward = this.getDirection();\r\n        vec3.cross(left, forward, [0, 1, 0]);\r\n        vec3.cross(up, forward, left);\r\n\r\n        return {up: up, left: left};\r\n    };\r\n\r\n    window.Math.Camera = Camera;\r\n})());\r\n","(function () {\r\n\t'use strict';\r\n\r\n\tvar defaultOptions = {\r\n\t\tmaxItems: 10,\r\n\t\tmaxDepth: 10,\r\n\t\tpadding: 0.1\r\n\t};\r\n\r\n\tvar OctreeNode = function (parent, depth) {\r\n\t\tthis.items = [];\r\n\t\tthis.children = null;\r\n\t\tthis.depth = depth || 0;\r\n\t\tthis.parent = parent || null;\r\n\t\tthis.aabb = { max: [0, 0, 0], min: [0, 0, 0] };\r\n\r\n\t\tthis.root = this;\r\n\t\twhile (this.root.parent !== null)\r\n\t\t\tthis.root = this.root.parent;\r\n\t};\r\n\r\n\tOctreeNode.prototype.getAllItems = function (container) {\r\n\t\tcontainer = container || [];\r\n\t\tvar i;\r\n        if (!this.children) {\r\n\t\t\tcontainer = container.concat(this.items);\r\n\t\t} else {\r\n            for (i = 0; i < this.children.length; i++)\r\n                container = this.children[i].getAllItems(container);\r\n        }\r\n\t\treturn container;\r\n\t};\r\n\r\n\tOctreeNode.prototype.addItems = function (items) {\r\n\t\tvar result = false;\r\n\t\tfor (var i = 0; i < items.length; i++) {\r\n\t\t\tvar item = items[i];\r\n\t\t\tresult |= this.addItem(item);\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\tOctreeNode.prototype.addItem = function (item) {\r\n\t\tif (this.canContain(item)) {\r\n\t\t\tif (this.children) {\r\n\t\t\t\tfor (var i = 0; i < 8; i++)\r\n\t\t\t\t\tif (this.children[i].addItem(item))\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\tthis.items.push(item);\r\n\t\t\t\tthis.splitIfNeeded();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tOctreeNode.prototype.removeItem = function (item) {\r\n\t\tvar removed = false;\r\n\t\tvar index = this.items.indexOf(item);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.items.splice(index, 1);\r\n\t\t\tthis.mergeIfNeeded();\r\n\t\t\tremoved = true;\r\n\t\t} else {\r\n\t\t\tif (this.children) {\r\n\t\t\t\tfor (var i = 0; i < this.children.length; i++) {\r\n\t\t\t\t\tremoved |= this.children[i].removeItem(item);\r\n\t\t\t\t\tif (removed) break;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (removed) this.mergeIfNeeded();\r\n\t\treturn removed;\r\n\t};\r\n\r\n\tOctreeNode.prototype.splitIfNeeded = function () {\r\n\t\tif (this.root.options.maxItems < this.items.length &&\r\n\t\t\tthis.root.options.maxDepth > this.depth) {\r\n\t\t\tthis.children = [];\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tthis.children[i] = new OctreeNode(this, this.depth + 1);\r\n\t\t\t\tthis.children[i].updateDimensions(this.aabb, i);\r\n\t\t\t}\r\n\t\t\tthis.redistributeItems(this.items);\r\n\t\t\tthis.items = [];\r\n\t\t}\r\n\t};\r\n\r\n\tOctreeNode.prototype.mergeIfNeeded = function () {\r\n\t\tif (this.children) {\r\n\t\t\tvar canMerge = false;\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tthis.children[i].mergeIfNeeded();\r\n\t\t\t\tcanMerge = !this.children[i].children;\r\n\t\t\t\tif (!canMerge) return false;\r\n\t\t\t}\r\n\t\t\tvar subItems = this.getAllItems();\r\n\t\t\tif (this.root.options.maxItems > subItems.length) {\r\n\t\t\t\tthis.children = null;\r\n\t\t\t\tthis.redistributeItems(subItems);\r\n\t\t\t\treturn true;\r\n\t\t\t} else return false;\r\n\t\t} else return false;\r\n\t};\r\n\r\n\tOctreeNode.prototype.canContain = function (item) {\r\n\t\treturn canContain(item, this.aabb);\r\n\t};\r\n\r\n\tOctreeNode.prototype.getCollidingNodes = function (ray) {\r\n\t\tvar nodes = [];\r\n\t\tvar aabb = this.aabb;\r\n\t\tvar collidingPoint = [0, 0, 0];\r\n\t\tif (Math.geo.rayAABBCollision(ray.start, ray.direction,\r\n\t\t\tthis.aabb.min, this.aabb.max, collidingPoint)) {\r\n\t\t\tif (this.children) {\r\n\t\t\t\tfor (var i = 0; i < this.children.length; i++) {\r\n\t\t\t\t\tvar child = this.children[i];\r\n\t\t\t\t\tnodes = nodes.concat(child.getCollidingNodes(ray));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnodes.push(this);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nodes;\r\n\t};\r\n\r\n\tOctreeNode.prototype.getCollidingItems = function (ray) {\r\n\t\tvar items = [];\r\n\t\tthis.getCollidingNodes(ray).forEach(function (node) {\r\n\t\t\titems = items.concat(node.items);\r\n\t\t});\r\n\t\treturn items;\r\n\t};\r\n\r\n\tOctreeNode.prototype.updateDimensions = function (parentAabb, index) {\r\n\t\tvar half = [0, 0, 0];\r\n\t\tvec3.sub(half, parentAabb.max, parentAabb.min);\r\n\t\tvec3.scale(half, half, 0.5);\r\n\t\tvar ref = [!(index & 1), !(index & 2), !(index & 4)];\r\n\t\tvec3.mul(this.aabb.min, half, ref);\r\n\t\tvec3.add(this.aabb.min, this.aabb.min, parentAabb.min);\r\n\t\tvec3.add(this.aabb.max, this.aabb.min, half);\r\n\t\tif (this.children)\r\n\t\t\tfor (var i = 0; i < this.children.length; i++)\r\n\t\t\t\tthis.children[i].updateDimensions(this.aabb, i);\r\n\t};\r\n\r\n\tOctreeNode.prototype.redistributeItems = function (items) {\r\n\t\titems = items || this.items;\r\n\t\tfor (var i = 0; i < items.length; i++) {\r\n\t\t\tvar item = items[i];\r\n\t\t\tvar containingParent = findContainingParent(this, item);\r\n\t\t\tif (containingParent === null) {\r\n\t\t\t\tconsole.warn('Recomputing bounds...');\r\n\t\t\t\tthis.root.updateDimensions([item]);\r\n\t\t\t\tcontainingParent = findContainingParent(this, item);\r\n\t\t\t}\r\n\t\t\tcontainingParent.addItem(item);\r\n\t\t}\r\n\t};\r\n\r\n\tvar Octree = function (options) {\r\n\t\tthis.options = Object.assign({}, defaultOptions, options);\r\n\t\tOctreeNode.call(this);\r\n\t};\r\n\r\n\tOctree.prototype = Object.create(OctreeNode.prototype);\r\n\tOctree.prototype.constructor = OctreeNode;\r\n\r\n\tvar _addItem = Octree.prototype.addItem;\r\n\tOctree.prototype.addItem = function (item) {\r\n\t\tif (!this.canContain(item))\r\n\t\t\tthis.updateDimensions([item]);\r\n\t\treturn _addItem.call(this, item);\r\n\t};\r\n\r\n\tOctree.prototype.onVerticesMove = function (items) {\r\n\t\tfor (var i = 0; i < items.length; i++)\r\n\t\t\tif (this.removeItem(items[i]))\r\n\t\t\t\tthis.addItem(items[i]);\r\n\t};\r\n\r\n\tOctree.prototype.updateDimensions = function (newItems) {\r\n\t\tvar allItems = this.getAllItems(newItems);\r\n\t\tthis.updateBounds(allItems);\r\n\t\tif (this.children) {\r\n\t\t\tfor (var i = 0; i < this.children.length; i++) {\r\n\t\t\t\tthis.children[i].updateDimensions(this.aabb, i);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tOctree.prototype.updateBounds = function (items) {\r\n\t\tvar max = [0, 0, 0].fill(-Number.MAX_VALUE);\r\n\t\tvar min = [0, 0, 0].fill(Number.MAX_VALUE);\r\n\t\tvar padding = this.options.padding;\r\n\t\titems.forEach(function (item) {\r\n\t\t\tfor (var j = 0; j < 3; j++) {\r\n\t\t\t\tmin[j] = Math.min(min[j], item[j] - padding);\r\n\t\t\t\tmax[j] = Math.max(max[j], item[j] + padding);\r\n\t\t\t}\r\n\t\t});\r\n\t\tvec3.copy(this.aabb.min, min);\r\n\t\tvec3.copy(this.aabb.max, max);\r\n\t};\r\n\r\n\tMath.Octree = Octree;\r\n\r\n\tfunction canContain (item, aabb) {\r\n\t\tfor (var j = 0; j < 3; j++) {\r\n\t\t\tif (item[j] < aabb.min[j]) return false;\r\n\t\t\tif (item[j] > aabb.max[j]) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction findContainingParent (current, item) {\r\n\t\tvar result = current;\r\n\t\twhile (result && !result.canContain(item))\r\n\t\t\tresult = result.parent;\r\n\t\treturn result;\r\n\t}\r\n})();\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Plane = function (point, normal) {\r\n        this.normal = normal || [0, 1, 0];\r\n        this.point = point || vec3.create();\r\n        vec3.normalize(this.normal, this.normal);\r\n    };\r\n\r\n    window.Math.Plane = Plane;\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Ray = function (start, direction) {\r\n        this.direction = direction || [0, 0, 1];\r\n        this.start = start || vec3.create();\r\n        vec3.normalize(this.direction, this.direction);\r\n    };\r\n\r\n    Ray.fromPoints = function (a, b) {\r\n        var direction = vec3.create();\r\n        vec3.sub(direction, b, a);\r\n        return new Ray(a, direction);\r\n    };\r\n\r\n    window.Math.Ray = Ray;\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('surface', function (instance) {\r\n        instance.pane.types.surface = {\r\n            onPaneType: onSurfacePaneType,\r\n            onCreateHeader: onCreateSurfaceHeader\r\n        };\r\n\r\n        instance.events.on('pane.resize', function (pane) {\r\n            if (pane.attrData('pane-type') === 'surface')\r\n                updateCanvasSize(instance, pane);\r\n        });\r\n\r\n        window.addEventListener('resize', function (event) {\r\n            var surfaces = instance.pane.internal.container\r\n                .querySelectorAll('.pane canvas');\r\n            for (var i = 0; i < surfaces.length; i++) {\r\n                updateCanvasSize(instance, surfaces[i].parentNode);\r\n            }\r\n        });\r\n\r\n        instance.surface = {};\r\n    }, ['pane-types']);\r\n\r\n    var surfaceIndex = 0;\r\n    function onSurfacePaneType (pane, instance) {\r\n        var canvas = document.createElement('canvas');\r\n        canvas.id = 'surface' + (surfaceIndex++);\r\n        canvas.addEventListener('mouseover', function (event) {\r\n            event.target.focus();\r\n        });\r\n        canvas.className = 'surface';\r\n        pane.appendChild(canvas);\r\n\r\n        var surfaceGUI = document.createElement('div');\r\n        surfaceGUI.className = 'surface-toolbar';\r\n        surfaceGUI.style.float = 'left';\r\n        Ajax.get('partial/surface-toolbar.html', function (result) {\r\n            surfaceGUI.innerHTML = result;\r\n        });\r\n        pane.appendChild(surfaceGUI);\r\n\r\n        instance.surface.map = instance.surface.map || {};\r\n        instance.surface.map[canvas.id] = {\r\n            camera: new Math.Camera()\r\n        };\r\n\r\n        updateCanvasSize(instance, pane);\r\n\r\n        instance.events.trigger('surface.create', canvas);\r\n    }\r\n\r\n    function onCreateSurfaceHeader (header, instance) {\r\n        var label = document.createElement('label');\r\n        label.innerHTML = 'Surface Pane';\r\n        header.appendChild(label);\r\n    }\r\n\r\n    function updateCanvasSize (instance, pane) {\r\n        var canvas = pane.querySelector('canvas');\r\n        var context = canvas.getContext('2d');\r\n        var data = instance.surface.map[canvas.id];\r\n\r\n        var header = pane.querySelector('.pane-header');\r\n        var headerHeight = header ? header.height() : 0;\r\n\r\n        var gui = pane.querySelector('.surface-toolbar');\r\n        var guiWidth = gui ? gui.width() : 0;\r\n\r\n        var width = pane.width() - guiWidth;\r\n        var height = pane.height() - headerHeight;\r\n        canvas.height = height;\r\n        canvas.width = width;\r\n\r\n        context.setTransform(1, 0, 0, 1, 0, 0);\r\n        context.translate(0, height);\r\n        context.scale(1, -1);\r\n\r\n        data.camera.width = width;\r\n        data.camera.height = height;\r\n        mat4.perspective(data.camera.projection, 45 * DEG2RAD, width / height, 0.1, 1000);\r\n        mat4.ortho(data.camera.ortho, 0, width, 0, height, -1, 1);\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('halfedge-cache', function (instance) {\r\n        var superConstructor = Math.HalfEdgeMesh;\r\n        var cachedHalfEdgeMesh = function () {\r\n            superConstructor.call(this);\r\n            var heMesh = this;\r\n            this.cache = {\r\n                meshes: {},\r\n                get: function (key) {\r\n                    var e = this.meshes[key];\r\n                    var builder = Math.HalfEdgeMesh.prototype.builders[key];\r\n                    if (!e || e.rebuild) {\r\n                        e = builder.onCreate(heMesh);\r\n                        heMesh.rebuild = false;\r\n                        this.meshes[key] = e;\r\n                    }\r\n                    if (builder.onClean) builder.onClean(e);\r\n                    return e;\r\n                },\r\n                onVerticesChange: function (vertices) {\r\n                    for (var key in this.meshes) {\r\n                        var e = this.meshes[key];\r\n                        var builder = Math.HalfEdgeMesh.prototype.builders[key];\r\n                        if (builder.onVerticesChange)\r\n                            builder.onVerticesChange(vertices, e);\r\n                    }\r\n                }\r\n            };\r\n        };\r\n        cachedHalfEdgeMesh.prototype = Object.create(Math.HalfEdgeMesh.prototype);\r\n        cachedHalfEdgeMesh.prototype.constructor = cachedHalfEdgeMesh;\r\n\r\n        Math.HalfEdgeMesh = cachedHalfEdgeMesh;\r\n\r\n        var _addVertices = Math.HalfEdgeMesh.prototype.addVertices;\r\n        Math.HalfEdgeMesh.prototype.addVertices = function (vertices) {\r\n            _addVertices.call(this, vertices);\r\n            this.invalidateCache();\r\n        };\r\n\r\n        var _addFace = Math.HalfEdgeMesh.prototype.addFace;\r\n        Math.HalfEdgeMesh.prototype.addFace = function (vertices) {\r\n            _addFace.call(this, vertices);\r\n            this.invalidateCache();\r\n        };\r\n\r\n        Math.HalfEdgeMesh.prototype.invalidateCache = function () {\r\n        for (var key in this.cache.meshes) {\r\n            this.cache.meshes[key].rebuild = true;\r\n        }\r\n        };\r\n\r\n        Math.HalfEdgeMesh.prototype.builders = {};\r\n        Math.HalfEdgeMesh.prototype.addBuilder = function (key, builder) {\r\n            this.builders[key] = builder;\r\n        };\r\n\r\n    }, ['halfedge']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('halfedge', function (instance) {\r\n        Math.HalfEdgeMesh = HalfEdgeMesh;\r\n    });\r\n\r\n    var HalfEdgeMesh = function () {\r\n        this.bounds = new Math.Octree();\r\n        this.halfEdges = [];\r\n        this.vertices = [];\r\n        this.faces = [];\r\n    };\r\n\r\n    HalfEdgeMesh.prototype.addVertices = function (vertices) {\r\n        if (arguments.length > 1) this.addVertices.apply(this, arguments);\r\n        if (!Array.isArray(vertices)) return;\r\n        this.bounds.addItems(vertices);\r\n        for (var i = 0; i < vertices.length; i++) {\r\n            var vertex = vertices[i];\r\n            var index = this.vertices.indexOf(vertex);\r\n            if (index < 0) {\r\n                var _halfEdge = null;\r\n                if (!vertex._halfEdge) {\r\n                    _halfEdge = {};\r\n                    _halfEdge.computeNormal = VertexComputeNormal;\r\n                    _halfEdge.getFaces = VertexGetFaces;\r\n                    _halfEdge.outEdges = [];\r\n                    vertex._halfEdge = _halfEdge;\r\n                } else _halfEdge = vertex._halfEdge;\r\n                _halfEdge.ownIndex = this.vertices.length;\r\n                this.vertices.push(vertex);\r\n            } else {\r\n                console.error('addVertices: Adding vertex twice!', vertex);\r\n            }\r\n        }\r\n    };\r\n\r\n    HalfEdgeMesh.prototype.addFace = function (vertices) {\r\n        if (arguments.length > 1) this.addFace.apply(this, arguments);\r\n        if (!Array.isArray(vertices)) return;\r\n        if (vertices.length >= 3) {\r\n            var he1 = buildEdge(vertices[0], vertices[1]);\r\n            var he2 = buildEdge(vertices[1], vertices[2], he1.face);\r\n            he1.next = he2;\r\n            this.halfEdges.push(he1, he2);\r\n            if (vertices.length >= 3) {\r\n                var last, prev = he2;\r\n                for (var i = 2; i < vertices.length - 1; i++) {\r\n                    last = buildEdge(vertices[i], vertices[i + 1], he1.face);\r\n                    if (!he2.next) he2.next = last;\r\n                    last.next = prev;\r\n                    this.halfEdges.push(last);\r\n                    prev = last;\r\n                }\r\n                last = buildEdge(vertices[i], vertices[0], he1.face);\r\n                last.next = he1;\r\n                this.halfEdges.push(last);\r\n                prev.next = last;\r\n            }\r\n            this.faces.push(he1.face);\r\n        } else {\r\n            console.error('addFace: 3 or more vertices needed to form a face!');\r\n        }\r\n    };\r\n\r\n    HalfEdgeMesh.prototype.onVerticesChange = function (vertex) {\r\n        if (this.cache && this.cache.onVerticesChange)\r\n            this.cache.onVerticesChange(vertex);\r\n        this.bounds.onVerticesMove(vertex);\r\n    };\r\n\r\n    HalfEdgeMesh.prototype.clear = function () {\r\n        this.halfEdges = [];\r\n        this.vertices = [];\r\n        this.faces = [];\r\n    };\r\n\r\n    function buildEdge (start, end, face) {\r\n        var edge = {};\r\n        edge.vertex = end;\r\n        edge.face = face ? face : new HalfEdgeFace(edge);\r\n        edge.opposite = findOppositeEdge(start, end, edge);\r\n        start._halfEdge.outEdges.push(edge);\r\n        edge.next = null;\r\n        return edge;\r\n    }\r\n\r\n    function findOppositeEdge(start, end, he) {\r\n        var opposites = end._halfEdge.outEdges.filter(function (he) {\r\n            return he.vertex === start;\r\n        });\r\n        if (opposites.length > 0) {\r\n            var opposite = opposites[0];\r\n            opposite.opposite = he;\r\n            return opposite;\r\n        } else return null;\r\n    }\r\n\r\n    function VertexGetFaces () {\r\n        return this.outEdges.map(function (edge) {\r\n            return edge.face;\r\n        });\r\n    }\r\n\r\n    function VertexComputeNormal () {\r\n        var normal = [0, 0, 0];\r\n        this.getFaces().forEach(function (face) {\r\n            vec3.add(normal, normal, face.computeRawNormal());\r\n        });\r\n        vec3.normalize(normal, normal);\r\n        return normal;\r\n    }\r\n\r\n    var HalfEdgeFace = function (halfEdge) {\r\n        this.halfEdge = halfEdge;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.getEdges = function () {\r\n        var output = [];\r\n        var he = this.halfEdge;\r\n        while (he.next !== this.halfEdge) {\r\n            output.push(he);\r\n            he = he.next;\r\n            if (he === null) {\r\n                var a = 0;\r\n            }\r\n        }\r\n        output.push(he);\r\n        return output;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.getVertices = function () {\r\n        return this.getEdges().map(function (edge) {\r\n            return edge.vertex;\r\n        });\r\n    };\r\n\r\n    HalfEdgeFace.prototype.getVerticesTriangulated = function () {\r\n        var triangulated = [];\r\n        var vertices = this.getVertices();\r\n        for (var i = 0; i < vertices.length - 2; i++) {\r\n            triangulated.push([vertices[0], vertices[i + 1], vertices[i + 2]]);\r\n        }\r\n        return triangulated;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.computeRawNormal = function () {\r\n        var normal = [0, 0, 0];\r\n        this.getVerticesTriangulated().forEach(function (triplet) {\r\n            var triangleNormal = computeNormal(triplet[0], triplet[1], triplet[2]);\r\n            vec3.add(normal, normal, triangleNormal);\r\n        });\r\n        return normal;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.computeNormal = function () {\r\n        var normal = this.computeRawNormal();\r\n        vec3.normalize(normal, normal);\r\n        return normal;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.computeCenter = function () {\r\n        return Math.geo.computePointsCenter(this.getVertices());\r\n    };\r\n\r\n    function computeNormal (v1, v2, v3) {\r\n        var tmp1 = vec3.create();\r\n        var tmp2 = vec3.create();\r\n        vec3.sub(tmp1, v2, v1);\r\n        vec3.sub(tmp2, v3, v1);\r\n        vec3.cross(tmp1, tmp1, tmp2);\r\n        return tmp1;\r\n    }\r\n})());\r\n","(function () {\r\n    'use strict';\r\n\r\n    var EPSILON = 0.000001;\r\n\r\n    Math.geo = Math.geo || {};\r\n\r\n    Math.geo.rayFaceCollision = function (start, direction, vertices, result) {\r\n        var triangles = Math.geo.triangulateFace(vertices);\r\n        for (var i = 0; i < triangles.length; i++) {\r\n            var triangle = triangles[i];\r\n            if (Math.geo.rayTriangleCollision(start, direction,\r\n                triangle[0], triangle[1], triangle[2], result))\r\n                return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    Math.geo.rayTriangleCollision = function (start, direction, v1, v2, v3, result) {\r\n        result = result || [0, 0, 0];\r\n    \tvar triangleNormal = getNormal(v1, v2, v3);\r\n        if (Math.geo.rayPlaneCollision(start, direction, v1, triangleNormal, result)) {\r\n            var bary = getBarycentricCoordinates(v1, v2, v3, result);\r\n        \treturn (bary[0] <= 1 && bary[0] >= 0) &&\r\n                (bary[1] <= 1 && bary[1] >= 0) &&\r\n                (bary[2] <= 1 && bary[2] >= 0);\r\n        }\r\n    \treturn false;\r\n    };\r\n\r\n    Math.geo.rayPlaneCollision = function (start, direction, planePoint, planeNormal, result) {\r\n\t\tvar numer = vec3.dot(planePoint, planeNormal) -\r\n            vec3.dot(planeNormal, start);\r\n\t\tvar denom = vec3.dot(planeNormal, direction);\r\n\t\tif (Math.abs(denom) < EPSILON) return false;\r\n\t\tvar t = numer / denom;\r\n\t\tif (t < 0.0) return false;\r\n\t\tif (result) {\r\n            vec3.scale(result, direction, t);\r\n            vec3.add(result, start, result);\r\n        }\r\n\t\treturn true;\r\n    };\r\n\r\n    //TODO: refactor to reduce number of operations\r\n    Math.geo.rayAABBCollision = function (start, direction, minB, maxB, result) {\r\n        result = result || vec3.create();\r\n\r\n\t\tvar inside = true;\r\n\t\tvar quadrant = new Float32Array(3);\r\n\t\tvar i = 0|0;\r\n\t\tvar whichPlane;\r\n\t\tvar maxT = new Float32Array(3);\r\n\t\tvar candidatePlane = new Float32Array(3);\r\n\r\n\t\t/* Find candidate planes; this loop can be avoided if\r\n\t\trays cast all from the eye(assume perpsective view) */\r\n\t\tfor (i=0; i < 3; ++i)\r\n\t\t\tif(start[i] < minB[i]) {\r\n\t\t\t\tquadrant[i] = 1;\r\n\t\t\t\tcandidatePlane[i] = minB[i];\r\n\t\t\t\tinside = false;\r\n\t\t\t}else if (start[i] > maxB[i]) {\r\n\t\t\t\tquadrant[i] = 0;\r\n\t\t\t\tcandidatePlane[i] = maxB[i];\r\n\t\t\t\tinside = false;\r\n\t\t\t}else\t{\r\n\t\t\t\tquadrant[i] = 2;\r\n\t\t\t}\r\n\r\n\t\t/* Ray origin inside bounding box */\r\n\t\tif(inside)\t{\r\n\t\t\tvec3.copy(result, start);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/* Calculate T distances to candidate planes */\r\n\t\tfor (i = 0; i < 3; ++i)\r\n\t\t\tif (quadrant[i] !== 2 && direction[i] !== 0)\r\n\t\t\t\tmaxT[i] = (candidatePlane[i] - start[i]) / direction[i];\r\n\t\t\telse\r\n\t\t\t\tmaxT[i] = -1;\r\n\r\n\t\t/* Get largest of the maxT's for final choice of intersection */\r\n\t\twhichPlane = 0;\r\n\t\tfor (i = 1; i < 3; i++)\r\n\t\t\tif (maxT[whichPlane] < maxT[i])\r\n\t\t\t\twhichPlane = i;\r\n\r\n\t\t/* Check final candidate actually inside box */\r\n\t\tif (maxT[whichPlane] < 0) return false;\r\n\t\tif (maxT[whichPlane] > Number.MAX_VALUE) return false; //NOT TESTED\r\n\r\n\t\tfor (i = 0; i < 3; ++i)\r\n\t\t\tif (whichPlane != i) {\r\n\t\t\t\tresult[i] = start[i] + maxT[whichPlane] * direction[i];\r\n\t\t\t\tif (result[i] < minB[i] || result[i] > maxB[i])\r\n\t\t\t\t\treturn false;\r\n\t\t\t} else {\r\n\t\t\t\tresult[i] = candidatePlane[i];\r\n\t\t\t}\r\n\t\treturn true;\r\n    };\r\n\r\n    //TODO: refactor to reduce number of operations\r\n    Math.geo.closestPointsBetweenSegments = function (a0,a1, b0,b1, p_a, p_b) {\r\n\t\tvar u = vec3.subtract( vec3.create(), a1, a0 );\r\n\t\tvar v = vec3.subtract( vec3.create(), b1, b0 );\r\n\t\tvar w = vec3.subtract( vec3.create(), a0, b0 );\r\n\r\n\t\tvar a = vec3.dot(u,u);         // always >= 0\r\n\t\tvar b = vec3.dot(u,v);\r\n\t\tvar c = vec3.dot(v,v);         // always >= 0\r\n\t\tvar d = vec3.dot(u,w);\r\n\t\tvar e = vec3.dot(v,w);\r\n\t\tvar D = a*c - b*b;        // always >= 0\r\n\t\tvar sc, tc;\r\n\r\n\t\t// compute the line parameters of the two closest points\r\n\t\tif (D < EPSILON) {          // the lines are almost parallel\r\n\t\t\tsc = 0.0;\r\n\t\t\ttc = (b>c ? d/b : e/c);    // use the largest denominator\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsc = (b*e - c*d) / D;\r\n\t\t\ttc = (a*e - b*d) / D;\r\n\t\t}\r\n\r\n\t\t// get the difference of the two closest points\r\n\t\tif(p_a)\tvec3.add(p_a, a0, vec3.scale(vec3.create(),u,sc));\r\n\t\tif(p_b)\tvec3.add(p_b, b0, vec3.scale(vec3.create(),v,tc));\r\n\r\n\t\tvar dP = vec3.add( vec3.create(), w, vec3.subtract( vec3.create(), vec3.scale(vec3.create(),u,sc) , vec3.scale(vec3.create(),v,tc)) );  // =  L1(sc) - L2(tc)\r\n\t\treturn vec3.length(dP);   // return the closest distance\r\n\t};\r\n\r\n    Math.geo.rayPointDistance = function (start, direction, point) {\r\n        var aux = [0, 0, 0];\r\n        vec3.sub(aux, point, start);\r\n        vec3.cross(aux, direction, aux);\r\n        return vec3.len(aux);\r\n    };\r\n\r\n    Math.geo.pointPointDistance = function (p1, p2) {\r\n        var aux = [0, 0, 0];\r\n        vec3.sub(aux, p2, p1);\r\n        return vec3.len(aux);\r\n    };\r\n\r\n    Math.geo.triangulateFace = function (vertices) {\r\n        var triangulated = [];\r\n        for (var i = 0; i < vertices.length - 2; i++) {\r\n            triangulated.push([vertices[0], vertices[i + 1], vertices[i + 2]]);\r\n        }\r\n        return triangulated;\r\n    };\r\n\r\n    Math.geo.computePointsCenter = function (points) {\r\n        if (!points || points.length === 0) return null;\r\n        var center = [0, 0, 0];\r\n        points.forEach(function(point) {\r\n            vec3.add(center, center, point);\r\n        });\r\n        vec3.scale(center, center, 1 / points.length);\r\n        return center;\r\n    };\r\n\r\n    Math.geo.findClosestPointIndex = function (position, points) {\r\n        if (!points || !points.length) return null;\r\n        var distance = Math.geo.pointPointDistance(position, points[0]);\r\n        var closestIndex = 0;\r\n        for (var i = 1; i < points.length; i++) {\r\n            var newDistance = Math.geo.pointPointDistance(position, points[i]);\r\n            if (newDistance < distance) {\r\n                distance = newDistance;\r\n                closestIndex = i;\r\n            }\r\n        }\r\n        return closestIndex;\r\n    };\r\n\r\n    Math.geo.findClosestPoint = function (position, points) {\r\n        if (!points || !points.length) return null;\r\n        var index = Math.geo.findClosestPointIndex(position, points);\r\n        return points[index];\r\n    };\r\n\r\n    Math.geo.findClosestFace = function (position, faces) {\r\n        if (!faces || !faces.length) return null;\r\n        var centers = faces.map(function (face) {\r\n            return face.computeCenter();\r\n        });\r\n        var index = Math.geo.findClosestPointIndex(position, centers);\r\n        return faces[index];\r\n    };\r\n\r\n    function getBarycentricCoordinates (p1, p2, p3, point) {\r\n        var v0 = getVectorFromPoints(p1, p2);\r\n        var v1 = getVectorFromPoints(p1, p3);\r\n        var v2 = getVectorFromPoints(p1, point);\r\n\r\n    \tvar d00 = vec3.dot(v0, v0);\r\n    \tvar d01 = vec3.dot(v0, v1);\r\n    \tvar d11 = vec3.dot(v1, v1);\r\n    \tvar d20 = vec3.dot(v2, v0);\r\n    \tvar d21 = vec3.dot(v2, v1);\r\n    \tvar denom = d00 * d11 - d01 * d01;\r\n\r\n        var result = [(d11 * d20 - d01 * d21) / denom,\r\n            (d00 * d21 - d01 * d20) / denom, 0];\r\n        result[2] = 1 - result[0] - result[1];\r\n    \treturn result;\r\n    }\r\n\r\n    function getNormal (v1, v2, v3) {\r\n        var tmp1 = vec3.create();\r\n        var tmp2 = vec3.create();\r\n        vec3.sub(tmp1, v2, v1);\r\n        vec3.sub(tmp2, v3, v1);\r\n        vec3.cross(tmp1, tmp1, tmp2);\r\n        return tmp1;\r\n    }\r\n\r\n    function getVectorFromPoints (a, b) {\r\n        var output = vec3.create();\r\n        vec3.sub(output, b, a);\r\n        return output;\r\n    }\r\n})();\r\n","((function () {\r\n    'use strict';\r\n\r\n    var originalRotation = null;\r\n    var mouseDownCoords = null;\r\n\r\n    Modules.prototype.add('common-interaction', function (instance) {\r\n        instance.surface.interactions.common = {\r\n            onMouseWheel: function (event, realCoords) {\r\n                var canvas = event.target;\r\n                var delta = Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail)));\r\n\r\n                var data = instance.surface.map[canvas.id];\r\n                data.camera.distance -= (delta * data.camera.distance) / 25;\r\n\r\n                return true;\r\n            },\r\n            onMouseMove: function (event, realCoords) {\r\n                if (event.target.dataset.moving) {\r\n                    var canvas = event.target;\r\n                    var data = instance.surface.map[canvas.id];\r\n                    if (data) {\r\n                        var delta = getCoordsDelta(mouseDownCoords, realCoords);\r\n                        combine(data.camera, originalRotation, delta);\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            onMouseDown: function (event, realCoords) {\r\n                var canvas = event.target;\r\n                var data = instance.surface.map[canvas.id];\r\n                if (event.which === 3) {\r\n                    event.target.dataset.moving = 'true';\r\n                    upNormalMouseDown = vec3.equals(data.camera.getUpDirection(), [0, 1, 0]);\r\n                    originalRotation = data.camera.rotation.slice();\r\n                    mouseDownCoords = realCoords;\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n            onMouseUp: function (event, realCoords) {\r\n                if (event.which === 3) {\r\n                    delete event.target.dataset.moving;\r\n                    var data = instance.surface.map[event.target.id];\r\n                    mouseDownCoords = null;\r\n                }\r\n                return true;\r\n            }\r\n        };\r\n    }, ['surface-interaction']);\r\n\r\n    var upNormalMouseDown = true;\r\n    function combine (surface, originalRotation, delta) {\r\n        if (!originalRotation) return;\r\n        if (!upNormalMouseDown) delta[0] = -delta[0];\r\n\r\n        var rotation = surface.rotation;\r\n        rotation[0] = originalRotation[0] + delta[0] * 0.005;\r\n        rotation[1] = originalRotation[1] + delta[1] * 0.005;\r\n        clampRotations(rotation);\r\n    }\r\n\r\n    function getCoordsDelta (initial, current) {\r\n        if (!initial) return [0, 0];\r\n        return [\r\n            initial[0] - current[0],\r\n            current[1] - initial[1]\r\n        ];\r\n    }\r\n\r\n    function clampRotations (rotations) {\r\n        var pi2 = Math.PI * 2;\r\n        if (rotations[0] < 0) rotations[0] = pi2 + rotations[0];\r\n        if (rotations[0] >= pi2) rotations[0] = rotations[0] - pi2;\r\n        if (rotations[1] < 0) rotations[1] = pi2 + rotations[1];\r\n        if (rotations[1] >= pi2) rotations[1] = rotations[1] - pi2;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('object-interaction', function (instance) {\r\n        instance.surface.interactions.object = {\r\n            onMouseDown: function (event, realCoords) {\r\n                var canvas = event.target;\r\n                var data = instance.surface.map[canvas.id];\r\n                if (event.which === 1) {\r\n                    var ray = data.camera.getRay(null, realCoords,\r\n                        [canvas.width, canvas.height]);\r\n\r\n                    var isHit = false, hitPoint = vec3.create();\r\n                    instance.scene.getObjects().forEach(function (node) {\r\n                        isHit = geo.testRayBBox(ray.start, ray.direction, node.data.mesh.bounding, node.data.model, hitPoint);\r\n                        if (isHit) {\r\n                            node.data.selected = true;\r\n                        } else delete node.data.selected;\r\n                    });\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n        };\r\n\r\n    }, ['surface-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('surface-interaction', function (instance) {\r\n        instance.surface.interactions = {};\r\n\r\n        instance.surface.setInteraction = function (surface, name) {\r\n            surface.dataset.interaction = name;\r\n        };\r\n\r\n        instance.surface.getInteractionCallbacks = function (surface) {\r\n            var interactionName = surface.dataset.interaction;\r\n            return instance.surface.interactions[interactionName];\r\n        };\r\n\r\n        instance.surface.onRender = function (canvas, surface) {\r\n            var keepRunning = true;\r\n            var callbacks = instance.surface.getInteractionCallbacks(canvas);\r\n            if (callbacks.onRender) keepRunning = callbacks.onRender(surface);\r\n            if (keepRunning) {\r\n                var common = instance.surface.interactions.common;\r\n                common.onRender(surface);\r\n            }\r\n        };\r\n\r\n        instance.events.on('surface.create', function (surface) {\r\n            surface.tabIndex = 1000;\r\n\r\n            surface.oncontextmenu = onContextMenu;\r\n\r\n            surface.onkeydown = onSurfaceEvent;\r\n            surface.onkeyup = onSurfaceEvent;\r\n\r\n            surface.onmousewheel = onSurfaceEvent;\r\n            surface.onmousemove = onSurfaceEvent;\r\n            surface.onmousedown = onSurfaceEvent;\r\n            surface.onmouseup = onSurfaceEvent;\r\n            surface.onclick = onSurfaceEvent;\r\n        });\r\n\r\n        function onSurfaceEvent (event) {\r\n            var callbacks = instance.surface.getInteractionCallbacks(event.target);\r\n            var keepRunning = runCallback(callbacks, event);\r\n            if (keepRunning === undefined) keepRunning = true;\r\n            if (keepRunning) {\r\n                var common = instance.surface.interactions.common;\r\n                runCallback(common, event);\r\n            }\r\n        }\r\n\r\n        instance.events.on('pane.split', function (oldPane, newPane) {\r\n            var initialValue = oldPane.dataset.interaction;\r\n            newPane.dataset.interaction = initialValue;\r\n        });\r\n    }, ['surface']);\r\n\r\n    function runCallback (callbacks, event) {\r\n        var realCoords = getLocalCoordinates(event);\r\n        switch (event.type) {\r\n            case 'keydown': if (callbacks.onKeyDown) return callbacks.onKeyDown(event); break;\r\n            case 'keyup': if (callbacks.onKeyUp) return callbacks.onKeyUp(event); break;\r\n\r\n            case 'mousewheel': if (callbacks.onMouseWheel) return callbacks.onMouseWheel(event, realCoords); break;\r\n            case 'mousemove': if (callbacks.onMouseMove) return callbacks.onMouseMove(event, realCoords); break;\r\n            case 'mousedown': if (callbacks.onMouseDown) return callbacks.onMouseDown(event, realCoords); break;\r\n            case 'mouseup': if (callbacks.onMouseUp) return callbacks.onMouseUp(event, realCoords); break;\r\n            case 'click': if (callbacks.onClick) return callbacks.onClick(event, realCoords); break;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getLocalCoordinates (event) {\r\n        return [event.layerX, event.layerY];\r\n    }\r\n\r\n    function onContextMenu (event) {\r\n        event.preventDefault();\r\n        return false;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var bytesPerFloat32Element = Float32Array.BYTES_PER_ELEMENT;\r\n\r\n    Modules.prototype.add('render-solid-cache', function (instance) {\r\n        Math.HalfEdgeMesh.prototype.addBuilder('render-solid', solidBuilder);\r\n    }, ['halfedge-cache']);\r\n\r\n    var solidBuilder = {\r\n        onCreate: function (halfEdgeMesh) {\r\n            var indices = [];\r\n            halfEdgeMesh.faces.forEach(function (face) {\r\n                var faceNormal = face.computeNormal();\r\n                face.getVerticesTriangulated().forEach(function (t) {\r\n                    indices.push(t[0]._halfEdge.ownIndex,\r\n                        t[1]._halfEdge.ownIndex, t[2]._halfEdge.ownIndex);\r\n                });\r\n            });\r\n\r\n            var mesh = GL.Mesh.load({\r\n                vertices: new Float32Array(halfEdgeMesh.vertices.length * 3),\r\n                normals: new Float32Array(halfEdgeMesh.vertices.length * 3),\r\n                triangles: new Uint16Array(indices)\r\n            });\r\n            this.onVerticesChange(halfEdgeMesh.vertices, mesh);\r\n            return mesh;\r\n        },\r\n        onVerticesChange: function (vertices, mesh) {\r\n            var buffer = mesh.vertexBuffers;\r\n            var vRange = [Number.MAX_VALUE, 0];\r\n            var nRange = [Number.MAX_VALUE, 0];\r\n\r\n            for (var i = 0; i < vertices.length; i++) {\r\n                var vertex = vertices[i];\r\n                var index = vertex._halfEdge.ownIndex;\r\n\r\n                buffer.vertices.data.set(vertex, index * 3);\r\n                vRange[0] = Math.min(vRange[0], index * 3);\r\n                vRange[1] = Math.max(vRange[1], index * 3 + 3);\r\n\r\n                var normal = vertex._halfEdge.computeNormal();\r\n                buffer.normals.data.set(normal, index * 3);\r\n                nRange[0] = Math.min(nRange[0], index * 3);\r\n                nRange[1] = Math.max(nRange[1], index * 3 + 3);\r\n            }\r\n            uploadRange(buffer.vertices, vRange);\r\n            uploadRange(buffer.normals, nRange);\r\n        },\r\n        onClean: function (mesh) {\r\n            if (mesh.vertexBuffers.vertices.dirty) {\r\n                mesh.vertexBuffers.vertices.upload();\r\n                delete mesh.vertexBuffers.vertices.dirty;\r\n            }\r\n            if (mesh.vertexBuffers.normals.dirty) {\r\n                mesh.vertexBuffers.normals.upload();\r\n                delete mesh.vertexBuffers.normals.dirty;\r\n            }\r\n        }\r\n    };\r\n\r\n    function uploadRange (buffer, range) {\r\n        buffer.uploadRange(range[0] * bytesPerFloat32Element,\r\n            (range[1] - range[0]) * bytesPerFloat32Element);\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var solidShader = null;\r\n    var wireframeShader = null;\r\n\r\n    Modules.prototype.add('render-solid', function (instance) {\r\n        instance.asset.shader.get('solid', function (s) {\r\n            solidShader = s;\r\n        });\r\n        instance.asset.shader.get('wireframe', function (s) {\r\n            wireframeShader = s;\r\n        });\r\n\r\n        var grid = GL.Mesh.grid({lines:17,size:16});\r\n        var colorsArray = [];\r\n        grid.vertexBuffers.vertices.forEach(function (vertex, bufferIndex) {\r\n            colorsArray.push(0.4, 0.4, 0.4, 1);\r\n        });\r\n        grid.createVertexBuffer('colors', 'a_color', 4, new Float32Array(colorsArray));\r\n        var axisX = GL.Mesh.load({\r\n            vertices: new Float32Array([-8, 0.001, 0, 8, 0.001, 0]),\r\n            colors: new Float32Array([1, 0, 0, 1, 1, 0, 0, 1])\r\n        });\r\n        var axisZ = GL.Mesh.load({\r\n            vertices: new Float32Array([0, 0.001, -8, 0, 0.001, 8]),\r\n            colors: new Float32Array([0, 1, 0, 1, 0, 1, 0, 1])\r\n        });\r\n\r\n        instance.surface.renders.solid = function (surface) {\r\n            var lightDirection = vec3.create();\r\n            surface.camera.getPosition(lightDirection);\r\n            vec3.add(lightDirection, lightDirection, [1, 2, 0]);\r\n            vec3.normalize(lightDirection, lightDirection);\r\n            uniforms.u_lightvector = lightDirection;\r\n\r\n            renderObject(surface, grid, wireframeShader, instance.graphics.gl.LINES);\r\n            renderObject(surface, axisX, wireframeShader, instance.graphics.gl.LINES);\r\n            renderObject(surface, axisZ, wireframeShader, instance.graphics.gl.LINES);\r\n            instance.scene.getObjects().forEach(function (node) {\r\n                var mesh = node.data.mesh.cache.get('render-solid');\r\n                renderObject(surface, mesh, solidShader, node.data.primitive, node.data.model);\r\n            });\r\n        };\r\n\r\n        instance.events.on('surface.create', function (surface) {\r\n            instance.surface.setRender(surface, 'solid');\r\n        });\r\n    }, ['surface-render', 'shader', 'render-solid-cache']);\r\n\r\n    var uniforms = {\r\n        u_color: [0.5, 0.5, 0.5, 1],\r\n        u_lightvector: null,\r\n        u_model: null,\r\n        u_mvp: mat4.create()\r\n    };\r\n\r\n    var temp = mat4.create();\r\n    function renderObject (surface, mesh, shader, primitive, model, indexBufferName) {\r\n        model = model || mat4.create();\r\n\r\n        surface.camera.getViewMatrix(temp);\r\n        mat4.multiply(temp, surface.camera.projection, temp);\r\n        mat4.multiply(uniforms.u_mvp, temp, model);\r\n\r\n        uniforms.u_model = model;\r\n\r\n        if (shader) {\r\n            shader.uniforms(uniforms);\r\n            if (mesh instanceof Math.HalfEdgeMesh) {\r\n                if (mesh) shader.draw(mesh, primitive, indexBufferName);\r\n            } else {\r\n                shader.draw(mesh, primitive, indexBufferName);\r\n            }\r\n        }\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('surface-render', function (instance) {\r\n        instance.surface.renders = {};\r\n\r\n        instance.surface.setRender = function (surface, name) {\r\n            surface.dataset.render = name;\r\n        };\r\n\r\n        instance.surface.getRender = function (surface) {\r\n            var renderName = surface.dataset.render;\r\n            return instance.surface.renders[renderName];\r\n        };\r\n\r\n        var panes = document.querySelectorAll('.pane');\r\n        for (var i = 0; i < panes.length; i++) {\r\n            if (panes[i].dataset.paneType == 'surface') {\r\n                var canvas = panes[i].querySelector('canvas');\r\n                canvas.dataset.render = 'solid';\r\n            }\r\n        }\r\n\r\n        instance.events.on('pane.split', function (oldPane, newPane) {\r\n            newPane.attrData('surface-render', oldPane.attrData('surface-render'));\r\n        });\r\n    }, ['surface']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-all', function (instance) {\r\n        instance.surface.interactions.edit.actions.all = {\r\n            init: function (context, event) {\r\n                if (!context.selection.isEmpty()) context.selection.clear();\r\n                else {\r\n                    var selection = context.selection;\r\n                    instance.scene.getObjects().forEach(function (object) {\r\n                        var result = selection.addAll(object.data);\r\n                        object.data.mesh.cache.onVerticesChange(result);\r\n                    });\r\n                }\r\n                context.action = null;\r\n            }\r\n        };\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-delete', function (instance) {\r\n        instance.surface.interactions.edit.actions.delete = {\r\n            init: function (context, event) {\r\n                if (!context.selection.isEmpty()) {\r\n                    for (var objKey in context.selection.objects) {\r\n                        var obj = context.selection.objects[objKey];\r\n                        var mesh = instance.scene.getObjects()[0].data.mesh;\r\n\r\n                        if (obj.faces && obj.faces.length > 0) {\r\n                            for (var i = 0; i < obj.faces.length; i++)\r\n                                removeFace(mesh, obj.faces[i]);\r\n                        } else if (obj.vertices && obj.vertices.length > 0) {\r\n                            for (var j = 0; j < obj.vertices.length; j++)\r\n                                removeVertex(mesh, obj.vertices[j]);\r\n                        }\r\n\r\n                        context.selection.clear();\r\n                        mesh.invalidateCache();\r\n                    }\r\n                } else console.warn('Cannot delete an empty selection!');\r\n                context.action = null;\r\n            }\r\n        };\r\n\r\n        function removeVertex (mesh, vertex) {\r\n            vertex._halfEdge.getFaces().forEach(function (face) {\r\n                removeFace(mesh, face);\r\n            });\r\n            var vIndex = vertex._halfEdge.ownIndex;\r\n            mesh.vertices.splice(vIndex, 1);\r\n            for (var i = vIndex; i < mesh.vertices.length; i++) {\r\n                mesh.vertices[i]._halfEdge.ownIndex--;\r\n            }\r\n        }\r\n\r\n        function removeFace (mesh, face) {\r\n            var current = face.halfEdge;\r\n            removeHalfEdge(mesh, current);\r\n            while (current.next !== face.halfEdge) {\r\n                current = current.next;\r\n                removeHalfEdge(mesh, current);\r\n            }\r\n            var fIndex = mesh.faces.indexOf(face);\r\n            mesh.faces.splice(fIndex, 1);\r\n        }\r\n\r\n        function removeHalfEdge (mesh, halfEdge) {\r\n            var heIndex = mesh.halfEdges.indexOf(halfEdge);\r\n            mesh.halfEdges.splice(heIndex, 1);\r\n            if (halfEdge.opposite) {\r\n                var oppositeVertex = halfEdge.opposite.vertex;\r\n                var outEdges = oppositeVertex._halfEdge.outEdges;\r\n                heIndex = outEdges.indexOf(halfEdge);\r\n                outEdges.splice(heIndex, 1);\r\n                if (outEdges.length === 0)\r\n                    removeVertex(mesh, oppositeVertex);\r\n            }\r\n        }\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-extrude', function (instance) {\r\n        instance.surface.interactions.edit.actions.extrude = {\r\n            init: function (context, event) {\r\n                if (!context.selection.isEmpty()) {\r\n                    for (var objKey in context.selection.objects) {\r\n                        var obj = context.selection.objects[objKey];\r\n                        var selectedFaces = obj.faces;\r\n\r\n                        var mesh = instance.scene.getObjects()[0].data.mesh;\r\n\r\n                        var outerEdges = getOuterEdgeLoop(selectedFaces);\r\n                        var newOuterEdges = duplicateOuterRing(outerEdges,\r\n                                selectedFaces, mesh);\r\n\r\n                        context.selection.clear();\r\n                        for (var i = 0; i < selectedFaces.length; i++) {\r\n                            context.selection.addFace(instance.scene.getObjects()[0].data,\r\n                                selectedFaces[i]);\r\n                        }\r\n                        mesh.invalidateCache();\r\n                    }\r\n                } else console.warn('Cannot extrude an empty selection!');\r\n                context.action = null;\r\n            }\r\n        };\r\n\r\n        function getOuterEdgeLoop (faces) {\r\n            var outerEdges = [], startEdge = null;\r\n            for (var i = 0; i < faces.length; i++) {\r\n                var faceEdges = faces[i].getEdges();\r\n                for (var j = 0; j < faceEdges.length; j++) {\r\n                    var he = faceEdges[j];\r\n                    var oppositeFace = he.opposite.face;\r\n                    if (!oppositeFace._selected) {\r\n                        startEdge = he;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function filterNextOutEdge (he) {\r\n                if (!he.opposite) return null;\r\n                return he.face._selected && !he.opposite.face._selected;\r\n            }\r\n            outerEdges.push(startEdge);\r\n            var nextEdge = startEdge.vertex\r\n                ._halfEdge.outEdges.find(filterNextOutEdge);\r\n            while (nextEdge && nextEdge != startEdge) {\r\n                outerEdges.push(nextEdge);\r\n                nextEdge = nextEdge.vertex._halfEdge\r\n                    .outEdges.find(filterNextOutEdge);\r\n            }\r\n\r\n            return outerEdges;\r\n        }\r\n\r\n        function duplicateOuterRing (outerEdges, faces, mesh) {\r\n            var newVertices = [], oldVertices = [];\r\n            for (var i = 0; i < outerEdges.length; i++) {\r\n                var newVertex = Object.assign([], outerEdges[i].vertex);\r\n                newVertex._halfEdge = Object.assign({}, outerEdges[i].vertex._halfEdge);\r\n                delete newVertex._selected;\r\n\r\n                var newOutEdges = [];\r\n                var oldOutEdges = outerEdges[i].vertex._halfEdge.outEdges;\r\n                for (var j = 0; j < oldOutEdges.length; j++) {\r\n                    var outEdge = oldOutEdges[j];\r\n                    if (outEdge.face._selected) {\r\n                        oldOutEdges.splice(oldOutEdges.indexOf(outEdge), 1);\r\n                        newOutEdges.push(outEdge);\r\n                    }\r\n                }\r\n                newVertex._halfEdge.outEdges = newOutEdges;\r\n                oldVertices.push(outerEdges[i].vertex);\r\n                newVertices.push(newVertex);\r\n            }\r\n            mesh.addVertices(newVertices);\r\n            for (i = 0; i < faces.length; i++) {\r\n                var faceEdges = faces[i].getEdges();\r\n                for (var w = 0; w < faceEdges.length; w++) {\r\n                    var he = faceEdges[w];\r\n                    if (!he.opposite) console.debug(he);\r\n                    else {\r\n                        var vertexIndex = oldVertices.indexOf(he.vertex);\n                        if (vertexIndex >= 0)\r\n                            he.vertex = newVertices[vertexIndex];\r\n                    }\r\n                }\r\n            }\r\n            for (i = 0; i < newVertices.length; i++) {\r\n                var nextIndex = i + 1 >= newVertices.length ? 0 : i + 1;\r\n                mesh.addFace([oldVertices[i], oldVertices[nextIndex],\r\n                        newVertices[nextIndex], newVertices[i]]);\r\n            }\r\n        }\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-face', function (instance) {\r\n        instance.surface.interactions.edit.actions.face = {\r\n            init: function (context, event) {\r\n                if (!context.selection.isEmpty()) {\r\n                    var center = context.selection.getCenter();\r\n                    var normal = context.selection.getNormal();\r\n                    console.debug('sorting...', center, normal);\r\n                    var vertexCounterClockwise = function (a, b) {\r\n                        var ac = vec3.sub(vec3.create(), a, center);\r\n                        var bc = vec3.sub(vec3.create(), b, center);\r\n                        return -vec3.dot(normal, vec3.cross(vec3.create(), ac, bc));\r\n                    };\r\n\r\n                    for (var objKey in context.selection.objects) {\r\n                        var obj = context.selection.objects[objKey];\r\n                        var mesh = instance.scene.getObjects()[0].data.mesh;\r\n\r\n                        if (obj.vertices && obj.vertices.length > 0) {\r\n                            var sortedVertices = obj.vertices.sort(vertexCounterClockwise);\r\n                            mesh.addFace(sortedVertices);\r\n                        }\r\n\r\n                        context.selection.clear();\r\n                        mesh.invalidateCache();\r\n                    }\r\n                } else console.warn('Cannot create a face with an empty selection!');\r\n                context.action = null;\r\n            }\r\n        };\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-move', function (instance) {\r\n        var initialCoords = vec2.create();\r\n        var selectionNormal = null;\r\n        var axisOrigin = null;\r\n        var isY = false;\r\n\r\n        instance.surface.interactions.edit.actions.move = {\r\n            axis: null,\r\n            init: function (context, event) {\r\n                vec2.copy(initialCoords, context.lastCoords);\r\n                selectionNormal = context.selection.getNormal();\r\n                for (var name in context.selection.objects) {\r\n                    var selectedObj = context.selection.objects[name];\r\n                    for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                        var vertex = selectedObj.vertices[i];\r\n                        vertex.originalPosition = vertex.slice();\r\n                    }\r\n                }\r\n            },\r\n            onMouseMove: function (context, event) {\r\n                if (!context.selection.isEmpty()) {\r\n                    var canvas = event.target;\r\n                    var data = instance.surface.map[canvas.id];\r\n\r\n                    var currentRay = data.camera.getRay(null, context.lastCoords,\r\n                        [canvas.width, canvas.height]);\r\n                    var initialRay = data.camera.getRay(null, initialCoords,\r\n                        [canvas.width, canvas.height]);\r\n                    var cameraDirection = data.camera.getDirection();\r\n\r\n                    var hitPointInitial = [0, 0, 0], hitPointCurrent = [0, 0, 0];\r\n\r\n                    var selectionCenter = context.selection.getCenter();\r\n                    Math.geo.rayPlaneCollision(initialRay.start, initialRay.direction,\r\n                        selectionCenter, cameraDirection, hitPointInitial);\r\n\r\n                    var delta = vec3.create();\r\n\r\n                    if (this.axis) {\r\n                        var currentRayEnd = vec3.scaleAndAdd(vec3.create(), currentRay.start, currentRay.direction, 100);\r\n                        var axisStart = vec3.scale(vec3.create(), this.axis, -50);\r\n                        var axisEnd = vec3.scale(vec3.create(), this.axis, 50);\r\n                        Math.geo.closestPointsBetweenSegments(axisStart, axisEnd, currentRay.start, currentRayEnd, hitPointCurrent);\r\n\r\n                        if (!axisOrigin) {\r\n                            axisOrigin = vec3.copy(vec3.create(), hitPointCurrent);\r\n                        } else vec3.sub(delta, hitPointCurrent, axisOrigin);\r\n                    } else {\r\n                        Math.geo.rayPlaneCollision(currentRay.start, currentRay.direction,\r\n                            selectionCenter, cameraDirection, hitPointCurrent);\r\n                        vec3.sub(delta, hitPointCurrent, hitPointInitial);\r\n                    }\r\n\r\n                    if (context.isControlDown)\r\n                        for (var j = 0; j < 3; j++)\r\n                            delta[j] = Math.round(delta[j]);\r\n\r\n                    for (var name in context.selection.objects) {\r\n                        var hitPoint = [0, 0, 0];\r\n                        var selectedObj = context.selection.objects[name];\r\n                        var sceneObj = instance.scene.getObjectByName(name);\r\n\r\n                        for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                            var vertex = selectedObj.vertices[i];\r\n                            if (vertex.originalPosition)\r\n                                vec3.add(vertex, vertex.originalPosition, delta);\r\n                        }\r\n                        sceneObj.mesh.onVerticesChange(selectedObj.vertices);\r\n                    }\r\n                }\r\n            },\r\n            onMouseDown: function (context, event) {\r\n                if (event.which === 1 || event.which === 3) {\r\n                    var restore = event.which === 3;\r\n                    for (var name in context.selection.objects) {\r\n                        var selectedObj = context.selection.objects[name];\r\n                        var sceneObj = instance.scene.getObjectByName(name);\r\n                        for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                            var vertex = selectedObj.vertices[i];\r\n                            if (vertex.originalPosition) {\r\n                                if (restore)\r\n                                    vec3.copy(vertex, vertex.originalPosition);\r\n                                delete vertex.originalPosition;\r\n                            }\r\n                        }\r\n                        sceneObj.mesh.bounds.updateDimensions();\r\n                        sceneObj.mesh.onVerticesChange(sceneObj.mesh.vertices);\r\n                    }\r\n                }\r\n                isY = false;\r\n                this.axis = null;\r\n                context.action = null;\r\n            },\r\n            onKeyDown: function (context, event) {\r\n                if (event.key === 'x') this.axis = vec3.set(vec3.create(), 1, 0, 0);\r\n                else if (event.key === 'y') {\r\n                    if (isY) {\r\n                        this.axis = selectionNormal;\r\n                        isY = false;\r\n                    } else {\r\n                        this.axis = vec3.set(vec3.create(), 0, 1, 0);\r\n                        isY = true;\r\n                    }\r\n                } else if (event.key === 'z') this.axis = vec3.set(vec3.create(), 0, 0, 1);\r\n                axisOrigin = null;\r\n            }\r\n        };\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-rotate', function (instance) {\r\n        var selectionCenter2d = vec2.create();\r\n        var selectionCenter = vec3.create();\r\n        var initialVector = vec2.create();\r\n\r\n        var aux = vec2.create();\r\n\r\n        instance.surface.interactions.edit.actions.rotate = {\r\n            axis: vec3.create(),\r\n            init: function (context, event) {\r\n                if (context.selection.isEmpty()) {\r\n                    context.action = null;\r\n                    return;\r\n                }\r\n                var canvas = event.target;\r\n                var data = instance.surface.map[canvas.id];\r\n\r\n                var center = context.selection.getCenter();\r\n                vec3.copy(selectionCenter, center);\r\n                vec3.transformMat4(center, center, data.camera.getViewMatrix());\r\n                vec3.transformMat4(center, center, data.camera.projection);\r\n                center[0] = ((center[0] + 1) / 2) * canvas.width;\r\n                center[1] = ((center[1] + 1) / 2) * canvas.height;\r\n                vec2.copy(selectionCenter2d, center);\r\n\r\n                data.camera.getDirection(this.axis);\r\n\r\n                vec2.sub(initialVector, selectionCenter2d, context.lastCoords);\r\n                vec2.normalize(initialVector, initialVector);\r\n                for (var name in context.selection.objects) {\r\n                    var selectedObj = context.selection.objects[name];\r\n                    for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                        var vertex = selectedObj.vertices[i];\r\n                        vertex.originalPosition = vertex.slice();\r\n                    }\r\n                }\r\n            },\r\n            onMouseMove: function (context, event) {\r\n                if (!context.selection.isEmpty()) {\r\n                    var fromSelectionToCursor = vec2.sub(vec2.create(), selectionCenter2d, context.lastCoords);\r\n                    vec2.normalize(fromSelectionToCursor, fromSelectionToCursor);\r\n                    var determinant = fromSelectionToCursor[0] * initialVector[1] -\r\n                        initialVector[0] * fromSelectionToCursor[1];\r\n                    var delta = Math.atan2(determinant, vec2.dot(fromSelectionToCursor, initialVector));\r\n                    var negatedCenter = vec3.negate(vec3.create(), selectionCenter);\r\n\r\n                    var tranform = mat4.create();\r\n                    mat4.translate(tranform, tranform, selectionCenter);\r\n                    mat4.rotate(tranform, tranform, delta, this.axis);\r\n                    mat4.translate(tranform, tranform, negatedCenter);\r\n\r\n                    for (var name in context.selection.objects) {\r\n                        var selectedObj = context.selection.objects[name];\r\n                        var sceneObj = instance.scene.getObjectByName(name);\r\n                        for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                            var vertex = selectedObj.vertices[i];\r\n                            vec3.transformMat4(vertex, vertex.originalPosition, tranform);\r\n                        }\r\n                        sceneObj.mesh.onVerticesChange(selectedObj.vertices);\r\n                    }\r\n                }\r\n            },\r\n            onMouseDown: function (context, event) {\r\n                if (event.which === 1 || event.which === 3) {\r\n                    var restore = event.which === 3;\r\n                    for (var name in context.selection.objects) {\r\n                        var selectedObj = context.selection.objects[name];\r\n                        var sceneObj = instance.scene.getObjectByName(name);\r\n                        for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                            var vertex = selectedObj.vertices[i];\r\n                            if (vertex.originalPosition) {\r\n                                if (restore)\r\n                                    vec3.copy(vertex, vertex.originalPosition);\r\n                                delete vertex.originalPosition;\r\n                            }\r\n                        }\r\n                        sceneObj.mesh.bounds.updateDimensions();\r\n                        sceneObj.mesh.onVerticesChange(sceneObj.mesh.vertices);\r\n                    }\r\n                }\r\n                context.action = null;\r\n            },\r\n            onKeyDown: function (context, event) {\r\n                if (event.key === 'x') this.axis = vec3.set(vec3.create(), 1, 0, 0);\r\n                else if (event.key === 'y') this.axis = vec3.set(vec3.create(), 0, 1, 0);\r\n                else if (event.key === 'z') this.axis = vec3.set(vec3.create(), 0, 0, 1);\r\n            }\r\n        };\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-scale', function (instance) {\r\n        var selectionCenter2d = vec2.create();\r\n        var selectionCenter = vec3.create();\r\n        var initialDistance = 0;\r\n\r\n        var aux = vec2.create();\r\n\r\n        instance.surface.interactions.edit.actions.scale = {\r\n            axis: null,\r\n            init: function (context, event) {\r\n                if (context.selection.isEmpty()) {\r\n                    context.action = null;\r\n                    return;\r\n                }\r\n                var canvas = event.target;\r\n                var data = instance.surface.map[canvas.id];\r\n\r\n                var center = context.selection.getCenter();\r\n                vec3.copy(selectionCenter, center);\r\n                vec3.transformMat4(center, center, data.camera.getViewMatrix());\r\n                vec3.transformMat4(center, center, data.camera.projection);\r\n                center[0] = ((center[0] + 1) / 2) * canvas.width;\r\n                center[1] = ((center[1] + 1) / 2) * canvas.height;\r\n                vec2.copy(selectionCenter2d, center);\r\n\r\n                vec2.sub(aux, context.lastCoords, selectionCenter2d);\r\n                initialDistance = vec2.length(aux);\r\n                for (var name in context.selection.objects) {\r\n                    var selectedObj = context.selection.objects[name];\r\n                    for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                        var vertex = selectedObj.vertices[i];\r\n                        vertex.originalPosition = vertex.slice();\r\n                    }\r\n                }\r\n            },\r\n            onMouseMove: function (context, event) {\r\n                if (!context.selection.isEmpty()) {\r\n                    vec2.sub(aux, context.lastCoords, selectionCenter2d);\r\n                    var delta = (vec2.length(aux) / initialDistance);\r\n                    var vectorDelta = vec3.scale(vec3.create(), this.axis || [1, 1, 1], delta);\r\n                    var negatedCenter = vec3.negate(vec3.create(), selectionCenter);\r\n\r\n                    var tranform = mat4.create();\r\n                    mat4.translate(tranform, tranform, selectionCenter);\r\n                    mat4.scale(tranform, tranform, vectorDelta);\r\n                    mat4.translate(tranform, tranform, negatedCenter);\r\n\r\n                    for (var name in context.selection.objects) {\r\n                        var selectedObj = context.selection.objects[name];\r\n                        var sceneObj = instance.scene.getObjectByName(name);\r\n                        for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                            var vertex = selectedObj.vertices[i];\r\n                            vec3.transformMat4(vertex, vertex.originalPosition, tranform);\r\n                        }\r\n                        sceneObj.mesh.onVerticesChange(selectedObj.vertices);\r\n                    }\r\n                }\r\n            },\r\n            onMouseDown: function (context, event) {\r\n                if (event.which === 1 || event.which === 3) {\r\n                    var restore = event.which === 3;\r\n                    for (var name in context.selection.objects) {\r\n                        var selectedObj = context.selection.objects[name];\r\n                        var sceneObj = instance.scene.getObjectByName(name);\r\n                        for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                            var vertex = selectedObj.vertices[i];\r\n                            if (vertex.originalPosition) {\r\n                                if (restore)\r\n                                    vec3.copy(vertex, vertex.originalPosition);\r\n                                delete vertex.originalPosition;\r\n                            }\r\n                        }\r\n                        sceneObj.mesh.bounds.updateDimensions();\r\n                        sceneObj.mesh.onVerticesChange(sceneObj.mesh.vertices);\r\n                    }\r\n                }\r\n                this.axis = null;\r\n                context.action = null;\r\n            },\r\n            onKeyDown: function (context, event) {\r\n                if (event.key === 'x') this.axis = vec3.set(vec3.create(), 1, 0, 0);\r\n                else if (event.key === 'y') this.axis = vec3.set(vec3.create(), 0, 1, 0);\r\n                else if (event.key === 'z') this.axis = vec3.set(vec3.create(), 0, 0, 1);\r\n            }\r\n        };\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var bytesPerFloat32Element = Float32Array.BYTES_PER_ELEMENT;\r\n\r\n    Modules.prototype.add('edit-interaction-render-cache', function (instance) {\r\n        Math.HalfEdgeMesh.prototype.addBuilder('edit-interaction-render-wireframe', wireframeBuilder);\r\n        Math.HalfEdgeMesh.prototype.addBuilder('edit-interaction-render-vertices', verticesBuilder);\r\n    }, ['edit-interaction', 'shader']);\r\n\r\n    var wireframeBuilder = {\r\n        onCreate: function (halfEdgeMesh) {\r\n            var indices = [];\r\n            halfEdgeMesh.faces.forEach(function (face) {\r\n                face.getVertices().forEach(function (vertex, i, array) {\r\n                    var index = i >= array.length - 1 ? 0 : i + 1;\r\n                    indices.push(vertex._halfEdge.ownIndex);\r\n                    indices.push(array[index]._halfEdge.ownIndex);\r\n                });\r\n            });\r\n\r\n            var mesh = GL.Mesh.load({\r\n                vertices: new Float32Array(halfEdgeMesh.vertices.length * 3),\r\n                colors: new Float32Array(halfEdgeMesh.vertices.length * 4),\r\n                lines: new Uint16Array(indices)\r\n            });\r\n            this.onVerticesChange(halfEdgeMesh.vertices, mesh);\r\n            return mesh;\r\n        },\r\n        onVerticesChange: function (vertices, mesh) {\r\n            var buffer = mesh.vertexBuffers;\r\n            var vRange = [Number.MAX_VALUE, 0];\r\n            var cRange = [Number.MAX_VALUE, 0];\r\n            for (var i = 0; i < vertices.length; i++) {\r\n                var vertex = vertices[i];\r\n                var index = vertex._halfEdge.ownIndex;\r\n                buffer.vertices.data.set(vertex, index * 3);\r\n                vRange[0] = Math.min(vRange[0], index * 3);\r\n                vRange[1] = Math.max(vRange[1], index * 3 + 3);\r\n                var color = vertex._selected ? [1, 0.4, 0.1, 1] : [0, 0, 0, 1];\r\n                buffer.colors.data.set(color, index * 4);\r\n                cRange[0] = Math.min(cRange[0], index * 4);\r\n                cRange[1] = Math.max(cRange[1], index * 4 + 4);\r\n            }\r\n            uploadRange(buffer.vertices, vRange);\r\n            uploadRange(buffer.colors, cRange);\r\n        }\r\n    };\r\n\r\n    var verticesBuilder = {\r\n        onCreate: function (halfEdgeMesh) {\r\n            var mesh = GL.Mesh.load({\r\n                vertices: new Float32Array(halfEdgeMesh.vertices.length * 3),\r\n                colors: new Float32Array(halfEdgeMesh.vertices.length * 4)\r\n            });\r\n            this.onVerticesChange(halfEdgeMesh.vertices, mesh);\r\n            return mesh;\r\n        },\r\n        onVerticesChange: function (vertices, mesh) {\r\n            var buffer = mesh.vertexBuffers;\r\n            var vRange = [Number.MAX_VALUE, 0];\r\n            var cRange = [Number.MAX_VALUE, 0];\r\n            for (var i = 0; i < vertices.length; i++) {\r\n                var vertex = vertices[i];\r\n                var index = vertex._halfEdge.ownIndex;\r\n\r\n                buffer.vertices.data.set(vertex, index * 3);\r\n                vRange[0] = Math.min(vRange[0], index * 3);\r\n                vRange[1] = Math.max(vRange[1], index * 3 + 3);\r\n\r\n                var color = vertex._selected ? [1, 0.4, 0.1, 1] : [0, 0, 0, 1];\r\n                buffer.colors.data.set(color, index * 4);\r\n                cRange[0] = Math.min(cRange[0], index * 4);\r\n                cRange[1] = Math.max(cRange[1], index * 4 + 4);\r\n            }\r\n            uploadRange(buffer.vertices, vRange);\r\n            uploadRange(buffer.colors, cRange);\r\n        }\r\n    };\r\n\r\n    function uploadRange (buffer, range) {\r\n        buffer.uploadRange(range[0] * bytesPerFloat32Element,\r\n            (range[1] - range[0]) * bytesPerFloat32Element);\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var shader = null;\r\n\r\n    Modules.prototype.add('edit-interaction-render', function (instance) {\r\n        instance.asset.shader.get('wireframe', function (s) {\r\n            shader = s;\r\n        });\r\n\r\n        var vertices = [], colors = [], count = 0;\r\n        for (var rads = 0; rads < (Math.PI * 2); rads += 0.1) {\r\n            vertices[count * 3 + 0] = Math.sin(rads) * 5;\r\n            vertices[count * 3 + 1] = Math.cos(rads) * 5;\r\n            vertices[count * 3 + 2] = 0;\r\n            colors[count * 4 + 0] = 1;\r\n            colors[count * 4 + 1] = 1;\r\n            colors[count * 4 + 2] = 1;\r\n            colors[count * 4 + 3] = 1;\r\n            count++;\r\n        }\r\n        var circle = GL.Mesh.load({\r\n            vertices: new Float32Array(vertices),\r\n            colors: new Float32Array(colors)\r\n        });\r\n        var bounds = GL.Mesh.load({\r\n            vertices: new Float32Array([\r\n                0.5, 0.5, 0.5, -0.5, 0.5, 0.5, 0.5, -0.5, 0.5, -0.5, -0.5, 0.5,\r\n                0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, -0.5, -0.5, -0.5, -0.5, -0.5,\r\n            ]),\r\n            colors: new Float32Array([\r\n                0.6, 0.6, 0.6, 1, 0.6, 0.6, 0.6, 1, 0.6, 0.6, 0.6, 1, 0.6, 0.6, 0.6, 1,\r\n                0.6, 0.6, 0.6, 1, 0.6, 0.6, 0.6, 1, 0.6, 0.6, 0.6, 1, 0.6, 0.6, 0.6, 1\r\n            ]),\r\n            wireframe: new Uint16Array([\r\n                0, 1, 1, 3, 3, 2, 2, 0,\r\n                4, 5, 5, 7, 7, 6, 6, 4,\r\n                0, 4, 1, 5, 2, 6, 3, 7\r\n            ])\r\n        });\r\n\r\n        var uniforms = {\r\n            u_mvp: mat4.create()\r\n        };\r\n\r\n        instance.surface.interactions.edit.drawBounds = null;\r\n        instance.surface.interactions.edit.onRender = function (surface) {\r\n            var selection = this.selection;\r\n            instance.scene.getObjects().forEach(function (node) {\r\n                var obj = node.data;\r\n\r\n                var wireframe = obj.mesh.cache.get('edit-interaction-render-wireframe');\r\n                var vertices = obj.mesh.cache.get('edit-interaction-render-vertices');\r\n                var drawBounds = instance.surface.interactions.edit.drawBounds;\r\n\r\n                renderObject(surface, wireframe, shader, instance.graphics.gl.LINES);\r\n                renderObject(surface, vertices, shader, instance.graphics.gl.POINTS);\r\n                if (drawBounds !== null)\r\n                    renderBounds(surface, shader, bounds, obj.mesh.bounds, drawBounds);\r\n\r\n                if (!selection.isEmpty()) {\r\n                    var c = selection.getCenter();\r\n                    vec3.transformMat4(c, c, surface.camera.getViewMatrix());\r\n                    vec3.transformMat4(c, c, surface.camera.projection);\r\n                    c[0] = ((c[0] + 1) / 2) * surface.camera.width;\r\n                    c[1] = ((c[1] + 1) / 2) * surface.camera.height;\r\n\r\n                    mat4.identity(uniforms.u_mvp);\r\n                    mat4.translate(uniforms.u_mvp, uniforms.u_mvp, [c[0], c[1], 0]);\r\n                    mat4.multiply(uniforms.u_mvp, surface.camera.ortho, uniforms.u_mvp);\r\n\r\n                    shader.uniforms(uniforms);\r\n                    shader.draw(circle, instance.graphics.gl.LINE_LOOP);\r\n                }\r\n            });\r\n        };\r\n\r\n        var temp = mat4.create();\r\n        function renderObject (surface, mesh, shader, primitive, model, indexBufferName) {\r\n            model = model || mat4.create();\r\n\r\n            surface.camera.getViewMatrix(temp);\r\n            mat4.multiply(temp, surface.camera.projection, temp);\r\n            mat4.multiply(uniforms.u_mvp, temp, model);\r\n\r\n            uniforms.u_model = model;\r\n\r\n            if (shader) {\r\n                shader.uniforms(uniforms);\r\n                if (mesh instanceof Math.HalfEdgeMesh) {\r\n                    if (mesh) shader.draw(mesh, primitive, indexBufferName);\r\n                } else {\r\n                    shader.draw(mesh, primitive, indexBufferName);\r\n                }\r\n            }\r\n        }\r\n\r\n        var boundsModel = mat4.create();\r\n        function renderBounds (surface, shader, bounds, octree, recursive) {\r\n            updateBoundsModel(boundsModel, octree);\r\n            renderObject(surface, bounds, shader, instance.graphics.gl.LINES, boundsModel, 'wireframe');\r\n            if (recursive && octree.children)\r\n                for (var i = 0; i < octree.children.length; i++)\r\n                    renderBounds(surface, shader, bounds, octree.children[i], instance.graphics.gl.LINES);\r\n        }\r\n\r\n        function updateBoundsModel (model, octree) {\r\n            mat4.identity(model);\r\n            var scale = [0, 0, 0], position = [0, 0, 0];\r\n            vec3.lerp(position, octree.aabb.min, octree.aabb.max, 0.5);\r\n            mat4.translate(model, model, position);\r\n            vec3.sub(scale, octree.aabb.max, octree.aabb.min);\r\n            mat4.scale(model, model, scale);\r\n        }\r\n    }, ['edit-interaction', 'shader', 'edit-interaction-render-cache']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-selection', function (instance) {\r\n        instance.surface.interactions.edit.selection = {\r\n            objects: {},\r\n            addAll: function (object) {\r\n                var result = [];\r\n                var selection = this;\r\n                object.mesh.vertices.forEach(function (vertex) {\r\n                    toggleVertex(selection, object, vertex);\r\n                    result.push(vertex);\r\n                });\r\n                return result;\r\n            },\r\n            add: function (ray, object, camera) {\r\n                var position = camera.getPosition();\r\n                var selection = this;\r\n\r\n                var result = {\r\n                    vertex: null,\r\n                    face: null\r\n                };\r\n\r\n                var vertexSelectionMargin = camera.distance / 200;\r\n                var vertices = object.mesh.bounds.getCollidingItems(ray);\r\n                var rayVertices = vertices.filter(function (vertex) {\r\n                    return Math.geo.rayPointDistance(ray.start, ray.direction, vertex) <= vertexSelectionMargin;\r\n                });\r\n                var vertex = Math.geo.findClosestPoint(position, rayVertices);\r\n                if (vertex) result.vertex = vertex;\r\n\r\n                var uniqueFaces = getFacesFromVertices(vertices);\r\n                uniqueFaces = uniqueFaces.filter(function (face) {\r\n                    return Math.geo.rayFaceCollision(ray.start, ray.direction,\r\n                        face.getVertices());\r\n                });\r\n                var closestFace = Math.geo.findClosestFace(position, uniqueFaces);\r\n                if (closestFace) result.face = closestFace;\r\n\r\n                var vertexDistance = result.vertex ? Math.geo.pointPointDistance(position, result.vertex) : Number.MAX_VALUE;\r\n                var faceDistance = result.face ? Math.geo.pointPointDistance(position, result.face.computeCenter()) : Number.MAX_VALUE;\r\n\r\n                if (faceDistance > vertexDistance) {\r\n                    result.face = null;\r\n                    toggleVertex(selection, object, result.vertex);\r\n                } else {\r\n                    result.vertex = null;\r\n                    toggleFace(selection, object, result.face);\r\n                }\r\n\r\n                return result;\r\n            },\r\n            addFace: function (object, face) {\r\n                toggleFace(this, object, face);\r\n            },\r\n            getCenter: function () {\r\n                //TODO: take into account multiple objects\r\n                var name = Object.keys(this.objects)[0];\r\n                return Math.geo.computePointsCenter(this.objects[name].vertices);\r\n            },\r\n            getNormal: function () {\r\n                var normal = vec3.create();\r\n                for (var name in this.objects) {\r\n                    var obj = this.objects[name];\r\n                    for (var i = 0; i < obj.vertices.length; i++) {\r\n                        var vertex = obj.vertices[i];\r\n                        var n = vertex._halfEdge.computeNormal();\r\n                        vec3.add(normal, normal, n);\r\n                    }\r\n                }\r\n                vec3.normalize(normal, normal);\r\n                return normal;\r\n            },\r\n            clear: function () {\r\n                for (var name in this.objects) {\r\n                    var selectedObj = this.objects[name];\r\n                    var sceneObj = instance.scene.getObjectByName(name);\r\n                    for (var i = 0; i < selectedObj.faces.length; i++) {\r\n                        var face = selectedObj.faces[i];\r\n                        if (face._selected) delete face._selected;\r\n                    }\r\n                    for (i = 0; i < selectedObj.vertices.length; i++) {\r\n                        var vertex = selectedObj.vertices[i];\r\n                        if (vertex._selected) delete vertex._selected;\r\n                    }\r\n                    sceneObj.mesh.onVerticesChange(selectedObj.vertices);\r\n                }\r\n                this.objects = {};\r\n            },\r\n            isEmpty: function () {\r\n                return !Object.keys(this.objects).length;\r\n            }\r\n        };\r\n\r\n    }, ['edit-interaction']);\r\n\r\n    function toggleVertex (selection, object, vertex) {\r\n        if (vertex) {\r\n            if (toggle(selection, object, vertex, 'vertices')) {\r\n                vertex._selected = true;\r\n                vertex._halfEdge.getFaces().forEach(function (face) {\r\n                    var selectedVertices = selection.objects[object.name].vertices;\r\n                    var faceVertices = face.getVertices();\r\n                    var allSelected = true;\r\n                    faceVertices.forEach(function (vertex) {\r\n                        allSelected &= selectedVertices.includes(vertex);\r\n                    });\r\n                    if (allSelected && !face._selected)\r\n                        toggleFace(selection, object, face);\r\n                });\r\n            } else delete vertex._selected;\r\n        }\r\n    }\r\n\r\n    function toggleEdge (selection, object, edge) {\r\n        if (edge) {\r\n            if (toggle(selection, object, edge, 'edges')) {\r\n                edge._selected = true;\r\n            } else delete edge._selected;\r\n        }\r\n    }\r\n\r\n    function toggleFace (selection, object, face) {\r\n        if (face) {\r\n            if (toggle(selection, object, face, 'faces')) {\r\n                face._selected = true;\r\n                face.getVertices().forEach(function (vertex) {\r\n                    if (!vertex._selected)\r\n                        toggleVertex(selection, object, vertex);\r\n                });\r\n            } else delete face._selected;\r\n        }\r\n    }\r\n\r\n    function toggle (selection, object, item, arrayName) {\r\n        initObjectIfNeeded(selection, object);\r\n        var array = selection.objects[object.name][arrayName];\r\n        var index = array.indexOf(item);\r\n        if (index >= 0) {\r\n            array.splice(index, 1);\r\n            delObjectIfNeeded(selection, object);\r\n            return false;\r\n        } else {\r\n            array.push(item);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function initObjectIfNeeded (selection, object) {\r\n        var name = object.name;\r\n        if (!selection.objects[name]) {\r\n            selection.objects[name] = {\r\n                faces: [],\r\n                edges: [],\r\n                vertices: []\r\n            };\r\n        }\r\n    }\r\n\r\n    function delObjectIfNeeded (selection, object) {\r\n        var name = object.name;\r\n        if (selection.objects[name]) {\r\n            var objSelection = selection.objects[name];\r\n            if (!objSelection.vertices.length &&\r\n                !objSelection.vertices.length &&\r\n                !objSelection.vertices.length)\r\n                delete selection.objects[name];\r\n        }\r\n    }\r\n\r\n    function getEdgesFromVertices (vertices) {\r\n        var edges = [];\r\n        vertices.forEach(function (vertex) {\r\n            vertex._halfEdge.outEdges.forEach(function (edge) {\r\n                if (edges.indexOf(edge) === -1)\r\n                    edges.push(edge);\r\n            });\r\n        });\r\n        return edges;\r\n    }\r\n\r\n    function getFacesFromVertices (vertices) {\r\n        var faces = [];\r\n        vertices.forEach(function (vertex) {\r\n            vertex._halfEdge.getFaces().forEach(function (face) {\r\n                if (faces.indexOf(face) === -1)\r\n                    faces.push(face);\r\n            });\r\n        });\r\n        return faces;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction', function (instance) {\r\n        var mouseDownCoords = vec2.create();\r\n\r\n        instance.surface.interactions.edit = {\r\n            actions: {},\r\n            action: null,\r\n            isMouseDown: false,\r\n            isShiftDown: false,\r\n            isControlDown: false,\r\n            lastCoords: [0, 0],\r\n            onMouseMove: function (event, realCoords) {\r\n                vec2.copy(this.lastCoords, realCoords);\r\n                if (this.isMouseDown && !this.action) {\r\n                    var delta2d = vec2.sub(vec2.create(), mouseDownCoords, realCoords);\r\n                    if (vec2.length(delta2d) > 10) this.setAction('move', event);\r\n                }\r\n                this.runAction('onMouseMove', event, realCoords);\r\n            },\r\n            onMouseUp: function (event, realCoords) {\r\n                if (event.which === 1) this.isMouseDown = false;\r\n                this.runAction('onMouseUp', event, realCoords);\r\n            },\r\n            onMouseDown: function (event, realCoords) {\r\n                if (!this.action) {\r\n                    var canvas = event.target;\r\n                    var data = instance.surface.map[canvas.id];\r\n\r\n                    if (event.which === 1) {\r\n                        this.isMouseDown = true;\r\n\r\n                        var ray = data.camera.getRay(null, realCoords,\r\n                            [canvas.width, canvas.height]);\r\n\r\n                        var selection = this.selection;\r\n                        var shiftDown = this.isShiftDown;\r\n                        instance.scene.getObjects().forEach(function (node) {\r\n                            if (!shiftDown) selection.clear();\r\n                            var result = selection.add(ray, node.data, data.camera);\r\n                            if (result.vertex)\r\n                                node.data.mesh.cache.onVerticesChange([result.vertex]);\r\n                            if (result.face)\r\n                                node.data.mesh.cache.onVerticesChange(result.face.getVertices());\r\n                        });\r\n                        return false;\r\n                    }\r\n                }\r\n                this.runAction('onMouseDown', event, realCoords);\r\n                return true;\r\n            },\r\n            onKeyDown: function (event, realCoords) {\r\n                this.isShiftDown = event.shiftKey;\r\n                this.isShiftDown = event.ctrlKey;\r\n                if (!this.action) {\r\n                    if (event.key === 'a') this.setAction('all', event);\r\n                    else if (event.key === 'g') this.setAction('move', event);\r\n                    else if (event.key === 's') this.setAction('scale', event);\r\n                    else if (event.key === 'r') this.setAction('rotate', event);\r\n                    else if (event.key === 'f') this.setAction('face', event);\r\n                    else if (event.keyCode === 46) this.setAction('delete', event);\r\n                    else if (event.key === 'e') {\r\n                        this.setAction('extrude', event);\r\n                        this.setAction('move', event);\r\n                    } else if (event.key === 'b') {\r\n                        if (this.drawBounds === null) this.drawBounds = false;\r\n                        else if (this.drawBounds === false) this.drawBounds = true;\r\n                        else if (this.drawBounds === true) this.drawBounds = null;\r\n                    }\r\n                } else {\r\n                    if (event.keyCode === 13) this.action = null;\r\n                    else this.runAction('onKeyDown', event, realCoords);\r\n                }\r\n            },\r\n            onKeyUp: function (event, realCoords) {\r\n                this.isShiftDown = event.shiftKey;\r\n                this.isShiftDown = event.ctrlKey;\r\n                this.runAction('onKeyUp', event, realCoords);\r\n            },\r\n            setAction: function (name, event) {\r\n                if (name && this.actions[name]) {\r\n                    this.action = name;\r\n                    this.runAction('init', event);\r\n                }\r\n            },\r\n            runAction : function (callbackName, event) {\r\n                if (this.action && this.actions[this.action]) {\r\n                    var action = this.actions[this.action];\r\n                    var callback = action[callbackName];\r\n                    if (callback) callback.call(action, this, event);\r\n                }\r\n            }\r\n        };\r\n\r\n        instance.events.on('surface.create', function (surface) {\r\n            instance.surface.setInteraction(surface, 'edit');\r\n        });\r\n\r\n    }, ['surface-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Graphics = function (instance) {\r\n        this.gl = GL.create({\r\n            height: screen.height,\r\n            width: screen.width\r\n        });\r\n        this.gl.animate();\r\n        this.gl.ondraw = function () {\r\n            var renderTargets = document.querySelectorAll('canvas');\r\n            for (var i = 0; i < renderTargets.length; i++)\r\n                drawRenderTarget(instance, renderTargets[i]);\r\n        };\r\n        this.gl.clearColor(0.349, 0.349, 0.349, 1);\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n\r\n        console.info(this.gl.getParameter(this.gl.VERSION));\r\n        console.info(this.gl.getParameter(this.gl.SHADING_LANGUAGE_VERSION));\r\n    };\r\n\r\n    Modules.prototype.add('graphics', function (instance) {\r\n        instance.graphics = new Graphics(instance);\r\n    });\r\n\r\n    function drawRenderTarget (instance, canvas) {\r\n        var width  = canvas.clientWidth, height = canvas.clientHeight;\r\n        var data = instance.surface.map[canvas.id];\r\n        var gl = instance.graphics.gl;\r\n\r\n        var c = instance.graphics.gl.canvas;\r\n        gl.viewport(0, c.height - height, width, height);\r\n\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        var mainRender = instance.surface.getRender(canvas);\r\n        var surfaceRender = instance.surface.onRender;\r\n        if (mainRender) mainRender(data);\r\n        if (surfaceRender) surfaceRender(canvas, data);\r\n\r\n        var context = canvas.getContext('2d');\r\n        if (context) context.drawImage(c, 0, 0, width, height, 0, 0, width, height);\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('main-menu', function (instance) {\r\n        var container = document.querySelector(instance.options.container.selector);\r\n\r\n        var mainMenu = document.createElement('div');\r\n        mainMenu.className = 'main-menu';\r\n\r\n        mainMenu.innerHTML = 'Main Menu -- ';\r\n        mainMenu.innerHTML += 'Item1';\r\n        mainMenu.innerHTML += 'Item2';\r\n        mainMenu.innerHTML += 'Item3';\r\n\r\n        container.insertBefore(mainMenu, container.firstChild);\r\n    });\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var objectCount = 0;\r\n\r\n    Modules.prototype.add('scene', function (instance) {\r\n        instance.scene = TreeNode.extend();\r\n\r\n        instance.scene.addObject = function (info) {\r\n            if (!info.primitive) info.primitive = instance.graphics.gl.TRIANGLES;\r\n            if (!info.model) info.model = mat4.create();\r\n            if (!info.type) info.type = 'object';\r\n            if (!info.name) info.name = 'object_' + (objectCount++);\r\n            this.add(info);\r\n        };\r\n\r\n        instance.scene.getObjectByName = function (name) {\r\n            return getObjectByName(this, name);\r\n        };\r\n\r\n        instance.scene.getObjects = function () {\r\n            return this.dfs(function (node) {\r\n                return node.data.type === 'object';\r\n            });\r\n        };\r\n\r\n        instance.asset.mesh.get('cube', function (mesh) {\r\n            instance.scene.addObject({mesh: mesh});\r\n        });\r\n    }, ['graphics']);\r\n\r\n    function getObjectByName (rootNode, name) {\r\n        for (var i = 0; i < rootNode.children.length; i++) {\r\n            var child = rootNode.children[i];\r\n            if (child.data.name === name) {\r\n                return child.data;\r\n            } else {\r\n                var node = getObjectByName(child, name);\r\n                if (node) return node.data;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n})());\r\n"]}