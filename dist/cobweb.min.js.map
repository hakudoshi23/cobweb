{"version":3,"sources":["ajax.js","array.js","html.js","obj.js","tree.js","events.js","logger.js","cobweb.js","modules.js","asset/shader.js","math/camera.js","math/octree.js","math/plane.js","math/ray.js","pane/pane-header.js","pane/pane-types.js","pane/panes.js","math/geometry/geometry.js","math/halfEdge/halfEdge-cube.js","math/halfEdge/halfEdge-mesh-cache.js","math/halfEdge/halfEdge-mesh.js","pane/surface/surface.js","pane/surface/interaction/common-interaction.js","pane/surface/interaction/edit-interaction-render.js","pane/surface/interaction/edit-interaction-select.js","pane/surface/interaction/edit-interaction.js","pane/surface/interaction/object-interaction.js","pane/surface/interaction/surface-interaction.js","pane/surface/render/render-solid.js","pane/surface/render/surface-render.js","graphic.js","scene.js"],"names":["ajax","options","Object","assign","defaultAjaxOptions","xhttp","XMLHttpRequest","onreadystatechange","this","readyState","status","success","response","error","method","params","objToParams","data","urlWithParams","url","open","async","send","get","Ajax","getJSON","JSON","parse","post","obj","key","encodeURIComponent","slice","window","safeExtend","prototype","property","value","Array","a","concat","i","length","j","splice","callback","s4","Math","floor","random","toString","substring","HTMLElement","oldClassNames","newClassNames","arguments","className","trim","replace","split","unique","join","queryClassNames","currentClassNames","index","name","indexOf","removeClassNames","removeEach","forEach","attr","__data_cache","WeakMap","elAttrs","undefined","set","setAttribute","getAttribute","removeAttribute","Element","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","matches","document","ownerDocument","querySelectorAll","item","query","parentElement","current","clientHeight","style","height","clientWidth","width","guid","overlap","querySelector","newObj","hasOwnProperty","clone","target","varArgs","TypeError","to","nextSource","nextKey","call","defaults","TreeNode","parent","children","isRoot","add","child","constructor","push","remove","dfs","check","out","bfs","extend","_TreeNode","create","EventHandler","isDebug","listeners","trigger","console","debug","apply","on","off","array","reset","own","keys","Logger","instance","handlers","addHandler","level","ALL","args","DEBUG","INFO","info","WARNING","warn","ERROR","log","warning","tmp","levelHandlers","handler","removeHandler","NONE","defaultOptions","container","selector","Cobweb","Error","addClass","logger","events","modules","Modules","onLoadedAll","names","topologicalSort","sortedNames","module","dependencies","depName","nextName","candidates","getInitialCandidates","dependant","dependantName","allDependenciesMet","loadedUntilNow","runCallback","callbacks","all","init","ex","dependencyModule","moduleName","asset","shader","firstSource","Shader","Camera","center","rotation","distance","projection","mat4","getViewMatrix","view","eye","getPosition","lookAt","getUpDirection","vec3","rotateX","rotateY","getDirection","direction","sub","normalize","getRay","ray","canvasCoords","canvasSize","Ray","start","auxMat","multiply","invert","transformMat4","up","vRotation","PI","computeLocalAxis","left","forward","cross","isContained","aabb","min","max","updateRootBounds","items","maxItems","maxDepth","OctreeNode","depth","root","getAllItems","allItems","addItems","result","addItem","contains","splitIfNeeded","updateDimensions","pop","removeItem","mergeIfNeeded","getCollidingNodes","nodes","collidingPoint","geo","rayAABBCollision","getCollidingItems","node","parentAabb","half","ref","Octree","_addItems","growIfNeeded","newItems","shrinkIfNeeded","Plane","point","normal","fromPoints","b","onCreateCallback","pane","header","createHeader","appendChild","div","createElement","oldPane","newPane","oldType","attrData","setType","types","typeCallbacks","onPaneType","paneHeader","onCreateHeader","dataset","paneType","onPaneCreate","onPaneSplit","origin","onPaneResize","internal","Pane","separator","size","getBarycentricCoordinates","p1","p2","p3","v0","getVectorFromPoints","v1","v2","d00","dot","d01","d11","d20","d21","denom","getNormal","v3","tmp1","tmp2","output","rayFaceCollision","vertices","triangles","triangulateFace","triangle","rayTriangleCollision","triangleNormal","rayPlaneCollision","bary","planePoint","planeNormal","numer","abs","t","scale","minB","maxB","whichPlane","inside","quadrant","Float32Array","maxT","candidatePlane","copy","Number","MAX_VALUE","rayPointDistance","aux","len","pointPointDistance","triangulated","computePointsCenter","points","findClosestPointIndex","position","closestIndex","newDistance","findClosestPoint","findClosestFace","faces","centers","map","face","computeCenter","cube","mesh","HalfEdgeMesh","vhandle","addVertices","face_vhandles","addFace","HalfEdgeCube","superConstructor","cachedHalfEdgeMesh","halfEdgeMesh","cache","entry","builder","onCreate","onClean","onVertexChange","vertex","buildEdge","end","edge","HalfEdgeFace","opposite","findOppositeEdge","next","_halfEdge","outEdges","opposites","filter","he","VertexGetFaces","VertexComputeNormal","getFaces","computeRawNormal","computeNormal","bounds","halfEdges","isArray","ownIndex","he1","he2","last","prev","clear","halfEdge","getEdges","getVertices","getVerticesTriangulated","triplet","onSurfacePaneType","canvas","id","surfaceIndex","surface","camera","updateCanvasSize","onCreateSurfaceHeader","label","innerHTML","context","getContext","headerHeight","imgData","createImageData","buffer","Uint8Array","perspective","DEG2RAD","addEventListener","event","surfaces","parentNode","combine","originalRotation","delta","upNormalMouseDown","clampRotations","getCoordsDelta","initial","rotations","pi2","mouseDownCoords","interactions","common","onMouseWheel","realCoords","wheelDelta","detail","onMouseMove","moving","onMouseDown","which","equals","onMouseUp","onClick","onRender","uniforms","u_mvp","temp","edit","scene","getObjects","model","wireframeBuilder","draw","graphics","gl","LINES","buffers","colors","indices","lines","Uint16Array","GL","Mesh","load","vertexBuffers","dirty","color","_selected","upload","toggleVertex","selection","object","toggle","originalPosition","selectedVertices","objects","faceVertices","allSelected","includes","toggleFace","arrayName","initObjectIfNeeded","delObjectIfNeeded","edges","objSelection","getFacesFromVertices","rayVertices","uniqueFaces","closestFace","getCenter","selectedObj","sceneObj","getObjectByName","isEmpty","isMouseDown","initialCoords","currentRay","initialRay","cameraDirection","hitPointInitial","hitPointCurrent","selectionCenter","setInteraction","isHit","hitPoint","testRayBBox","bounding","selected","getLocalCoordinates","type","layerX","layerY","onSurfaceEvent","getInteractionCallbacks","onContextMenu","preventDefault","interaction","interactionName","keepRunning","oncontextmenu","onmousewheel","onmousemove","onmousedown","onmouseup","onclick","initialValue","renderObject","u_model","meshKey","meshBuilder","primitive","grid","renders","solid","lightDirection","u_lightvector","setRender","u_color","normals","render","getRender","renderName","panes","drawRenderTarget","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","viewport","mainRender","readPixels","RGBA","UNSIGNED_BYTE","putImageData","Graphics","screen","animate","ondraw","renderTargets","clearColor","enable","DEPTH_TEST","rootNode","objectCount","lightCount","addObject","TRIANGLES","addLight","getLights"],"mappings":"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","file":"cobweb.min.js","sourcesContent":["((function(){\r\n    'use strict';\r\n\r\n    var defaultAjaxOptions = {\r\n        method: 'GET',\r\n        url: '',\r\n        data: {},\r\n        async: true,\r\n        success: null,\r\n        error: null\r\n    };\r\n\r\n    function ajax (options) {\r\n        options = Object.assign({}, defaultAjaxOptions, options);\r\n        var xhttp = new XMLHttpRequest();\r\n        xhttp.onreadystatechange = function() {\r\n            if (this.readyState == 4) {\r\n                if (this.status == 200) {\r\n                    if (options.success) options.success(this.response);\r\n                } else {\r\n                    if (options.error) error.success(this.response);\r\n                }\r\n            }\r\n        };\r\n        if (options.method === 'GET') {\r\n            var params = objToParams(options.data);\r\n            var urlWithParams = options.url + (params ? '?' + params : '');\r\n            xhttp.open(options.method, urlWithParams, options.async);\r\n            xhttp.send();\r\n        } else if (options.method === 'POST') {\r\n            xhttp.open(options.method, options.url, options.async);\r\n            xhttp.send(options.data);\r\n        }\r\n        return xhttp;\r\n    }\r\n\r\n    function get (url, data, success) {\r\n        if (!success) {\r\n            success = data;\r\n            data = null;\r\n        }\r\n        return Ajax.ajax({\r\n            url: url,\r\n            data: data,\r\n            success: success,\r\n            method: 'GET'\r\n        });\r\n    }\r\n\r\n    function getJSON (url, data, success) {\r\n        if (!success) {\r\n            success = data;\r\n            data = null;\r\n        }\r\n        return Ajax.ajax({\r\n            url: url,\r\n            data: data,\r\n            success: function (response) {\r\n                success(JSON.parse(response));\r\n            },\r\n            method: 'GET'\r\n        });\r\n    }\r\n\r\n    function post (url, data, success) {\r\n        if (!success) {\r\n            success = data;\r\n            data = null;\r\n        }\r\n        return Ajax.ajax({\r\n            url: url,\r\n            data: data,\r\n            success: success,\r\n            method: 'POST'\r\n        });\r\n    }\r\n\r\n    window.Ajax = {\r\n        ajax: ajax,\r\n        get: get,\r\n        getJSON: getJSON,\r\n        post: post\r\n    };\r\n\r\n    function objToParams (obj) {\r\n        var params = '';\r\n        for (var key in obj) {\r\n            var nextParam = key + '=' + encodeURIComponent(obj[key]);\r\n            params += '&' + nextParam;\r\n        }\r\n        return params.slice(1);\r\n    }\r\n})());\r\n","((function(){\r\n    'use strict';\r\n\r\n    safeExtend(Array.prototype, 'unique', function() {\r\n        var a = this.concat();\r\n        for(var i = 0; i < a.length; ++i)\r\n            for(var j = i + 1; j < a.length; ++j)\r\n                if(a[i] === a[j]) a.splice(j--, 1);\r\n        return a;\r\n    });\r\n\r\n    safeExtend(Array.prototype, 'forEach', function(callback) {\r\n        for (var i = 0; i < this.length; i++)\r\n            callback(this[i], i, this);\r\n    });\r\n\r\n    function safeExtend(prototype, property, value) {\r\n        if(!prototype[property]) prototype[property] = value;\r\n    }\r\n})());\r\n","((function(){\r\n    'use strict';\r\n\r\n    safeExtend(HTMLElement.prototype, 'addClass', function () {\r\n        var oldClassNames, newClassNames;\r\n        for(var i in arguments){\r\n            oldClassNames = !this.className ? [] : this.className.trim().replace(/\\s+/g, ' ').split(' ');\r\n            newClassNames = !arguments[i] ? [] : arguments[i].trim().replace(/\\s+/g, ' ').split(' ');\r\n            this.className = oldClassNames.concat(newClassNames).unique().join(' ');\r\n        }\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'hasClass', function () {\r\n        var queryClassNames, currentClassNames = !this.className ? [] : this.className.trim().replace(/\\s+/g, ' ').split(' ');\r\n        for(var i in arguments){\r\n            queryClassNames = !arguments[i] ? [] : arguments[i].trim().replace(/\\s+/g, ' ').split(' ');\r\n            for (var index = 0; index < queryClassNames.length; index++) {\r\n                var name = queryClassNames[index];\r\n                if (currentClassNames.indexOf(name) == -1)\r\n                    return false;\r\n            }\r\n        }\r\n        return true;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'removeClass', function () {\r\n        var index = 0, currentClassNames, removeClassNames;\r\n        var removeEach = function (name) {\r\n            index = currentClassNames.indexOf(name);\r\n            if (index != -1)\r\n                currentClassNames.splice(index, 1);\r\n        };\r\n        for(var i in arguments){\r\n            currentClassNames = !this.className ? [] : this.className.trim().replace(/\\s+/g, ' ').split(' ');\r\n            removeClassNames = !arguments[i] ? [] : arguments[i].trim().replace(/\\s+/g, ' ').split(' ');\r\n            removeClassNames.forEach(removeEach);\r\n            this.className = currentClassNames.unique().join(' ');\r\n        }\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'data', function (attr, value) {\r\n        if (!window.__data_cache) window.__data_cache = new WeakMap();\r\n        var elAttrs = window.__data_cache.get(this) || {};\r\n        if (value !== undefined) {\r\n            elAttrs[attr] = value;\r\n            window.__data_cache.set(this, elAttrs);\r\n        } else {\r\n            if (attr) return elAttrs && elAttrs[attr];\r\n            else return elAttrs;\r\n        }\r\n        return this;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'setData', function (data) {\r\n        if (!window.__data_cache) window.__data_cache = new WeakMap();\r\n        window.__data_cache.set(this, data);\r\n        return this;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'attr', function (name, value) {\r\n        if (value !== undefined)\r\n            this.setAttribute(name, value);\r\n        else if (value === null)\r\n            this.removeAttribute(name);\r\n        else\r\n            return this.getAttribute(name);\r\n        return this;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'attrData', function (name, value) {\r\n        return this.attr('data-' + name, value);\r\n    });\r\n\r\n    safeExtend(Element.prototype, 'matches',\r\n        Element.prototype.matchesSelector ||\r\n        Element.prototype.mozMatchesSelector ||\r\n        Element.prototype.msMatchesSelector ||\r\n        Element.prototype.oMatchesSelector ||\r\n        Element.prototype.webkitMatchesSelector ||\r\n        function(s) {\r\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\r\n                i = matches.length;\r\n            while (--i >= 0 && matches.item(i) !== this) {}\r\n            return i > -1;\r\n        }\r\n    );\r\n\r\n    safeExtend(HTMLElement.prototype, 'parent', function (query) {\r\n        if (!query) return this.parentElement;\r\n        var current = this.parentElement;\r\n        while (!current.matches(query))\r\n            current = current.parentElement;\r\n        return current;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'height', function () {\r\n        if (arguments.length == 1) {\r\n            var value = arguments[0];\r\n            if (typeof value === 'number')\r\n                this.style.height = value + 'px';\r\n            else\r\n                this.style.height = value;\r\n        } else\r\n            return this.clientHeight;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'width', function () {\r\n        if (arguments.length == 1) {\r\n            var value = arguments[0];\r\n            if (typeof value === 'number')\r\n                this.style.width = value + 'px';\r\n            else\r\n                this.style.width = value;\r\n        } else\r\n            return this.clientWidth;\r\n    });\r\n\r\n    safeExtend(window, 'guid', function () {\r\n        return 'GUID-' + s4() + '-' + s4() + '-' + s4();\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'guid', function () {\r\n        var guid = null, overlap = null;\r\n        do {\r\n            guid = window.guid();\r\n            overlap = document.querySelector('#' + guid);\r\n        } while(overlap);\r\n        this.attr('id', guid);\r\n        return guid;\r\n    });\r\n\r\n    function safeExtend(prototype, property, value) {\r\n        if(!prototype[property]) prototype[property] = value;\r\n    }\r\n\r\n    function s4() {\r\n        return Math.floor((1 + Math.random()) * 0x10000)\r\n            .toString(16).substring(1);\r\n    }\r\n})());\r\n","((function(){\r\n    'use strict';\r\n\r\n    safeExtend(Object, 'clone', function (obj) {\r\n        var newObj = {};\r\n        for (var property in obj)\r\n            if (obj.hasOwnProperty(property)) {\r\n                var value = obj[property];\r\n                if (typeof value === 'object')\r\n                    newObj[property] = Object.clone(obj[property]);\r\n                else\r\n                    newObj[property] = obj[property];\r\n            }\r\n        return newObj;\r\n    });\r\n\r\n    safeExtend(Object, 'assign', function(target, varArgs) {\r\n        if (target === null)\r\n            throw new TypeError('Cannot convert undefined or null to object');\r\n        var to = Object(target);\r\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n        for (var index = 1; index < arguments.length; index++) {\r\n            var nextSource = arguments[index];\r\n            if (nextSource !== null) {\r\n                for (var nextKey in nextSource) {\r\n                    if (hasOwnProperty.call(nextSource, nextKey)) {\r\n                        to[nextKey] = nextSource[nextKey];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return to;\r\n    });\r\n\r\n    safeExtend(Object, 'extend', function(options, defaults) {\r\n        return Object.assign({}, defaults, options);\r\n    });\r\n\r\n    function safeExtend(prototype, property, value) {\r\n        if(!prototype[property]) prototype[property] = value;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var TreeNode = function (parent, data) {\r\n        this.parent = parent || null;\r\n        this.data = data || {};\r\n        this.children = [];\r\n    };\r\n\r\n    window.TreeNode = TreeNode;\r\n\r\n    TreeNode.prototype.isRoot = function () {\r\n        return !this.parent;\r\n    };\r\n\r\n    TreeNode.prototype.add = function (data) {\r\n        var child = new this.constructor(this, data);\r\n        this.children.push(child);\r\n        return child;\r\n    };\r\n\r\n    TreeNode.prototype.remove = function (index) {\r\n        this.children.slice(index, 1);\r\n        return this;\r\n    };\r\n\r\n    TreeNode.prototype.dfs = function (check) {\r\n        var out = [];\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            if (!check || (check && check(this.children[i])))\r\n                out.push(this.children[i]);\r\n            out.concat(this.children[i].dfs(check));\r\n        }\r\n        return out;\r\n    };\r\n\r\n    TreeNode.prototype.bfs = function (check) {\r\n        var out = [], i;\r\n        for (i = 0; i < this.children.length; i++)\r\n            if (!check || (check && check(this.children[i])))\r\n                out.push(this.children[i]);\r\n        for (i = 0; i < this.children.length; i++)\r\n            out.concat(this.children[i].bfs(check));\r\n        return out;\r\n    };\r\n\r\n    TreeNode.extend = function () {\r\n        var _TreeNode = function (parent, data) {\r\n            TreeNode.call(this, parent, data);\r\n        };\r\n        _TreeNode.prototype = Object.create(TreeNode.prototype);\r\n        _TreeNode.prototype.constructor = _TreeNode;\r\n        return new _TreeNode();\r\n    };\r\n})());\r\n","((function() {\r\n    'use strict';\r\n\r\n    var EventHandler = function (isDebug) {\r\n        this.isDebug = !!isDebug;\r\n        this.listeners = {};\r\n    };\r\n\r\n    EventHandler.prototype.trigger = function() {\r\n        var name = arguments[0];\r\n        var listeners = this.listeners[name] || [];\r\n        Array.prototype.splice.call(arguments, 0, 1);\r\n        if (this.isDebug) console.debug(name, arguments);\r\n        for (var i = 0; i < listeners.length; i++)\r\n            listeners[i].apply(null, arguments);\r\n    };\r\n\r\n    EventHandler.prototype.on = function(name, callback) {\r\n        if (!this.listeners[name]) this.listeners[name] = [];\r\n        this.listeners[name].push(callback);\r\n    };\r\n\r\n    EventHandler.prototype.off = function(name) {\r\n        delete this.listeners[name];\r\n    };\r\n\r\n    EventHandler.prototype.off = function(name, callback) {\r\n        if (this.listeners[name]) {\r\n            var array = this.listeners[name];\r\n            if (array.indexOf(callback) > -1) array.splice(index, 1);\r\n        }\r\n    };\r\n\r\n    EventHandler.prototype.reset = function() {\r\n        var own = this;\r\n        Object.keys(this.listeners).forEach(function(key) {\r\n            delete own.listeners[key];\r\n        });\r\n    };\r\n\r\n    window.EventHandler = EventHandler;\r\n})());\r\n","/* jshint loopfunc:true */\r\n\r\n((function(){\r\n    'use strict';\r\n\r\n    var Logger = function (instance) {\r\n        this.handlers = [];\r\n\r\n        this.addHandler(this.level.ALL, function (level, args) {\r\n            if (Logger.prototype.level.DEBUG === level) {\r\n                console.debug.apply(this, args);\r\n            } else if (Logger.prototype.level.INFO === level) {\r\n                console.info.apply(this, args);\r\n            } else if (Logger.prototype.level.WARNING === level) {\r\n                console.warn.apply(this, args);\r\n            } else if (Logger.prototype.level.ERROR === level) {\r\n                console.error.apply(this, args);\r\n            }\r\n        });\r\n    };\r\n\r\n    Logger.prototype.debug = function () {\r\n        this.log(Logger.prototype.level.DEBUG, arguments);\r\n    };\r\n\r\n    Logger.prototype.info = function () {\r\n        this.log(Logger.prototype.level.INFO, arguments);\r\n    };\r\n\r\n    Logger.prototype.warning = function () {\r\n        this.log(Logger.prototype.level.WARNING, arguments);\r\n    };\r\n\r\n    Logger.prototype.error = function () {\r\n        this.log(Logger.prototype.level.ERROR, arguments);\r\n    };\r\n\r\n    Logger.prototype.log = function (level, args) {\r\n        var tmp = level;\r\n        var levelHandlers = this.handlers[tmp] || [];\r\n        while (tmp >= 0) {\r\n            levelHandlers.forEach(function (handler) {\r\n                handler(level, args);\r\n            });\r\n            levelHandlers = this.handlers[--tmp] || [];\r\n        }\r\n    };\r\n\r\n    Logger.prototype.addHandler = function (level, callback) {\r\n        if (!this.handlers[level])\r\n            this.handlers[level] = [];\r\n        this.handlers[level].push(callback);\r\n    };\r\n\r\n    Logger.prototype.removeHandler = function (level, callback) {\r\n        var levelHandlers = this.handlers[level];\r\n        if (levelHandlers) {\r\n            var index = levelHandlers.indexOf(callback);\r\n            if (index > -1)\r\n                levelHandlers.splice(index, 1);\r\n        }\r\n    };\r\n\r\n    Logger.prototype.level = {\r\n        ALL: 0,\r\n        DEBUG: 1,\r\n        INFO: 2,\r\n        WARNING: 3,\r\n        ERROR: 4,\r\n        NONE: 5,\r\n    };\r\n\r\n    window.Logger = Logger;\r\n})());\r\n","(function(){\r\n    'use strict';\r\n\r\n    var defaultOptions = {\r\n        container: {\r\n            selector: '#cobweb'\r\n        }\r\n    };\r\n\r\n    var Cobweb = function (options) {\r\n        this.options = Object.assign({}, defaultOptions, options);\r\n        var instance = this;\r\n\r\n        this.container = document.querySelector(this.options.container.selector);\r\n        if (!this.container)\r\n            throw new Error('Invalid container selector: \\'' +\r\n                this.options.container.selector + '\\'');\r\n        this.container.addClass('cb-container');\r\n        this.container.data('instance', this);\r\n\r\n        this.logger = new Logger(this, true);\r\n        this.events = new EventHandler(true);\r\n        this.modules = new Modules([this], {\r\n            onLoadedAll: function (names) {\r\n                instance.events.trigger('modules.loaded.all', names);\r\n                instance.events.trigger('app.loaded');\r\n            }\r\n        });\r\n    };\r\n\r\n    window.Cobweb = Cobweb;\r\n}());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Modules = function (params, callbacks) {\r\n        callbacks = callbacks || {};\r\n        var modules = Modules.prototype.all;\r\n        try {\r\n            var sortedNames = topologicalSort(modules);\r\n            for (var i = 0; i < sortedNames.length; i++ ) {\r\n                var name = sortedNames[i];\r\n                var module = modules[name];\r\n                try {\r\n                    module.init.apply(this, params);\r\n                    runCallback(callbacks, 'onLoaded', [name, module]);\r\n                } catch (ex) {\r\n                    console.error('Error loading module:', name, ex);\r\n                    runCallback(callbacks, 'onError', [ex, name, module]);\r\n                }\r\n            }\r\n            runCallback(callbacks, 'onLoadedAll', [sortedNames]);\r\n        } catch (ex) {\r\n            console.error('Error loading modules:', ex);\r\n        }\r\n    };\r\n\r\n    Modules.prototype.all = {};\r\n    Modules.prototype.add = function (name, init, dependencies) {\r\n        dependencies = dependencies || [];\r\n\r\n        var dependant = [];\r\n        var dependencyModule, i;\r\n        for (var moduleName in this.all) {\r\n            var module = this.all[moduleName];\r\n            for (i = 0; i < module.dependencies.length; i++)\r\n                if (module.dependencies[i] === name)\r\n                    dependant.push(moduleName);\r\n        }\r\n        for (i = 0; i < dependencies.length; i++) {\r\n            dependencyModule = this.all[dependencies[i]];\r\n            if (dependencyModule) dependencyModule.dependant.push(name);\r\n        }\r\n\r\n        this.all[name] = {\r\n            dependencies: dependencies,\r\n            dependant: dependant,\r\n            init: init\r\n        };\r\n    };\r\n\r\n    window.Modules = Modules;\r\n\r\n    function topologicalSort (modules) {\r\n        var sortedNames = [];\r\n\r\n        var module = null, i = 0;\r\n        for (var name in modules) {\r\n            module = modules[name];\r\n            for (i = 0; i < module.dependencies.length; i++) {\r\n                var depName = module.dependencies[i];\r\n                if (!modules[depName])\r\n                    throw new Error('Missing module: ' + depName);\r\n            }\r\n        }\r\n\r\n        var nextName = null;\r\n        var candidates = getInitialCandidates(modules);\r\n        while (candidates.length > 0) {\r\n            nextName = candidates.splice(0, 1)[0];\r\n            module = modules[nextName];\r\n            if (module) {\r\n                sortedNames.push(nextName);\r\n                for (i = 0; i < module.dependant.length; i++) {\r\n                    var dependantName = module.dependant[i];\r\n                    if (allDependenciesMet(sortedNames, modules[dependantName]))\r\n                        candidates.push(dependantName);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (Object.keys(modules).length !== sortedNames.length)\r\n            throw new Error('Dependency cycle!');\r\n\r\n        return sortedNames;\r\n    }\r\n\r\n    function getInitialCandidates (modules) {\r\n        var candidates = [];\r\n        for (var name in modules)\r\n            if (modules[name].dependencies.length === 0)\r\n                candidates.push(name);\r\n        return candidates;\r\n    }\r\n\r\n    function allDependenciesMet (loadedUntilNow, module) {\r\n        for (var i = 0; i < module.dependencies.length; i++)\r\n            if (loadedUntilNow.indexOf(module.dependencies[i]) === -1) return false;\r\n        return true;\r\n    }\r\n\r\n    function runCallback (callbacks, name, params) {\r\n        var callback = callbacks[name];\r\n        var isFunction = typeof callback === 'function';\r\n        if (isFunction) callback.apply(null, params);\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('shader', function (instance) {\r\n        instance.asset = instance.asset || {};\r\n        instance.asset.shader = {\r\n            get: function (name, callback) {\r\n                var shader = null, firstSource = null;\r\n                var vertSource = Ajax.get('shader/' + name + '.vert', function (response) {\r\n                    if (firstSource) {\r\n                        shader = new Shader(response, firstSource);\r\n                        callback(shader);\r\n                    } firstSource = response;\r\n                });\r\n                var fragSource = Ajax.get('shader/' + name + '.frag', function (response) {\r\n                    if (firstSource) {\r\n                        shader = new Shader(firstSource, response);\r\n                        callback(shader);\r\n                    } firstSource = response;\r\n                });\r\n            }\r\n        };\r\n    }, ['surface-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Camera = function (center, rotation, distance) {\r\n        this.center = center || [0, 0, 0];\r\n        this.rotation = rotation || [-0.5, -0.5];\r\n        this.distance = distance || 12;\r\n        this.projection = mat4.create();\r\n    };\r\n\r\n    Camera.prototype.getViewMatrix = function (view) {\r\n        view = view || mat4.create();\r\n        var eye = [0, 0, 0];\r\n        this.getPosition(eye);\r\n        mat4.lookAt(view, eye, this.center, this.getUpDirection());\r\n        return view;\r\n    };\r\n\r\n    Camera.prototype.getPosition = function (eye) {\r\n        eye = eye || vec3.create();\r\n        vec3.set(eye, 0, 0, -this.distance);\r\n        vec3.rotateX(eye, eye, this.rotation[1]);\r\n        vec3.rotateY(eye, eye, -this.rotation[0]);\r\n        return eye;\r\n    };\r\n\r\n    Camera.prototype.getDirection = function (direction) {\r\n        direction = direction || vec3.create();\r\n        var eye = this.getPosition();\r\n        vec3.sub(direction, this.center, eye);\r\n        vec3.normalize(direction, direction);\r\n        return direction;\r\n    };\r\n\r\n    Camera.prototype.getRay = function (ray, canvasCoords, canvasSize) {\r\n        ray = ray || new Math.Ray();\r\n        this.getPosition(ray.start);\r\n        vec3.set(ray.direction, canvasCoords[0] / (canvasSize[0] * 0.5) - 1.0,\r\n            canvasCoords[1] / (canvasSize[1] * 0.5) - 1.0, 1);\r\n        var auxMat = mat4.create();\r\n        mat4.multiply(auxMat, this.projection, this.getViewMatrix());\r\n        mat4.invert(auxMat, auxMat);\r\n        vec3.transformMat4(ray.direction, ray.direction, auxMat);\r\n        vec3.normalize(ray.direction, ray.direction);\r\n        return ray;\r\n    };\r\n\r\n    Camera.prototype.getUpDirection = function (up) {\r\n        up = up || vec3.create();\r\n        var vRotation = this.rotation[1];\r\n        if (vRotation >= Math.PI / 2 &&\r\n            vRotation <= ((Math.PI * 3) / 2))\r\n            vec3.set(up, 0, -1, 0);\r\n        else vec3.set(up, 0, 1, 0);\r\n        return up;\r\n    };\r\n\r\n    Camera.prototype.computeLocalAxis = function () {\r\n        var left = [0, 0, 0];\r\n        var up = [0, 0, 0];\r\n\r\n        var forward = this.getDirection();\r\n        vec3.cross(left, forward, [0, 1, 0]);\r\n        vec3.cross(up, forward, left);\r\n\r\n        return {up: up, left: left};\r\n    };\r\n\r\n    window.Math.Camera = Camera;\r\n})());\r\n","(function () {\r\n\t'use strict';\r\n\r\n\tvar defaultOptions = {\r\n\t\tmaxItems: 5,\r\n\t\tmaxDepth: 5,\r\n\t};\r\n\r\n\tvar OctreeNode = function (parent, depth) {\r\n\t\tthis.items = [];\r\n\t\tthis.children = null;\r\n\t\tthis.depth = depth || 0;\r\n\t\tthis.parent = parent || null;\r\n\t\tthis.aabb = { max: [0, 0, 0], min: [0, 0, 0] };\r\n\r\n\t\tthis.root = this;\r\n\t\twhile (this.root.parent !== null)\r\n\t\t\tthis.root = this.root.parent;\r\n\t};\r\n\r\n\tOctreeNode.prototype.getAllItems = function () {\r\n        if (!this.children) return this.items;\r\n        else {\r\n            var allItems = [];\r\n            for (var i = 0; i < this.children.length; i++)\r\n                allItems = allItems.concat(this.children[i].getAllItems());\r\n            return allItems;\r\n        }\r\n\t};\r\n\r\n\tOctreeNode.prototype.addItems = function (items) {\r\n\t\tvar result = false;\r\n\t\tfor (var i = 0; i < items.length; i++) {\r\n\t\t\tvar item = items[i];\r\n\t\t\tresult |= this.addItem(item);\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\tOctreeNode.prototype.addItem = function (item) {\r\n\t\tif (this.contains(item)) {\r\n\t\t\tif (this.children) {\r\n\t\t\t\tfor (var i = 0; i < 8; i++)\r\n\t\t\t\t\tif (this.children[i].addItem(item))\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\tthis.items.push(item);\r\n\t\t\t\tthis.splitIfNeeded();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tOctreeNode.prototype.splitIfNeeded = function () {\r\n\t\tif (this.root.options.maxItems < this.items.length &&\r\n\t\t\tthis.root.options.maxDepth >= this.depth) {\r\n\t\t\tthis.children = [];\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tthis.children[i] = new OctreeNode(this, this.depth + 1);\r\n\t\t\t\tthis.children[i].updateDimensions(this.aabb, i);\r\n\t\t\t}\r\n\t\t\twhile (this.items.length > 0) {\r\n\t\t\t\tvar item = this.items.pop();\r\n\t\t\t\tfor (i = 0; i < 8; i++) {\r\n\t\t\t\t\tvar child = this.children[i];\r\n\t\t\t\t\tif (child.addItem(item)) break;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tOctreeNode.prototype.removeItem = function (item) {\r\n\t\tvar index = this.items.indexOf(item);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.items.splice(index, 1);\r\n\t\t\tthis.mergeIfNeeded();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tOctreeNode.prototype.mergeIfNeeded = function () {\r\n\t\t//TODO: implement\r\n\t};\r\n\r\n\tOctreeNode.prototype.contains = function (item) {\r\n\t\treturn isContained(item, this.aabb);\r\n\t};\r\n\r\n\tOctreeNode.prototype.getCollidingNodes = function (ray) {\r\n\t\tvar nodes = [];\r\n\t\tvar aabb = this.aabb;\r\n\t\tvar collidingPoint = [0, 0, 0];\r\n\t\tif (Math.geo.rayAABBCollision(ray.start, ray.direction,\r\n\t\t\tthis.aabb.min, this.aabb.max, collidingPoint)) {\r\n\t\t\tif (this.children) {\r\n\t\t\t\tfor (var i = 0; i < this.children.length; i++) {\r\n\t\t\t\t\tvar child = this.children[i];\r\n\t\t\t\t\tnodes = nodes.concat(child.getCollidingNodes(ray));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnodes.push(this);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nodes;\r\n\t};\r\n\r\n\tOctreeNode.prototype.getCollidingItems = function (ray) {\r\n\t\tvar items = [];\r\n\t\tthis.getCollidingNodes(ray).forEach(function (node) {\r\n\t\t\titems = items.concat(node.items);\r\n\t\t});\r\n\t\treturn items;\r\n\t};\r\n\r\n\tOctreeNode.prototype.updateDimensions = function (parentAabb, index) {\r\n\t\tvar half = [\r\n\t\t\t(parentAabb.max[0] - parentAabb.min[0]) * 0.5,\r\n\t\t\t(parentAabb.max[1] - parentAabb.min[1]) * 0.5,\r\n\t\t\t(parentAabb.max[2] - parentAabb.min[2]) * 0.5\r\n\t\t];\r\n\t\tvar ref = [!(index & 1), !(index & 2), !(index & 4)];\r\n\t\tthis.aabb.min = [\r\n\t\t\tparentAabb.min[0] + half[0] * ref[0],\r\n\t\t\tparentAabb.min[1] + half[1] * ref[1],\r\n\t\t\tparentAabb.min[2] + half[2] * ref[2]\r\n\t\t];\r\n\t\tthis.aabb.max = [\r\n\t\t\tthis.aabb.min[0] + half[0],\r\n\t\t\tthis.aabb.min[1] + half[1],\r\n\t\t\tthis.aabb.min[2] + half[2]\r\n\t\t];\r\n\t};\r\n\r\n\tvar Octree = function (options) {\r\n\t\tthis.options = Object.assign({}, defaultOptions, options);\r\n\t\tOctreeNode.call(this);\r\n\t};\r\n\r\n\tOctree.prototype = Object.create(OctreeNode.prototype);\r\n\tOctree.prototype.constructor = OctreeNode;\r\n\r\n\tvar _addItems = Octree.prototype.addItems;\r\n\tOctree.prototype.addItems = function (items) {\r\n\t\tthis.growIfNeeded(items);\r\n\t\t_addItems.call(this, items);\r\n\t};\r\n\r\n\tOctree.prototype.updateDimensions = function (newItems) {\r\n\t\tvar allItems = this.getAllItems();\r\n\t\tif (newItems) allItems.push(newItems);\r\n\t\tthis.shrinkIfNeeded(allItems);\r\n\t\tthis.growIfNeeded(allItems);\r\n\t\tif (this.children) {\r\n\t\t\tfor (var i = 0; i < this.children.length; i++) {\r\n\t\t\t\tthis.children[i].updateDimensions(this.aabb, i);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tOctree.prototype.shrinkIfNeeded = function (allItems) {\r\n\t\tconsole.debug('shrinkIfNeeded');\r\n\t};\r\n\r\n\tOctree.prototype.growIfNeeded = function (allItems) {\r\n\t\tupdateRootBounds(allItems, this.aabb);\r\n\t};\r\n\r\n\tMath.Octree = Octree;\r\n\r\n\tfunction isContained (item, aabb) {\r\n\t\tfor (var j = 0; j < 3; j++) {\r\n\t\t\tif (item[j] < aabb.min[j]) return false;\r\n\t\t\tif (item[j] > aabb.max[j]) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction updateRootBounds (items, aabb) {\r\n\t\tfor (var i = 0; i < items.length; i++) {\r\n\t\t\tvar item = items[i];\r\n\t\t\tfor (var j = 0; j < 3; j++) {\r\n\t\t\t\tif (item[j] < aabb.min[j]) aabb.min[j] = item[j];\r\n\t\t\t\tif (item[j] > aabb.max[j]) aabb.max[j] = item[j];\r\n\t\t\t}\r\n\t\t}\r\n\t\tvec3.add(aabb.max, aabb.max, [0.5, 0.5, 0.5]);\r\n\t\tvec3.sub(aabb.min, aabb.min, [0.5, 0.5, 0.5]);\r\n\t}\r\n})();\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Plane = function (point, normal) {\r\n        this.normal = normal || [0, 1, 0];\r\n        this.point = point || vec3.create();\r\n        vec3.normalize(this.normal, this.normal);\r\n    };\r\n\r\n    window.Math.Plane = Plane;\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Ray = function (start, direction) {\r\n        this.direction = direction || [0, 0, 1];\r\n        this.start = start || vec3.create();\r\n        vec3.normalize(this.direction, this.direction);\r\n    };\r\n\r\n    Ray.fromPoints = function (a, b) {\r\n        var direction = vec3.create();\r\n        vec3.sub(direction, b, a);\r\n        return new Ray(a, direction);\r\n    };\r\n\r\n    window.Math.Ray = Ray;\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('pane-header', function (instance) {\r\n        instance.events.on('pane.create', function (pane) {\r\n            onCreateCallback(pane, instance);\r\n        });\r\n    }, ['pane-types']);\r\n\r\n    function onCreateCallback (pane, instance) {\r\n        var header = createHeader();\r\n        pane.appendChild(header);\r\n    }\r\n\r\n    function createHeader () {\r\n        var div = document.createElement('div');\r\n        div.className = 'pane-header';\r\n        return div;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('pane-types', function (instance) {\r\n\r\n        instance.events.on('pane.split', function (oldPane, newPane) {\r\n            var oldType = oldPane.attrData('pane-type');\r\n            if (oldType) instance.pane.setType(newPane, oldType);\r\n        });\r\n\r\n        instance.pane.types = {};\r\n\r\n        instance.pane.setType = function (pane, name) {\r\n            if (this.types[name]) {\r\n                var typeCallbacks = this.types[name];\r\n                typeCallbacks.onPaneType(pane, instance);\r\n                var paneHeader = pane.querySelector('.pane-header');\r\n                typeCallbacks.onCreateHeader(paneHeader, instance);\r\n                pane.dataset.paneType = name;\r\n            }\r\n        };\r\n    }, ['pane']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('pane', function (instance) {\r\n        instance.events.on('app.loaded', function () {\r\n            instance.pane.internal = new Pane({\r\n                container: instance.options.container.selector,\r\n                separator: {\r\n                    size: 3\r\n                },\r\n                callbacks: {\r\n                    onPaneCreate: onPaneCreate,\r\n                    onPaneSplit: onPaneSplit,\r\n                    onPaneResize: onPaneResize,\r\n                    //onPaneMerge: onPaneMerge,\r\n                    //onPaneDestroy: onPaneDestroy,\r\n                }\r\n            });\r\n\r\n            var root = instance.pane.internal.container.querySelector('.pane');\r\n            instance.pane.setType(root, 'surface');\r\n        });\r\n\r\n        instance.pane = {};\r\n\r\n        function onPaneCreate (pane) {\r\n            instance.events.trigger('pane.create', pane);\r\n        }\r\n\r\n        function onPaneSplit (origin, newPane) {\r\n            instance.events.trigger('pane.split', origin, newPane);\r\n        }\r\n\r\n        function onPaneResize (pane) {\r\n            instance.events.trigger('pane.resize', pane);\r\n        }\r\n\r\n        function onPaneMerge (merger, toRemove) {\r\n            console.debug('onPaneMerge', merger, toRemove);\r\n        }\r\n\r\n        function onPaneDestroy (pane) {\r\n            console.debug('onPaneDestroy', pane);\r\n        }\r\n    });\r\n})());\r\n","(function () {\r\n    'use strict';\r\n\r\n    var EPSILON = 0.000001;\r\n\r\n    Math.geo = Math.geo || {};\r\n\r\n    Math.geo.rayFaceCollision = function (start, direction, vertices, result) {\r\n        var triangles = Math.geo.triangulateFace(vertices);\r\n        for (var i = 0; i < triangles.length; i++) {\r\n            var triangle = triangles[i];\r\n            if (Math.geo.rayTriangleCollision(start, direction,\r\n                triangle[0], triangle[1], triangle[2], result))\r\n                return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    Math.geo.rayTriangleCollision = function (start, direction, v1, v2, v3, result) {\r\n        result = result || [0, 0, 0];\r\n    \tvar triangleNormal = getNormal(v1, v2, v3);\r\n        if (Math.geo.rayPlaneCollision(start, direction, v1, triangleNormal, result)) {\r\n            var bary = getBarycentricCoordinates(v1, v2, v3, result);\r\n        \treturn (bary[0] <= 1 && bary[0] >= 0) &&\r\n                (bary[1] <= 1 && bary[1] >= 0) &&\r\n                (bary[2] <= 1 && bary[2] >= 0);\r\n        }\r\n    \treturn false;\r\n    };\r\n\r\n    Math.geo.rayPlaneCollision = function (start, direction, planePoint, planeNormal, result) {\r\n\t\tvar numer = vec3.dot(planePoint, planeNormal) -\r\n            vec3.dot(planeNormal, start);\r\n\t\tvar denom = vec3.dot(planeNormal, direction);\r\n\t\tif (Math.abs(denom) < EPSILON) return false;\r\n\t\tvar t = numer / denom;\r\n\t\tif (t < 0.0) return false;\r\n\t\tif (result) {\r\n            vec3.scale(result, direction, t);\r\n            vec3.add(result, start, result);\r\n        }\r\n\t\treturn true;\r\n    };\r\n\r\n    Math.geo.rayAABBCollision = function (start, direction, minB, maxB, result) {\r\n        result = result || vec3.create();\r\n\r\n\t\tvar inside = true;\r\n\t\tvar quadrant = new Float32Array(3);\r\n\t\tvar i = 0|0;\r\n\t\tvar whichPlane;\r\n\t\tvar maxT = new Float32Array(3);\r\n\t\tvar candidatePlane = new Float32Array(3);\r\n\r\n\t\t/* Find candidate planes; this loop can be avoided if\r\n\t\trays cast all from the eye(assume perpsective view) */\r\n\t\tfor (i=0; i < 3; ++i)\r\n\t\t\tif(start[i] < minB[i]) {\r\n\t\t\t\tquadrant[i] = 1;\r\n\t\t\t\tcandidatePlane[i] = minB[i];\r\n\t\t\t\tinside = false;\r\n\t\t\t}else if (start[i] > maxB[i]) {\r\n\t\t\t\tquadrant[i] = 0;\r\n\t\t\t\tcandidatePlane[i] = maxB[i];\r\n\t\t\t\tinside = false;\r\n\t\t\t}else\t{\r\n\t\t\t\tquadrant[i] = 2;\r\n\t\t\t}\r\n\r\n\t\t/* Ray origin inside bounding box */\r\n\t\tif(inside)\t{\r\n\t\t\tvec3.copy(result, start);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/* Calculate T distances to candidate planes */\r\n\t\tfor (i = 0; i < 3; ++i)\r\n\t\t\tif (quadrant[i] !== 2 && direction[i] !== 0)\r\n\t\t\t\tmaxT[i] = (candidatePlane[i] - start[i]) / direction[i];\r\n\t\t\telse\r\n\t\t\t\tmaxT[i] = -1;\r\n\r\n\t\t/* Get largest of the maxT's for final choice of intersection */\r\n\t\twhichPlane = 0;\r\n\t\tfor (i = 1; i < 3; i++)\r\n\t\t\tif (maxT[whichPlane] < maxT[i])\r\n\t\t\t\twhichPlane = i;\r\n\r\n\t\t/* Check final candidate actually inside box */\r\n\t\tif (maxT[whichPlane] < 0) return false;\r\n\t\tif (maxT[whichPlane] > Number.MAX_VALUE) return false; //NOT TESTED\r\n\r\n\t\tfor (i = 0; i < 3; ++i)\r\n\t\t\tif (whichPlane != i) {\r\n\t\t\t\tresult[i] = start[i] + maxT[whichPlane] * direction[i];\r\n\t\t\t\tif (result[i] < minB[i] || result[i] > maxB[i])\r\n\t\t\t\t\treturn false;\r\n\t\t\t} else {\r\n\t\t\t\tresult[i] = candidatePlane[i];\r\n\t\t\t}\r\n\t\treturn true;\r\n    };\r\n\r\n    Math.geo.rayPointDistance = function (start, direction, point) {\r\n        var aux = [0, 0, 0];\r\n        vec3.sub(aux, point, start);\r\n        vec3.cross(aux, direction, aux);\r\n        return vec3.len(aux);\r\n    };\r\n\r\n    Math.geo.pointPointDistance = function (p1, p2) {\r\n        var aux = [0, 0, 0];\r\n        vec3.sub(aux, p2, p1);\r\n        return vec3.len(aux);\r\n    };\r\n\r\n    Math.geo.triangulateFace = function (vertices) {\r\n        var triangulated = [];\r\n        for (var i = 0; i < vertices.length - 2; i++) {\r\n            triangulated.push([vertices[0], vertices[i + 1], vertices[i + 2]]);\r\n        }\r\n        return triangulated;\r\n    };\r\n\r\n    Math.geo.computePointsCenter = function (points) {\r\n        if (!points || points.length === 0) return null;\r\n        var center = [0, 0, 0];\r\n        points.forEach(function(point) {\r\n            vec3.add(center, center, point);\r\n        });\r\n        vec3.scale(center, center, 1 / points.length);\r\n        return center;\r\n    };\r\n\r\n    Math.geo.findClosestPointIndex = function (position, points) {\r\n        if (!points || !points.length) return null;\r\n        var distance = Math.geo.pointPointDistance(position, points[0]);\r\n        var closestIndex = 0;\r\n        for (var i = 1; i < points.length; i++) {\r\n            var newDistance = Math.geo.pointPointDistance(position, points[i]);\r\n            if (newDistance < distance) {\r\n                distance = newDistance;\r\n                closestIndex = i;\r\n            }\r\n        }\r\n        return closestIndex;\r\n    };\r\n\r\n    Math.geo.findClosestPoint = function (position, points) {\r\n        if (!points || !points.length) return null;\r\n        var index = Math.geo.findClosestPointIndex(position, points);\r\n        return points[index];\r\n    };\r\n\r\n    Math.geo.findClosestFace = function (position, faces) {\r\n        if (!faces || !faces.length) return null;\r\n        var centers = faces.map(function (face) {\r\n            return face.computeCenter();\r\n        });\r\n        var index = Math.geo.findClosestPointIndex(position, centers);\r\n        return faces[index];\r\n    };\r\n\r\n    function getBarycentricCoordinates (p1, p2, p3, point) {\r\n        var v0 = getVectorFromPoints(p1, p2);\r\n        var v1 = getVectorFromPoints(p1, p3);\r\n        var v2 = getVectorFromPoints(p1, point);\r\n\r\n    \tvar d00 = vec3.dot(v0, v0);\r\n    \tvar d01 = vec3.dot(v0, v1);\r\n    \tvar d11 = vec3.dot(v1, v1);\r\n    \tvar d20 = vec3.dot(v2, v0);\r\n    \tvar d21 = vec3.dot(v2, v1);\r\n    \tvar denom = d00 * d11 - d01 * d01;\r\n\r\n        var result = [(d11 * d20 - d01 * d21) / denom,\r\n            (d00 * d21 - d01 * d20) / denom, 0];\r\n        result[2] = 1 - result[0] - result[1];\r\n    \treturn result;\r\n    }\r\n\r\n    function getNormal (v1, v2, v3) {\r\n        var tmp1 = vec3.create();\r\n        var tmp2 = vec3.create();\r\n        vec3.sub(tmp1, v2, v1);\r\n        vec3.sub(tmp2, v3, v1);\r\n        vec3.cross(tmp1, tmp1, tmp2);\r\n        return tmp1;\r\n    }\r\n\r\n    function getVectorFromPoints (a, b) {\r\n        var output = vec3.create();\r\n        vec3.sub(output, b, a);\r\n        return output;\r\n    }\r\n})();\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('math-halfEdge-cube', function (instance) {\r\n        function cube () {\r\n            var mesh = new Math.HalfEdgeMesh();\r\n\r\n            var vhandle = [];\r\n            vhandle[0] = [-1, -1,  1];\r\n            vhandle[1] = [ 1, -1,  1];\r\n            vhandle[2] = [ 1,  1,  1];\r\n            vhandle[3] = [-1,  1,  1];\r\n            vhandle[4] = [-1, -1, -1];\r\n            vhandle[5] = [ 1, -1, -1];\r\n            vhandle[6] = [ 1,  1, -1];\r\n            vhandle[7] = [-1,  1, -1];\r\n            mesh.addVertices(vhandle);\r\n\r\n            var face_vhandles = [];\r\n            face_vhandles.push(vhandle[0]);\r\n            face_vhandles.push(vhandle[1]);\r\n            face_vhandles.push(vhandle[2]);\r\n            face_vhandles.push(vhandle[3]);\r\n            mesh.addFace(face_vhandles);\r\n\r\n            face_vhandles = [];\r\n            face_vhandles.push(vhandle[7]);\r\n            face_vhandles.push(vhandle[6]);\r\n            face_vhandles.push(vhandle[5]);\r\n            face_vhandles.push(vhandle[4]);\r\n            mesh.addFace(face_vhandles);\r\n\r\n            face_vhandles = [];\r\n            face_vhandles.push(vhandle[1]);\r\n            face_vhandles.push(vhandle[0]);\r\n            face_vhandles.push(vhandle[4]);\r\n            face_vhandles.push(vhandle[5]);\r\n            mesh.addFace(face_vhandles);\r\n\r\n            face_vhandles = [];\r\n            face_vhandles.push(vhandle[2]);\r\n            face_vhandles.push(vhandle[1]);\r\n            face_vhandles.push(vhandle[5]);\r\n            face_vhandles.push(vhandle[6]);\r\n            mesh.addFace(face_vhandles);\r\n\r\n            face_vhandles = [];\r\n            face_vhandles.push(vhandle[3]);\r\n            face_vhandles.push(vhandle[2]);\r\n            face_vhandles.push(vhandle[6]);\r\n            face_vhandles.push(vhandle[7]);\r\n            mesh.addFace(face_vhandles);\r\n\r\n            face_vhandles = [];\r\n            face_vhandles.push(vhandle[0]);\r\n            face_vhandles.push(vhandle[3]);\r\n            face_vhandles.push(vhandle[7]);\r\n            face_vhandles.push(vhandle[4]);\r\n            mesh.addFace(face_vhandles);\r\n\r\n            return mesh;\r\n        }\r\n\r\n        Math.HalfEdgeCube = cube;\r\n    }, ['math-halfEdge']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('math-halfEdge-cache', function (instance) {\r\n        var superConstructor = Math.HalfEdgeMesh;\r\n        var cachedHalfEdgeMesh = function () {\r\n            superConstructor.call(this);\r\n            var halfEdgeMesh = this;\r\n            halfEdgeMesh.cache = {\r\n                entry: {},\r\n                get: function (key, builder) {\r\n                    if (!this.entry[key]) {\r\n                        this.entry[key] = {\r\n                            mesh: builder.onCreate(halfEdgeMesh),\r\n                            builder: builder\r\n                        };\r\n                    }\r\n                    builder.onClean(this.entry[key].mesh);\r\n                    return this.entry[key].mesh;\r\n                },\r\n                onVertexChange: function (vertex) {\r\n                    for (var key in this.entry) {\r\n                        var entry = this.entry[key];\r\n                        if (entry.builder.onVertexChange)\r\n                            entry.builder.onVertexChange(vertex, entry.mesh);\r\n                    }\r\n                }\r\n            };\r\n        };\r\n        cachedHalfEdgeMesh.prototype = Object.create(Math.HalfEdgeMesh.prototype);\r\n        cachedHalfEdgeMesh.prototype.constructor = cachedHalfEdgeMesh;\r\n\r\n        Math.HalfEdgeMesh = cachedHalfEdgeMesh;\r\n    }, ['math-halfEdge']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('math-halfEdge', function (instance) {\r\n        Math.HalfEdgeMesh = HalfEdgeMesh;\r\n    });\r\n\r\n    var HalfEdgeMesh = function () {\r\n        this.bounds = new Math.Octree();\r\n        this.halfEdges = [];\r\n        this.vertices = [];\r\n        this.faces = [];\r\n    };\r\n\r\n    HalfEdgeMesh.prototype.addVertices = function (vertices) {\r\n        if (arguments.length > 1) this.addVertices.apply(this, arguments);\r\n        if (!Array.isArray(vertices)) return;\r\n        this.bounds.addItems(vertices);\r\n        for (var i = 0; i < vertices.length; i++) {\r\n            var vertex = vertices[i];\r\n            var index = this.vertices.indexOf(vertex);\r\n            if (index < 0) {\r\n                var _halfEdge = {};\r\n                _halfEdge.computeNormal = VertexComputeNormal;\r\n                _halfEdge.ownIndex = this.vertices.length;\r\n                _halfEdge.getFaces = VertexGetFaces;\r\n                _halfEdge.outEdges = [];\r\n                vertex._halfEdge = _halfEdge;\r\n                this.vertices.push(vertex);\r\n            } else {\r\n                console.error('addVertices: Adding vertex twice!', vertex);\r\n            }\r\n        }\r\n    };\r\n\r\n    HalfEdgeMesh.prototype.addFace = function (vertices) {\r\n        if (arguments.length > 1) this.addFace.apply(this, arguments);\r\n        if (!Array.isArray(vertices)) return;\r\n        if (vertices.length >= 3) {\r\n            var he1 = buildEdge(vertices[0], vertices[1]);\r\n            var he2 = buildEdge(vertices[1], vertices[2], he1.face);\r\n            he1.next = he2;\r\n            this.halfEdges.push(he1, he2);\r\n            if (vertices.length > 3) {\r\n                var last, prev = he2;\r\n                for (var i = 2; i < vertices.length - 1; i++) {\r\n                    last = buildEdge(vertices[i], vertices[i + 1], he1.face);\r\n                    if (!he2.next) he2.next = last;\r\n                    last.next = prev;\r\n                    this.halfEdges.push(last);\r\n                    prev = last;\r\n                }\r\n                last = buildEdge(vertices[i], vertices[0], he1.face);\r\n                last.next = he1;\r\n                this.halfEdges.push(last);\r\n                prev.next = last;\r\n            }\r\n            this.faces.push(he1.face);\r\n        } else {\r\n            console.error('addFace: 3 or more vertices needed to form a face!');\r\n        }\r\n    };\r\n\r\n    HalfEdgeMesh.prototype.onVertexChange = function (vertex) {\r\n        if (this.cache && this.cache.onVertexChange)\r\n            this.cache.onVertexChange(vertex);\r\n    };\r\n\r\n    HalfEdgeMesh.prototype.clear = function () {\r\n        this.halfEdges = [];\r\n        this.vertices = [];\r\n        this.faces = [];\r\n    };\r\n\r\n    function buildEdge (start, end, face) {\r\n        var edge = {};\r\n        edge.vertex = end;\r\n        edge.face = face ? face : new HalfEdgeFace(edge);\r\n        edge.opposite = findOppositeEdge(start, end) || edge;\r\n        edge.next = null;\r\n        start._halfEdge.outEdges.push(edge);\r\n        return edge;\r\n    }\r\n\r\n    function findOppositeEdge(start, end) {\r\n        var opposites = end._halfEdge.outEdges.filter(function (he) {\r\n            return he.vertex === start;\r\n        });\r\n        return (opposites && opposites[0]) ? opposites[0] : null;\r\n    }\r\n\r\n    function VertexGetFaces () {\r\n        return this.outEdges.map(function (edge) {\r\n            return edge.face;\r\n        });\r\n    }\r\n\r\n    function VertexComputeNormal () {\r\n        var normal = [0, 0, 0];\r\n        this.getFaces().forEach(function (face) {\r\n            vec3.add(normal, normal, face.computeRawNormal());\r\n        });\r\n        vec3.normalize(normal, normal);\r\n        return normal;\r\n    }\r\n\r\n    var HalfEdgeFace = function (halfEdge) {\r\n        this.halfEdge = halfEdge;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.getEdges = function () {\r\n        var output = [];\r\n        var he = this.halfEdge;\r\n        while (he.next !== this.halfEdge) {\r\n            output.push(he);\r\n            he = he.next;\r\n        }\r\n        output.push(he);\r\n        return output;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.getVertices = function () {\r\n        return this.getEdges().map(function (edge) {\r\n            return edge.vertex;\r\n        });\r\n    };\r\n\r\n    HalfEdgeFace.prototype.getVerticesTriangulated = function () {\r\n        var triangulated = [];\r\n        var vertices = this.getVertices();\r\n        for (var i = 0; i < vertices.length - 2; i++) {\r\n            triangulated.push([vertices[0], vertices[i + 1], vertices[i + 2]]);\r\n        }\r\n        return triangulated;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.computeRawNormal = function () {\r\n        var normal = [0, 0, 0];\r\n        this.getVerticesTriangulated().forEach(function (triplet) {\r\n            var triangleNormal = computeNormal(triplet[0], triplet[1], triplet[2]);\r\n            vec3.add(normal, normal, triangleNormal);\r\n        });\r\n        return normal;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.computeNormal = function () {\r\n        var normal = this.computeRawNormal();\r\n        vec3.normalize(normal, normal);\r\n        return normal;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.computeCenter = function () {\r\n        return Math.geo.computePointsCenter(this.getVertices());\r\n    };\r\n\r\n    function computeNormal (v1, v2, v3) {\r\n        var tmp1 = vec3.create();\r\n        var tmp2 = vec3.create();\r\n        vec3.sub(tmp1, v2, v1);\r\n        vec3.sub(tmp2, v3, v1);\r\n        vec3.cross(tmp1, tmp1, tmp2);\r\n        return tmp1;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n    \r\n    Modules.prototype.add('surface', function (instance) {\r\n        instance.pane.types.surface = {\r\n            onPaneType: onSurfacePaneType,\r\n            onCreateHeader: onCreateSurfaceHeader\r\n        };\r\n\r\n        instance.events.on('pane.resize', function (pane) {\r\n            if (pane.attrData('pane-type') === 'surface')\r\n                updateCanvasSize(instance, pane);\r\n        });\r\n\r\n        window.addEventListener('resize', function (event) {\r\n            var surfaces = instance.pane.internal.container\r\n                .querySelectorAll('.pane canvas');\r\n            for (var i = 0; i < surfaces.length; i++) {\r\n                updateCanvasSize(instance, surfaces[i].parentNode);\r\n            }\r\n        });\r\n\r\n        instance.surface = {};\r\n    }, ['pane-types']);\r\n\r\n    var surfaceIndex = 0;\r\n    function onSurfacePaneType (pane, instance) {\r\n        var canvas = document.createElement('canvas');\r\n        canvas.id = 'surface' + (surfaceIndex++);\r\n        canvas.className = 'surface';\r\n        pane.appendChild(canvas);\r\n\r\n        instance.surface.map = instance.surface.map || {};\r\n        instance.surface.map[canvas.id] = {\r\n            camera: new Math.Camera()\r\n        };\r\n\r\n        updateCanvasSize(instance, pane);\r\n\r\n        instance.events.trigger('surface.create', canvas);\r\n    }\r\n\r\n    function onCreateSurfaceHeader (header, instance) {\r\n        var label = document.createElement('label');\r\n        label.innerHTML = 'Surface Pane';\r\n        header.appendChild(label);\r\n    }\r\n\r\n    function updateCanvasSize (instance, pane) {\r\n        var canvas = pane.querySelector('canvas');\r\n        var context = canvas.getContext('2d');\r\n        var data = instance.surface.map[canvas.id];\r\n\r\n        var header = pane.querySelector('.pane-header');\r\n        var headerHeight = header ? header.height() : 0;\r\n\r\n        var width = pane.width(), height = pane.height() - headerHeight;\r\n        data.imgData = context.createImageData(width, height);\r\n        data.buffer = new Uint8Array(width * height * 4);\r\n\r\n        canvas.height = height;\r\n        canvas.width = width;\r\n\r\n        mat4.perspective(data.camera.projection, 45 * DEG2RAD, width / height, 0.1, 1000);\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var originalRotation = null;\r\n    var mouseDownCoords = null;\r\n\r\n    Modules.prototype.add('common-interaction', function (instance) {\r\n        instance.surface.interactions.common = {\r\n            onMouseWheel: function (event, realCoords) {\r\n                var canvas = event.target;\r\n                var delta = Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail)));\r\n                delta /= 2;\r\n\r\n                var data = instance.surface.map[canvas.id];\r\n                data.camera.distance -= delta;\r\n                data.camera.distance = Math.max(data.camera.distance, 0);\r\n\r\n                return true;\r\n            },\r\n            onMouseMove: function (event, realCoords) {\r\n                if (event.target.dataset.moving) {\r\n                    var canvas = event.target;\r\n                    var data = instance.surface.map[canvas.id];\r\n                    if (data) {\r\n                        var delta = getCoordsDelta(mouseDownCoords, realCoords);\r\n                        combine(data.camera, originalRotation, delta);\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            onMouseDown: function (event, realCoords) {\r\n                var canvas = event.target;\r\n                var data = instance.surface.map[canvas.id];\r\n                if (event.which === 3) {\r\n                    event.target.dataset.moving = 'true';\r\n                    upNormalMouseDown = vec3.equals(data.camera.getUpDirection(), [0, 1, 0]);\r\n                    originalRotation = data.camera.rotation.slice();\r\n                    mouseDownCoords = realCoords;\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n            onMouseUp: function (event, realCoords) {\r\n                if (event.which === 3) {\r\n                    delete event.target.dataset.moving;\r\n                    var data = instance.surface.map[event.target.id];\r\n                    mouseDownCoords = null;\r\n                }\r\n                return true;\r\n            },\r\n            onClick: function (event, realCoords) {\r\n                return true;\r\n            },\r\n            onRender: function (surface) {}\r\n        };\r\n    }, ['surface-interaction']);\r\n\r\n    var upNormalMouseDown = true;\r\n    function combine (surface, originalRotation, delta) {\r\n        if (!originalRotation) return;\r\n        if (!upNormalMouseDown) delta[0] = -delta[0];\r\n\r\n        var rotation = surface.rotation;\r\n        rotation[0] = originalRotation[0] + delta[0] * 0.005;\r\n        rotation[1] = originalRotation[1] + delta[1] * 0.005;\r\n        clampRotations(rotation);\r\n    }\r\n\r\n    function getCoordsDelta (initial, current) {\r\n        if (!initial) return [0, 0];\r\n        return [\r\n            initial[0] - current[0],\r\n            initial[1] - current[1]\r\n        ];\r\n    }\r\n\r\n    function clampRotations (rotations) {\r\n        var pi2 = Math.PI * 2;\r\n        if (rotations[0] < 0) rotations[0] = pi2 + rotations[0];\r\n        if (rotations[0] >= pi2) rotations[0] = rotations[0] - pi2;\r\n        if (rotations[1] < 0) rotations[1] = pi2 + rotations[1];\r\n        if (rotations[1] >= pi2) rotations[1] = rotations[1] - pi2;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var meshKey = 'edit-interaction-render';\r\n\r\n    Modules.prototype.add('edit-interaction-render', function (instance) {\r\n        var shader = null;\r\n        instance.asset.shader.get('wireframe', function (s) {\r\n            shader = s;\r\n        });\r\n\r\n        var uniforms = {\r\n            u_mvp: mat4.create()\r\n        };\r\n\r\n        var temp = mat4.create();\r\n        instance.surface.interactions.edit.onRender = function (surface) {\r\n            instance.scene.getObjects().forEach(function (node) {\r\n                var obj = node.data;\r\n\r\n                surface.camera.getViewMatrix(temp);\r\n                mat4.multiply(temp, surface.camera.projection, temp);\r\n                mat4.multiply(uniforms.u_mvp, temp, obj.model);\r\n\r\n                if (shader) {\r\n                    shader.uniforms(uniforms);\r\n                    if (obj.mesh instanceof Math.HalfEdgeMesh) {\r\n                        var mesh = obj.mesh.cache.get(meshKey, wireframeBuilder);\r\n                        shader.draw(mesh, instance.graphics.gl.LINES);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n    }, ['edit-interaction', 'shader']);\r\n\r\n    var wireframeBuilder = {\r\n        onCreate: function (halfEdgeMesh) {\r\n            var buffers = {\r\n                vertices: new Float32Array(halfEdgeMesh.vertices.length * 3),\r\n                colors: new Float32Array(halfEdgeMesh.vertices.length * 4)\r\n            };\r\n\r\n            var indices = [];\r\n            halfEdgeMesh.faces.forEach(function (face) {\r\n                face.getVertices().forEach(function (vertex, i, array) {\r\n                    var index = i >= array.length - 1 ? 0 : i + 1;\r\n                    indices.push(vertex._halfEdge.ownIndex);\r\n                    indices.push(array[index]._halfEdge.ownIndex);\r\n                });\r\n            });\r\n            buffers.lines = new Uint16Array(indices);\r\n            var mesh = GL.Mesh.load(buffers);\r\n            for (var i = 0; i < halfEdgeMesh.vertices.length; i++)\r\n                this.onVertexChange(halfEdgeMesh.vertices[i], mesh);\r\n\r\n            return mesh;\r\n        },\r\n        onVertexChange: function (vertex, mesh) {\r\n            var buffer = mesh.vertexBuffers;\r\n            var index = vertex._halfEdge.ownIndex;\r\n            for (var j = 0; j < 3; j++)\r\n                buffer.vertices.data[index * 3 + j] = vertex[j];\r\n            buffer.vertices.dirty = true;\r\n            var color = vertex._selected ? [1, 0.4, 0.1, 1] : [0, 0, 0, 1];\r\n            for (j = 0; j < 4; j++)\r\n                buffer.colors.data[index * 4 + j] = color[j];\r\n            buffer.colors.dirty = true;\r\n        },\r\n        onClean: function (mesh) {\r\n            if (mesh.vertexBuffers.vertices.dirty) {\r\n                mesh.vertexBuffers.vertices.upload();\r\n                delete mesh.vertexBuffers.vertices.dirty;\r\n            }\r\n            if (mesh.vertexBuffers.colors.dirty) {\r\n                mesh.vertexBuffers.colors.upload();\r\n                delete mesh.vertexBuffers.colors.dirty;\r\n            }\r\n        }\r\n    };\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-selection', function (instance) {\r\n        instance.surface.interactions.edit.selection = {\r\n            objects: {},\r\n            add: function (ray, object, position) {\r\n                position = position || [0, 0, 0];\r\n                var selection = this;\r\n\r\n                var result = {\r\n                    vertices: [],\r\n                    edges: [],\r\n                    faces: []\r\n                };\r\n\r\n                var vertices = object.mesh.bounds.getCollidingItems(ray);\r\n                var rayVertices = vertices.filter(function (vertex) {\r\n                    return Math.geo.rayPointDistance(ray.start, ray.direction, vertex) <= 0.2;\r\n                });\r\n                var vertex = Math.geo.findClosestPoint(position, rayVertices);\r\n                if (vertex) {\r\n                    toggleVertex(selection, object, vertex);\r\n                    result.vertices.push(vertex);\r\n                    return result;\r\n                }\r\n\r\n                //TODO: check edge collisions & add to selection\r\n\r\n                var uniqueFaces = getFacesFromVertices(vertices);\r\n                uniqueFaces = uniqueFaces.filter(function (face) {\r\n                    return Math.geo.rayFaceCollision(ray.start, ray.direction,\r\n                        face.getVertices());\r\n                });\r\n                var closestFace = Math.geo.findClosestFace(position, uniqueFaces);\r\n                if (closestFace) {\r\n                    toggleFace(selection, object, closestFace);\r\n                    result.faces.push(closestFace);\r\n                }\r\n\r\n                //TODO: keep only closest element of all 3 types\r\n\r\n                return result;\r\n            },\r\n            getCenter: function () {\r\n                var name = Object.keys(this.objects)[0];\r\n                return Math.geo.computePointsCenter(this.objects[name].vertices);\r\n            },\r\n            clear: function () {\r\n                for (var name in this.objects) {\r\n                    var selectedObj = this.objects[name];\r\n                    var sceneObj = instance.scene.getObjectByName(name);\r\n                    for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                        var vertex = selectedObj.vertices[i];\r\n                        if (vertex._selected) {\r\n                            delete vertex._selected;\r\n                            sceneObj.mesh.onVertexChange(vertex);\r\n                        }\r\n                    }\r\n                }\r\n                this.objects = {};\r\n            },\r\n            isEmpty: function () {\r\n                return !Object.keys(this.objects).length;\r\n            }\r\n        };\r\n\r\n    }, ['edit-interaction']);\r\n\r\n    function toggleVertex (selection, object, vertex) {\r\n        if (vertex) {\r\n            if (toggle(selection, object, vertex, 'vertices')) {\r\n                vertex._selected = true;\r\n                vertex.originalPosition = vertex.slice();\r\n                vertex._halfEdge.getFaces().forEach(function (face) {\r\n                    var selectedVertices = selection.objects[object.name].vertices;\r\n                    var faceVertices = face.getVertices();\r\n                    var allSelected = true;\r\n                    faceVertices.forEach(function (vertex) {\r\n                        allSelected &= selectedVertices.includes(vertex);\r\n                    });\r\n                    if (allSelected && !face._selected)\r\n                        toggleFace(selection, object, face);\r\n                });\r\n            } else delete vertex._selected;\r\n        }\r\n    }\r\n\r\n    function toggleEdge (selection, object, edge) {\r\n        if (edge) {\r\n            if (toggle(selection, object, edge, 'edges')) {\r\n                edge._selected = true;\r\n            } else delete edge._selected;\r\n        }\r\n    }\r\n\r\n    function toggleFace (selection, object, face) {\r\n        if (face) {\r\n            if (toggle(selection, object, face, 'faces')) {\r\n                face._selected = true;\r\n                face.getVertices().forEach(function (vertex) {\r\n                    if (!vertex._selected)\r\n                        toggleVertex(selection, object, vertex);\r\n                });\r\n            } else delete face._selected;\r\n        }\r\n    }\r\n\r\n    function toggle (selection, object, item, arrayName) {\r\n        initObjectIfNeeded(selection, object);\r\n        var array = selection.objects[object.name][arrayName];\r\n        var index = array.indexOf(item);\r\n        if (index >= 0) {\r\n            array.splice(index, 1);\r\n            delObjectIfNeeded(selection, object);\r\n            return false;\r\n        } else {\r\n            array.push(item);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function initObjectIfNeeded (selection, object) {\r\n        var name = object.name;\r\n        if (!selection.objects[name]) {\r\n            selection.objects[name] = {\r\n                faces: [],\r\n                edges: [],\r\n                vertices: []\r\n            };\r\n        }\r\n    }\r\n\r\n    function delObjectIfNeeded (selection, object) {\r\n        var name = object.name;\r\n        if (selection.objects[name]) {\r\n            var objSelection = selection.objects[name];\r\n            if (!objSelection.vertices.length &&\r\n                !objSelection.vertices.length &&\r\n                !objSelection.vertices.length)\r\n                delete selection.objects[name];\r\n        }\r\n    }\r\n\r\n    function getEdgesFromVertices (vertices) {\r\n        var edges = [];\r\n        vertices.forEach(function (vertex) {\r\n            vertex._halfEdge.outEdges.forEach(function (edge) {\r\n                if (edges.indexOf(edge) === -1)\r\n                    edges.push(edge);\r\n            });\r\n        });\r\n        return edges;\r\n    }\r\n\r\n    function getFacesFromVertices (vertices) {\r\n        var faces = [];\r\n        vertices.forEach(function (vertex) {\r\n            vertex._halfEdge.getFaces().forEach(function (face) {\r\n                if (faces.indexOf(face) === -1)\r\n                    faces.push(face);\r\n            });\r\n        });\r\n        return faces;\r\n    }\r\n\r\n    function saveOriginalVertexPosition (vertices) {\r\n        vertices.forEach(function (vertex) {\r\n            vertex.originalPosition = vertex.slice();\r\n        });\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var isMouseDown = false;\r\n    var initialCoords = [0, 0];\r\n\r\n    Modules.prototype.add('edit-interaction', function (instance) {\r\n        instance.surface.interactions.edit = {\r\n            onMouseWheel: function (event, realCoords) {\r\n                return true;\r\n            },\r\n            onMouseMove: function (event, realCoords) {\r\n                if (isMouseDown && !this.selection.isEmpty()) {\r\n                    var canvas = event.target;\r\n                    var data = instance.surface.map[canvas.id];\r\n\r\n                    var currentRay = data.camera.getRay(null, realCoords,\r\n                        [canvas.width, canvas.height]);\r\n                    var initialRay = data.camera.getRay(null, initialCoords,\r\n                        [canvas.width, canvas.height]);\r\n                    var cameraDirection = data.camera.getDirection();\r\n\r\n                    var hitPointInitial = [0, 0, 0];\r\n                    var hitPointCurrent = [0, 0, 0];\r\n\r\n                    var diff = [0, 0], delta = [0, 0, 0], aux = [0, 0, 0];\r\n                    var selectionCenter = this.selection.getCenter();\r\n                    Math.geo.rayPlaneCollision(currentRay.start, currentRay.direction,\r\n                        selectionCenter, cameraDirection, hitPointCurrent);\r\n                    Math.geo.rayPlaneCollision(initialRay.start, initialRay.direction,\r\n                        selectionCenter, cameraDirection, hitPointInitial);\r\n                    vec3.sub(delta, hitPointCurrent, hitPointInitial);\r\n\r\n                    for (var name in this.selection.objects) {\r\n                        var hitPoint = [0, 0, 0];\r\n                        var selectedObj = this.selection.objects[name];\r\n                        var sceneObj = instance.scene.getObjectByName(name);\r\n\r\n                        for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                            var vertex = selectedObj.vertices[i];\r\n                            vec3.add(vertex, vertex.originalPosition, delta);\r\n                            sceneObj.mesh.bounds.updateDimensions();\r\n                            sceneObj.mesh.onVertexChange(vertex);\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            },\r\n            onMouseUp: function (event, realCoords) {\r\n                isMouseDown = false;\r\n                for (var name in this.selection.objects) {\r\n                    var selectedObj = this.selection.objects[name];\r\n                    for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                        var vertex = selectedObj.vertices[i];\r\n                        if (vertex.originalPosition) {\r\n                            delete vertex.originalPosition;\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            },\r\n            onMouseDown: function (event, realCoords) {\r\n                var canvas = event.target;\r\n                var data = instance.surface.map[canvas.id];\r\n                if (event.which === 1) {\r\n                    isMouseDown = true;\n\r\n                    var ray = data.camera.getRay(null, realCoords,\r\n                        [canvas.width, canvas.height]);\r\n\r\n                    var selection = this.selection;\r\n                    instance.scene.getObjects().forEach(function (node) {\r\n                        selection.clear();\r\n                        var result = selection.add(ray, node.data, data.camera.getPosition());\r\n                        result.vertices.forEach(function (vertex) {\r\n                            node.data.mesh.cache.onVertexChange(vertex);\r\n                            initialCoords = realCoords;\r\n                        });\r\n                        result.faces.forEach(function (face) {\r\n                            face.getVertices().forEach(function (vertex) {\r\n                                node.data.mesh.cache.onVertexChange(vertex);\r\n                            });\r\n                            initialCoords = realCoords;\r\n                        });\r\n                    });\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n            onClick: function (event, realCoords) {\r\n                return true;\r\n            }\r\n        };\r\n\r\n        instance.events.on('surface.create', function (surface) {\r\n            instance.surface.setInteraction(surface, 'edit');\r\n        });\r\n\r\n    }, ['surface-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('object-interaction', function (instance) {\r\n        instance.surface.interactions.object = {\r\n            onMouseWheel: function (event, realCoords) {\r\n                return true;\r\n            },\r\n            onMouseMove: function (event, realCoords) {\r\n                return true;\r\n            },\r\n            onMouseDown: function (event, realCoords) {\r\n                var canvas = event.target;\r\n                var data = instance.surface.map[canvas.id];\r\n                if (event.which === 1) {\r\n                    var ray = data.camera.getRay(null, realCoords,\r\n                        [canvas.width, canvas.height]);\r\n\r\n                    var isHit = false, hitPoint = vec3.create();\r\n                    instance.scene.getObjects().forEach(function (node) {\r\n                        isHit = geo.testRayBBox(ray.start, ray.direction, node.data.mesh.bounding, node.data.model, hitPoint);\r\n                        if (isHit) {\r\n                            node.data.selected = true;\r\n                        } else delete node.data.selected;\r\n                    });\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n            onMouseUp: function (event, realCoords) {\r\n                return true;\r\n            },\r\n            onClick: function (event, realCoords) {\r\n                return true;\r\n            },\r\n            onRender: function (surface) {}\r\n        };\r\n\r\n    }, ['surface-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('surface-interaction', function (instance) {\r\n        instance.surface.interactions = {};\r\n\r\n        instance.surface.setInteraction = function (surface, name) {\r\n            surface.dataset.interaction = name;\r\n        };\r\n\r\n        instance.surface.getInteractionCallbacks = function (surface) {\r\n            var interactionName = surface.dataset.interaction;\r\n            return instance.surface.interactions[interactionName];\r\n        };\r\n\r\n        instance.surface.onRender = function (canvas, surface) {\r\n            var keepRunning = true;\r\n            var callbacks = instance.surface.getInteractionCallbacks(canvas);\r\n            if (callbacks.onRender) keepRunning = callbacks.onRender(surface);\r\n            if (keepRunning) {\r\n                var common = instance.surface.interactions.common;\r\n                common.onRender(surface);\r\n            }\r\n        };\r\n\r\n        instance.events.on('surface.create', function (surface) {\r\n            surface.oncontextmenu = onContextMenu;\r\n            surface.onmousewheel = onSurfaceEvent;\r\n            surface.onmousemove = onSurfaceEvent;\r\n            surface.onmousedown = onSurfaceEvent;\r\n            surface.onmouseup = onSurfaceEvent;\r\n            surface.onclick = onSurfaceEvent;\r\n        });\r\n\r\n        function onSurfaceEvent (event) {\r\n            var callbacks = instance.surface.getInteractionCallbacks(event.target);\r\n            var keepRunning = runCallback(callbacks, event);\r\n            if (keepRunning) {\r\n                var common = instance.surface.interactions.common;\r\n                runCallback(common, event);\r\n            }\r\n        }\r\n\r\n        function onContextMenu (event) {\r\n            event.preventDefault();\r\n            return false;\r\n        }\r\n\r\n        instance.events.on('pane.split', function (oldPane, newPane) {\r\n            var initialValue = oldPane.dataset.interaction;\r\n            newPane.dataset.interaction = initialValue;\r\n        });\r\n    }, ['surface']);\r\n\r\n    function runCallback (callbacks, event) {\r\n        var realCoords = getLocalCoordinates(event);\r\n        switch (event.type) {\r\n            case 'mousewheel': return callbacks.onMouseWheel(event, realCoords);\r\n            case 'mousemove': return callbacks.onMouseMove(event, realCoords);\r\n            case 'mousedown': return callbacks.onMouseDown(event, realCoords);\r\n            case 'mouseup': return callbacks.onMouseUp(event, realCoords);\r\n            case 'click': return callbacks.onClick(event, realCoords);\r\n        }\r\n    }\r\n\r\n    function getLocalCoordinates (event) {\r\n        return [event.layerX, event.layerY];\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var meshKey = 'render-solid';\r\n\r\n    Modules.prototype.add('render-solid', function (instance) {\r\n        var shader = null;\r\n        instance.asset.shader.get('solid', function (s) {\r\n            shader = s;\r\n        });\r\n\r\n        var grid = {\r\n            type: 'object',\r\n            primitive: instance.graphics.gl.LINES,\r\n            mesh: GL.Mesh.grid({\r\n                lines: 11,\r\n                size: 10\r\n            }),\r\n            model: mat4.create(),\r\n        };\r\n\r\n        instance.surface.renders.solid = function (surface) {\r\n            var lightDirection = vec3.create();\r\n            surface.camera.getPosition(lightDirection);\r\n            vec3.add(lightDirection, lightDirection, [1, 2, 0]);\r\n            vec3.normalize(lightDirection, lightDirection);\r\n            uniforms.u_lightvector = lightDirection;\r\n\r\n            renderObject(surface, grid, shader);\r\n            instance.scene.getObjects().forEach(function (node) {\r\n                renderObject(surface, node.data, shader);\r\n            });\r\n        };\r\n\r\n        instance.events.on('surface.create', function (surface) {\r\n            instance.surface.setRender(surface, 'solid');\r\n        });\r\n    }, ['surface-render', 'shader']);\r\n\r\n    var uniforms = {\r\n        u_color: [0.5, 0.5, 0.5, 1],\r\n        u_lightvector: null,\r\n        u_model: null,\r\n        u_mvp: mat4.create()\r\n    };\r\n\r\n    var temp = mat4.create();\r\n    function renderObject (surface, obj, shader) {\r\n        surface.camera.getViewMatrix(temp);\r\n        mat4.multiply(temp, surface.camera.projection, temp);\r\n        mat4.multiply(uniforms.u_mvp, temp, obj.model);\r\n\r\n        uniforms.u_model = obj.model;\r\n\r\n        if (shader) {\r\n            shader.uniforms(uniforms);\r\n            if (obj.mesh instanceof Math.HalfEdgeMesh) {\r\n                var mesh = obj.mesh.cache.get(meshKey, meshBuilder);\r\n                if (mesh) shader.draw(mesh, obj.primitive);\r\n            } else {\r\n                shader.draw(obj.mesh, obj.primitive);\r\n            }\r\n        }\r\n    }\r\n\r\n    var meshBuilder = {\r\n        onCreate: function (halfEdgeMesh) {\r\n            var buffers = {\r\n                vertices: new Float32Array(halfEdgeMesh.vertices.length * 3),\r\n                normals: new Float32Array(halfEdgeMesh.vertices.length * 3)\r\n            };\r\n\r\n            var indices = [];\r\n            halfEdgeMesh.faces.forEach(function (face) {\r\n                var faceNormal = face.computeNormal();\r\n                face.getVerticesTriangulated().forEach(function (t) {\r\n                    indices.push(t[0]._halfEdge.ownIndex,\r\n                        t[1]._halfEdge.ownIndex, t[2]._halfEdge.ownIndex);\r\n                });\r\n            });\r\n            buffers.triangles = new Uint16Array(indices);\r\n            var mesh = GL.Mesh.load(buffers);\r\n            for (var i = 0; i < halfEdgeMesh.vertices.length; i++)\r\n                this.onVertexChange(halfEdgeMesh.vertices[i], mesh);\r\n\r\n            return mesh;\r\n        },\r\n        onVertexChange: function (vertex, mesh) {\r\n            var buffer = mesh.vertexBuffers;\r\n            var index = vertex._halfEdge.ownIndex;\r\n            for (var j = 0; j < 3; j++)\r\n                buffer.vertices.data[index * 3 + j] = vertex[j];\r\n            buffer.vertices.dirty = true;\r\n            var normal = vertex._halfEdge.computeNormal();\r\n            for (j = 0; j < 3; j++)\r\n                buffer.normals.data[index * 3 + j] = normal[j];\r\n            buffer.normals.dirty = true;\r\n        },\r\n        onClean: function (mesh) {\r\n            if (mesh.vertexBuffers.vertices.dirty) {\r\n                mesh.vertexBuffers.vertices.upload();\r\n                delete mesh.vertexBuffers.vertices.dirty;\r\n            }\r\n            if (mesh.vertexBuffers.normals.dirty) {\r\n                mesh.vertexBuffers.normals.upload();\r\n                delete mesh.vertexBuffers.normals.dirty;\r\n            }\r\n        }\r\n    };\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('surface-render', function (instance) {\r\n        instance.surface.renders = {};\r\n\r\n        instance.surface.setRender = function (surface, name) {\r\n            surface.dataset.render = name;\r\n        };\r\n\r\n        instance.surface.getRender = function (surface) {\r\n            var renderName = surface.dataset.render;\r\n            return instance.surface.renders[renderName];\r\n        };\r\n\r\n        var panes = document.querySelectorAll('.pane');\r\n        for (var i = 0; i < panes.length; i++) {\r\n            if (panes[i].dataset.paneType == 'surface') {\r\n                var canvas = panes[i].querySelector('canvas');\r\n                canvas.dataset.render = 'solid';\r\n            }\r\n        }\r\n\r\n        instance.events.on('pane.split', function (oldPane, newPane) {\r\n            newPane.attrData('surface-render', oldPane.attrData('surface-render'));\r\n        });\r\n    }, ['surface']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Graphics = function (instance) {\r\n        this.gl = GL.create({\r\n            height: screen.height,\r\n            width: screen.width\r\n        });\r\n        this.gl.animate();\r\n        this.gl.ondraw = function () {\r\n            var renderTargets = document.querySelectorAll('canvas');\r\n            for (var i = 0; i < renderTargets.length; i++)\r\n                drawRenderTarget(instance, renderTargets[i]);\r\n        };\r\n        this.gl.clearColor(0.349, 0.349, 0.349, 1);\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n    };\r\n\r\n    Modules.prototype.add('graphics', function (instance) {\r\n        instance.graphics = new Graphics(instance);\r\n    });\r\n\r\n    function drawRenderTarget (instance, canvas) {\r\n        var data = instance.surface.map[canvas.id];\r\n        var gl = instance.graphics.gl;\r\n\r\n        var width  = canvas.clientWidth, height = canvas.clientHeight;\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        gl.viewport(0, 0, width, height);\r\n\r\n        var mainRender = instance.surface.getRender(canvas);\r\n        if (mainRender) mainRender(data);\r\n        instance.surface.onRender(canvas, data);\r\n\r\n        var context = canvas.getContext('2d');\r\n        if (context) {\r\n            gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, data.buffer);\r\n            data.imgData.data.set(data.buffer);\r\n            context.putImageData(data.imgData, 0, 0);\r\n        }\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var objectCount = 0;\r\n    var lightCount = 0;\r\n\r\n    Modules.prototype.add('scene', function (instance) {\r\n        instance.scene = TreeNode.extend();\r\n\r\n        instance.scene.addObject = function (info) {\r\n            if (!info.primitive) info.primitive = instance.graphics.gl.TRIANGLES;\r\n            if (!info.model) info.model = mat4.create();\r\n            if (!info.type) info.type = 'object';\r\n            if (!info.name) info.name = 'object_' + (objectCount++);\r\n            this.add(info);\r\n        };\r\n\r\n        instance.scene.addLight = function (info) {\r\n            if (!info.model) info.position = [0, 0, 0];\r\n            if (!info.color) info.color = [0.5, 0.5, 0.5];\r\n            if (!info.type) info.type = 'light';\r\n            if (!info.name) info.name = 'light_' + (lightCount++);\r\n            this.add(info);\r\n        };\r\n\r\n        instance.scene.getObjectByName = function (name) {\r\n            return getObjectByName(this, name);\r\n        };\r\n\r\n        instance.scene.getObjects = function () {\r\n            return this.dfs(function (node) {\r\n                return node.data.type === 'object';\r\n            });\r\n        };\r\n\r\n        instance.scene.getLights = function () {\r\n            return this.dfs(function (node) {\r\n                return node.data.type === 'light';\r\n            });\r\n        };\r\n\r\n        instance.scene.addObject({mesh: Math.HalfEdgeCube()});\r\n        instance.scene.addLight({position: [0, 10, 5]});\r\n    }, ['graphics', 'math-halfEdge-cube']);\r\n\r\n    function getObjectByName (rootNode, name) {\r\n        for (var i = 0; i < rootNode.children.length; i++) {\r\n            var child = rootNode.children[i];\r\n            if (child.data.name === name) {\r\n                return child.data;\r\n            } else {\r\n                var node = getObjectByName(child, name);\r\n                if (node) return node.data;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n})());\r\n"]}