{"version":3,"sources":["ajax.js","array.js","html.js","obj.js","tree.js","events.js","logger.js","cobweb.js","modules.js","asset/mesh.js","asset/shader.js","pane/pane-header.js","pane/pane-types.js","pane/panes.js","math/camera.js","math/octree.js","math/plane.js","math/ray.js","pane/surface/surface.js","math/geometry/geometry.js","math/halfEdge/halfedge-cache.js","math/halfEdge/halfedge.js","pane/surface/interaction/common-interaction.js","pane/surface/interaction/object-interaction.js","pane/surface/interaction/surface-interaction.js","pane/surface/render/render-solid-cache.js","pane/surface/render/render-solid.js","pane/surface/render/surface-render.js","pane/surface/interaction/edit/edit-interaction-action-all.js","pane/surface/interaction/edit/edit-interaction-action-move.js","pane/surface/interaction/edit/edit-interaction-action-scale.js","pane/surface/interaction/edit/edit-interaction-render-cache.js","pane/surface/interaction/edit/edit-interaction-render.js","pane/surface/interaction/edit/edit-interaction-select.js","pane/surface/interaction/edit/edit-interaction.js","graphic.js","main-menu.js","scene.js"],"names":["ajax","options","Object","assign","defaultAjaxOptions","xhttp","XMLHttpRequest","onreadystatechange","this","readyState","status","success","response","error","method","params","objToParams","data","urlWithParams","url","open","async","send","get","Ajax","getJSON","JSON","parse","post","obj","key","encodeURIComponent","slice","window","safeExtend","prototype","property","value","Array","a","concat","i","length","j","splice","callback","s4","Math","floor","random","toString","substring","HTMLElement","oldClassNames","newClassNames","arguments","className","trim","replace","split","unique","join","queryClassNames","currentClassNames","index","name","indexOf","removeClassNames","removeEach","forEach","attr","__data_cache","WeakMap","elAttrs","undefined","set","setAttribute","getAttribute","removeAttribute","Element","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","matches","document","ownerDocument","querySelectorAll","item","query","parentElement","current","clientHeight","style","height","clientWidth","width","guid","overlap","querySelector","newObj","hasOwnProperty","clone","target","varArgs","TypeError","to","nextSource","nextKey","call","defaults","TreeNode","parent","children","isRoot","add","child","constructor","push","remove","dfs","check","out","bfs","extend","_TreeNode","create","EventHandler","isDebug","listeners","trigger","console","debug","apply","on","off","array","reset","own","keys","Logger","instance","handlers","addHandler","level","ALL","args","DEBUG","INFO","info","WARNING","warn","ERROR","log","warning","tmp","levelHandlers","handler","removeHandler","NONE","defaultOptions","container","selector","Cobweb","Error","addClass","logger","events","modules","Modules","onLoadedAll","names","topologicalSort","sortedNames","module","dependencies","depName","nextName","candidates","getInitialCandidates","dependant","dependantName","allDependenciesMet","loadedUntilNow","runCallback","callbacks","all","init","ex","dependencyModule","moduleName","buildHalfEdge","objSource","mesh","vertices","line","startsWith","vertex","map","number","parseFloat","HalfEdgeMesh","addVertices","faceVertices","parseInt","addFace","asset","shader","firstSource","Shader","onCreateCallback","pane","header","createHeader","appendChild","div","createElement","oldPane","newPane","oldType","attrData","setType","types","typeCallbacks","onPaneType","paneHeader","onCreateHeader","dataset","paneType","onPaneCreate","onPaneSplit","origin","onPaneResize","mainPanes","internal","Pane","separator","size","root","Camera","center","rotation","distance","projection","mat4","getViewMatrix","view","eye","getPosition","lookAt","getUpDirection","vec3","rotateX","rotateY","getDirection","direction","sub","normalize","getRay","ray","canvasCoords","canvasSize","Ray","start","auxMat","multiply","invert","transformMat4","up","vRotation","PI","computeLocalAxis","left","forward","cross","canContain","aabb","min","max","findContainingParent","result","maxItems","maxDepth","padding","OctreeNode","depth","items","getAllItems","addItems","addItem","splitIfNeeded","removeItem","removed","mergeIfNeeded","updateDimensions","redistributeItems","subItems","getCollidingNodes","nodes","collidingPoint","geo","rayAABBCollision","getCollidingItems","node","parentAabb","half","scale","ref","mul","containingParent","Octree","_addItem","onVerticesMove","newItems","allItems","updateBounds","fill","Number","MAX_VALUE","copy","Plane","point","normal","fromPoints","b","onSurfacePaneType","canvas","id","surfaceIndex","addEventListener","event","focus","surfaceGUI","float","innerHTML","surface","camera","updateCanvasSize","onCreateSurfaceHeader","label","context","getContext","headerHeight","gui","guiWidth","setTransform","translate","perspective","DEG2RAD","surfaces","parentNode","getBarycentricCoordinates","p1","p2","p3","v0","getVectorFromPoints","v1","v2","d00","dot","d01","d11","d20","d21","denom","getNormal","v3","tmp1","tmp2","output","rayFaceCollision","triangles","triangulateFace","triangle","rayTriangleCollision","triangleNormal","rayPlaneCollision","bary","planePoint","planeNormal","numer","abs","t","minB","maxB","whichPlane","inside","quadrant","Float32Array","maxT","candidatePlane","closestPointsBetweenSegments","a0","a1","b0","b1","p_a","p_b","sc","tc","u","subtract","v","w","c","d","e","D","dP","rayPointDistance","aux","len","pointPointDistance","triangulated","computePointsCenter","points","findClosestPointIndex","position","closestIndex","newDistance","findClosestPoint","findClosestFace","faces","centers","face","computeCenter","superConstructor","cachedHalfEdgeMesh","heMesh","cache","meshes","builder","builders","onCreate","onClean","onVerticesChange","addBuilder","buildEdge","end","edge","HalfEdgeFace","opposite","findOppositeEdge","next","_halfEdge","outEdges","opposites","filter","he","VertexGetFaces","VertexComputeNormal","getFaces","computeRawNormal","computeNormal","bounds","halfEdges","isArray","ownIndex","he1","he2","last","prev","clear","halfEdge","getEdges","getVertices","getVerticesTriangulated","triplet","combine","originalRotation","delta","upNormalMouseDown","clampRotations","getCoordsDelta","initial","rotations","pi2","mouseDownCoords","interactions","common","onMouseWheel","realCoords","wheelDelta","detail","onMouseMove","moving","onMouseDown","which","equals","onMouseUp","object","isHit","hitPoint","scene","getObjects","testRayBBox","bounding","model","selected","getLocalCoordinates","type","onKeyDown","onKeyUp","onClick","layerX","layerY","onContextMenu","preventDefault","onSurfaceEvent","getInteractionCallbacks","keepRunning","setInteraction","interaction","interactionName","onRender","tabIndex","oncontextmenu","onkeydown","onkeyup","onmousewheel","onmousemove","onmousedown","onmouseup","onclick","initialValue","uploadRange","buffer","range","bytesPerFloat32Element","BYTES_PER_ELEMENT","solidBuilder","halfEdgeMesh","indices","GL","Mesh","load","normals","Uint16Array","vertexBuffers","vRange","nRange","dirty","upload","renderObject","primitive","indexBufferName","temp","uniforms","u_mvp","u_model","draw","renderBounds","octree","updateBoundsModel","boundsModel","identity","lerp","solidShader","wireframeShader","colors","wireframe","grid","lines","colorsArray","bufferIndex","createVertexBuffer","axisX","axisZ","renders","solid","lightDirection","u_lightvector","graphics","gl","LINES","setRender","u_color","render","getRender","renderName","panes","edit","actions","selection","isEmpty","addAll","action","initialCoords","vec2","selectionNormal","axisOrigin","isY","move","axis","lastCoords","objects","selectedObj","originalPosition","currentRay","initialRay","cameraDirection","hitPointInitial","hitPointCurrent","selectionCenter","getCenter","currentRayEnd","scaleAndAdd","axisStart","axisEnd","isControlDown","round","sceneObj","getObjectByName","restore","selectionCenter2d","initialDistance","scaleVector","wireframeBuilder","verticesBuilder","cRange","color","_selected","POINTS","toggleVertex","toggle","selectedVertices","allSelected","includes","toggleFace","arrayName","initObjectIfNeeded","delObjectIfNeeded","edges","objSelection","getFacesFromVertices","vertexSelectionMargin","rayVertices","uniqueFaces","closestFace","vertexDistance","isMouseDown","isShiftDown","delta2d","setAction","runAction","shiftDown","shiftKey","ctrlKey","callbackName","drawRenderTarget","viewport","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","mainRender","surfaceRender","getError","drawImage","Graphics","screen","animate","ondraw","renderTargets","clearColor","enable","DEPTH_TEST","getParameter","VERSION","SHADING_LANGUAGE_VERSION","VENDOR","mainMenu","insertBefore","firstChild","rootNode","objectCount","addObject","TRIANGLES"],"mappings":"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","file":"cobweb.min.js","sourcesContent":["((function(){\r\n    'use strict';\r\n\r\n    var defaultAjaxOptions = {\r\n        method: 'GET',\r\n        url: '',\r\n        data: {},\r\n        async: true,\r\n        success: null,\r\n        error: null\r\n    };\r\n\r\n    function ajax (options) {\r\n        options = Object.assign({}, defaultAjaxOptions, options);\r\n        var xhttp = new XMLHttpRequest();\r\n        xhttp.onreadystatechange = function() {\r\n            if (this.readyState == 4) {\r\n                if (this.status == 200) {\r\n                    if (options.success) options.success(this.response);\r\n                } else {\r\n                    if (options.error) error.success(this.response);\r\n                }\r\n            }\r\n        };\r\n        if (options.method === 'GET') {\r\n            var params = objToParams(options.data);\r\n            var urlWithParams = options.url + (params ? '?' + params : '');\r\n            xhttp.open(options.method, urlWithParams, options.async);\r\n            xhttp.send();\r\n        } else if (options.method === 'POST') {\r\n            xhttp.open(options.method, options.url, options.async);\r\n            xhttp.send(options.data);\r\n        }\r\n        return xhttp;\r\n    }\r\n\r\n    function get (url, data, success) {\r\n        if (!success) {\r\n            success = data;\r\n            data = null;\r\n        }\r\n        return Ajax.ajax({\r\n            url: url,\r\n            data: data,\r\n            success: success,\r\n            method: 'GET'\r\n        });\r\n    }\r\n\r\n    function getJSON (url, data, success) {\r\n        if (!success) {\r\n            success = data;\r\n            data = null;\r\n        }\r\n        return Ajax.ajax({\r\n            url: url,\r\n            data: data,\r\n            success: function (response) {\r\n                success(JSON.parse(response));\r\n            },\r\n            method: 'GET'\r\n        });\r\n    }\r\n\r\n    function post (url, data, success) {\r\n        if (!success) {\r\n            success = data;\r\n            data = null;\r\n        }\r\n        return Ajax.ajax({\r\n            url: url,\r\n            data: data,\r\n            success: success,\r\n            method: 'POST'\r\n        });\r\n    }\r\n\r\n    window.Ajax = {\r\n        ajax: ajax,\r\n        get: get,\r\n        getJSON: getJSON,\r\n        post: post\r\n    };\r\n\r\n    function objToParams (obj) {\r\n        var params = '';\r\n        for (var key in obj) {\r\n            var nextParam = key + '=' + encodeURIComponent(obj[key]);\r\n            params += '&' + nextParam;\r\n        }\r\n        return params.slice(1);\r\n    }\r\n})());\r\n","((function(){\r\n    'use strict';\r\n\r\n    safeExtend(Array.prototype, 'unique', function() {\r\n        var a = this.concat();\r\n        for(var i = 0; i < a.length; ++i)\r\n            for(var j = i + 1; j < a.length; ++j)\r\n                if(a[i] === a[j]) a.splice(j--, 1);\r\n        return a;\r\n    });\r\n\r\n    safeExtend(Array.prototype, 'forEach', function(callback) {\r\n        for (var i = 0; i < this.length; i++)\r\n            callback(this[i], i, this);\r\n    });\r\n\r\n    function safeExtend(prototype, property, value) {\r\n        if(!prototype[property]) prototype[property] = value;\r\n    }\r\n})());\r\n","((function(){\r\n    'use strict';\r\n\r\n    safeExtend(HTMLElement.prototype, 'addClass', function () {\r\n        var oldClassNames, newClassNames;\r\n        for(var i in arguments){\r\n            oldClassNames = !this.className ? [] : this.className.trim().replace(/\\s+/g, ' ').split(' ');\r\n            newClassNames = !arguments[i] ? [] : arguments[i].trim().replace(/\\s+/g, ' ').split(' ');\r\n            this.className = oldClassNames.concat(newClassNames).unique().join(' ');\r\n        }\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'hasClass', function () {\r\n        var queryClassNames, currentClassNames = !this.className ? [] : this.className.trim().replace(/\\s+/g, ' ').split(' ');\r\n        for(var i in arguments){\r\n            queryClassNames = !arguments[i] ? [] : arguments[i].trim().replace(/\\s+/g, ' ').split(' ');\r\n            for (var index = 0; index < queryClassNames.length; index++) {\r\n                var name = queryClassNames[index];\r\n                if (currentClassNames.indexOf(name) == -1)\r\n                    return false;\r\n            }\r\n        }\r\n        return true;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'removeClass', function () {\r\n        var index = 0, currentClassNames, removeClassNames;\r\n        var removeEach = function (name) {\r\n            index = currentClassNames.indexOf(name);\r\n            if (index != -1)\r\n                currentClassNames.splice(index, 1);\r\n        };\r\n        for(var i in arguments){\r\n            currentClassNames = !this.className ? [] : this.className.trim().replace(/\\s+/g, ' ').split(' ');\r\n            removeClassNames = !arguments[i] ? [] : arguments[i].trim().replace(/\\s+/g, ' ').split(' ');\r\n            removeClassNames.forEach(removeEach);\r\n            this.className = currentClassNames.unique().join(' ');\r\n        }\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'data', function (attr, value) {\r\n        if (!window.__data_cache) window.__data_cache = new WeakMap();\r\n        var elAttrs = window.__data_cache.get(this) || {};\r\n        if (value !== undefined) {\r\n            elAttrs[attr] = value;\r\n            window.__data_cache.set(this, elAttrs);\r\n        } else {\r\n            if (attr) return elAttrs && elAttrs[attr];\r\n            else return elAttrs;\r\n        }\r\n        return this;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'setData', function (data) {\r\n        if (!window.__data_cache) window.__data_cache = new WeakMap();\r\n        window.__data_cache.set(this, data);\r\n        return this;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'attr', function (name, value) {\r\n        if (value !== undefined)\r\n            this.setAttribute(name, value);\r\n        else if (value === null)\r\n            this.removeAttribute(name);\r\n        else\r\n            return this.getAttribute(name);\r\n        return this;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'attrData', function (name, value) {\r\n        return this.attr('data-' + name, value);\r\n    });\r\n\r\n    safeExtend(Element.prototype, 'matches',\r\n        Element.prototype.matchesSelector ||\r\n        Element.prototype.mozMatchesSelector ||\r\n        Element.prototype.msMatchesSelector ||\r\n        Element.prototype.oMatchesSelector ||\r\n        Element.prototype.webkitMatchesSelector ||\r\n        function(s) {\r\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\r\n                i = matches.length;\r\n            while (--i >= 0 && matches.item(i) !== this) {}\r\n            return i > -1;\r\n        }\r\n    );\r\n\r\n    safeExtend(HTMLElement.prototype, 'parent', function (query) {\r\n        if (!query) return this.parentElement;\r\n        var current = this.parentElement;\r\n        while (!current.matches(query))\r\n            current = current.parentElement;\r\n        return current;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'height', function () {\r\n        if (arguments.length == 1) {\r\n            var value = arguments[0];\r\n            if (typeof value === 'number')\r\n                this.style.height = value + 'px';\r\n            else\r\n                this.style.height = value;\r\n        } else\r\n            return this.clientHeight;\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'width', function () {\r\n        if (arguments.length == 1) {\r\n            var value = arguments[0];\r\n            if (typeof value === 'number')\r\n                this.style.width = value + 'px';\r\n            else\r\n                this.style.width = value;\r\n        } else\r\n            return this.clientWidth;\r\n    });\r\n\r\n    safeExtend(window, 'guid', function () {\r\n        return 'GUID-' + s4() + '-' + s4() + '-' + s4();\r\n    });\r\n\r\n    safeExtend(HTMLElement.prototype, 'guid', function () {\r\n        var guid = null, overlap = null;\r\n        do {\r\n            guid = window.guid();\r\n            overlap = document.querySelector('#' + guid);\r\n        } while(overlap);\r\n        this.attr('id', guid);\r\n        return guid;\r\n    });\r\n\r\n    function safeExtend(prototype, property, value) {\r\n        if(!prototype[property]) prototype[property] = value;\r\n    }\r\n\r\n    function s4() {\r\n        return Math.floor((1 + Math.random()) * 0x10000)\r\n            .toString(16).substring(1);\r\n    }\r\n})());\r\n","((function(){\r\n    'use strict';\r\n\r\n    safeExtend(Object, 'clone', function (obj) {\r\n        var newObj = {};\r\n        for (var property in obj)\r\n            if (obj.hasOwnProperty(property)) {\r\n                var value = obj[property];\r\n                if (typeof value === 'object')\r\n                    newObj[property] = Object.clone(obj[property]);\r\n                else\r\n                    newObj[property] = obj[property];\r\n            }\r\n        return newObj;\r\n    });\r\n\r\n    safeExtend(Object, 'assign', function(target, varArgs) {\r\n        if (target === null)\r\n            throw new TypeError('Cannot convert undefined or null to object');\r\n        var to = Object(target);\r\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n        for (var index = 1; index < arguments.length; index++) {\r\n            var nextSource = arguments[index];\r\n            if (nextSource !== null) {\r\n                for (var nextKey in nextSource) {\r\n                    if (hasOwnProperty.call(nextSource, nextKey)) {\r\n                        to[nextKey] = nextSource[nextKey];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return to;\r\n    });\r\n\r\n    safeExtend(Object, 'extend', function(options, defaults) {\r\n        return Object.assign({}, defaults, options);\r\n    });\r\n\r\n    function safeExtend(prototype, property, value) {\r\n        if(!prototype[property]) prototype[property] = value;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var TreeNode = function (parent, data) {\r\n        this.parent = parent || null;\r\n        this.data = data || {};\r\n        this.children = [];\r\n    };\r\n\r\n    window.TreeNode = TreeNode;\r\n\r\n    TreeNode.prototype.isRoot = function () {\r\n        return !this.parent;\r\n    };\r\n\r\n    TreeNode.prototype.add = function (data) {\r\n        var child = new this.constructor(this, data);\r\n        this.children.push(child);\r\n        return child;\r\n    };\r\n\r\n    TreeNode.prototype.remove = function (index) {\r\n        this.children.slice(index, 1);\r\n        return this;\r\n    };\r\n\r\n    TreeNode.prototype.dfs = function (check) {\r\n        var out = [];\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            if (!check || (check && check(this.children[i])))\r\n                out.push(this.children[i]);\r\n            out.concat(this.children[i].dfs(check));\r\n        }\r\n        return out;\r\n    };\r\n\r\n    TreeNode.prototype.bfs = function (check) {\r\n        var out = [], i;\r\n        for (i = 0; i < this.children.length; i++)\r\n            if (!check || (check && check(this.children[i])))\r\n                out.push(this.children[i]);\r\n        for (i = 0; i < this.children.length; i++)\r\n            out.concat(this.children[i].bfs(check));\r\n        return out;\r\n    };\r\n\r\n    TreeNode.extend = function () {\r\n        var _TreeNode = function (parent, data) {\r\n            TreeNode.call(this, parent, data);\r\n        };\r\n        _TreeNode.prototype = Object.create(TreeNode.prototype);\r\n        _TreeNode.prototype.constructor = _TreeNode;\r\n        return new _TreeNode();\r\n    };\r\n})());\r\n","((function() {\r\n    'use strict';\r\n\r\n    var EventHandler = function (isDebug) {\r\n        this.isDebug = !!isDebug;\r\n        this.listeners = {};\r\n    };\r\n\r\n    EventHandler.prototype.trigger = function() {\r\n        var name = arguments[0];\r\n        var listeners = this.listeners[name] || [];\r\n        Array.prototype.splice.call(arguments, 0, 1);\r\n        if (this.isDebug) console.debug(name, arguments);\r\n        for (var i = 0; i < listeners.length; i++)\r\n            listeners[i].apply(null, arguments);\r\n    };\r\n\r\n    EventHandler.prototype.on = function(name, callback) {\r\n        if (!this.listeners[name]) this.listeners[name] = [];\r\n        this.listeners[name].push(callback);\r\n    };\r\n\r\n    EventHandler.prototype.off = function(name) {\r\n        delete this.listeners[name];\r\n    };\r\n\r\n    EventHandler.prototype.off = function(name, callback) {\r\n        if (this.listeners[name]) {\r\n            var array = this.listeners[name];\r\n            if (array.indexOf(callback) > -1) array.splice(index, 1);\r\n        }\r\n    };\r\n\r\n    EventHandler.prototype.reset = function() {\r\n        var own = this;\r\n        Object.keys(this.listeners).forEach(function(key) {\r\n            delete own.listeners[key];\r\n        });\r\n    };\r\n\r\n    window.EventHandler = EventHandler;\r\n})());\r\n","/* jshint loopfunc:true */\r\n\r\n((function(){\r\n    'use strict';\r\n\r\n    var Logger = function (instance) {\r\n        this.handlers = [];\r\n\r\n        this.addHandler(this.level.ALL, function (level, args) {\r\n            if (Logger.prototype.level.DEBUG === level) {\r\n                console.debug.apply(this, args);\r\n            } else if (Logger.prototype.level.INFO === level) {\r\n                console.info.apply(this, args);\r\n            } else if (Logger.prototype.level.WARNING === level) {\r\n                console.warn.apply(this, args);\r\n            } else if (Logger.prototype.level.ERROR === level) {\r\n                console.error.apply(this, args);\r\n            }\r\n        });\r\n    };\r\n\r\n    Logger.prototype.debug = function () {\r\n        this.log(Logger.prototype.level.DEBUG, arguments);\r\n    };\r\n\r\n    Logger.prototype.info = function () {\r\n        this.log(Logger.prototype.level.INFO, arguments);\r\n    };\r\n\r\n    Logger.prototype.warning = function () {\r\n        this.log(Logger.prototype.level.WARNING, arguments);\r\n    };\r\n\r\n    Logger.prototype.error = function () {\r\n        this.log(Logger.prototype.level.ERROR, arguments);\r\n    };\r\n\r\n    Logger.prototype.log = function (level, args) {\r\n        var tmp = level;\r\n        var levelHandlers = this.handlers[tmp] || [];\r\n        while (tmp >= 0) {\r\n            levelHandlers.forEach(function (handler) {\r\n                handler(level, args);\r\n            });\r\n            levelHandlers = this.handlers[--tmp] || [];\r\n        }\r\n    };\r\n\r\n    Logger.prototype.addHandler = function (level, callback) {\r\n        if (!this.handlers[level])\r\n            this.handlers[level] = [];\r\n        this.handlers[level].push(callback);\r\n    };\r\n\r\n    Logger.prototype.removeHandler = function (level, callback) {\r\n        var levelHandlers = this.handlers[level];\r\n        if (levelHandlers) {\r\n            var index = levelHandlers.indexOf(callback);\r\n            if (index > -1)\r\n                levelHandlers.splice(index, 1);\r\n        }\r\n    };\r\n\r\n    Logger.prototype.level = {\r\n        ALL: 0,\r\n        DEBUG: 1,\r\n        INFO: 2,\r\n        WARNING: 3,\r\n        ERROR: 4,\r\n        NONE: 5,\r\n    };\r\n\r\n    window.Logger = Logger;\r\n})());\r\n","(function(){\r\n    'use strict';\r\n\r\n    var defaultOptions = {\r\n        container: {\r\n            selector: '#cobweb'\r\n        }\r\n    };\r\n\r\n    var Cobweb = function (options) {\r\n        this.options = Object.assign({}, defaultOptions, options);\r\n        var instance = this;\r\n\r\n        this.container = document.querySelector(this.options.container.selector);\r\n        if (!this.container)\r\n            throw new Error('Invalid container selector: \\'' +\r\n                this.options.container.selector + '\\'');\r\n        this.container.addClass('cb-container');\r\n        this.container.data('instance', this);\r\n\r\n        this.logger = new Logger(this, true);\r\n        this.events = new EventHandler(true);\r\n        this.modules = new Modules([this], {\r\n            onLoadedAll: function (names) {\r\n                instance.events.trigger('modules.loaded.all', names);\r\n                instance.events.trigger('app.loaded');\r\n            }\r\n        });\r\n    };\r\n\r\n    window.Cobweb = Cobweb;\r\n}());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Modules = function (params, callbacks) {\r\n        callbacks = callbacks || {};\r\n        var modules = Modules.prototype.all;\r\n        try {\r\n            var sortedNames = topologicalSort(modules);\r\n            for (var i = 0; i < sortedNames.length; i++ ) {\r\n                var name = sortedNames[i];\r\n                var module = modules[name];\r\n                try {\r\n                    module.init.apply(this, params);\r\n                    runCallback(callbacks, 'onLoaded', [name, module]);\r\n                } catch (ex) {\r\n                    console.error('Error loading module:', name, ex);\r\n                    runCallback(callbacks, 'onError', [ex, name, module]);\r\n                }\r\n            }\r\n            runCallback(callbacks, 'onLoadedAll', [sortedNames]);\r\n        } catch (ex) {\r\n            console.error('Error loading modules:', ex);\r\n        }\r\n    };\r\n\r\n    Modules.prototype.all = {};\r\n    Modules.prototype.add = function (name, init, dependencies) {\r\n        dependencies = dependencies || [];\r\n\r\n        var dependant = [];\r\n        var dependencyModule, i;\r\n        for (var moduleName in this.all) {\r\n            var module = this.all[moduleName];\r\n            for (i = 0; i < module.dependencies.length; i++)\r\n                if (module.dependencies[i] === name)\r\n                    dependant.push(moduleName);\r\n        }\r\n        for (i = 0; i < dependencies.length; i++) {\r\n            dependencyModule = this.all[dependencies[i]];\r\n            if (dependencyModule) dependencyModule.dependant.push(name);\r\n        }\r\n\r\n        this.all[name] = {\r\n            dependencies: dependencies,\r\n            dependant: dependant,\r\n            init: init\r\n        };\r\n    };\r\n\r\n    window.Modules = Modules;\r\n\r\n    function topologicalSort (modules) {\r\n        var sortedNames = [];\r\n\r\n        var module = null, i = 0;\r\n        for (var name in modules) {\r\n            module = modules[name];\r\n            for (i = 0; i < module.dependencies.length; i++) {\r\n                var depName = module.dependencies[i];\r\n                if (!modules[depName])\r\n                    throw new Error('Missing module: ' + depName);\r\n            }\r\n        }\r\n\r\n        var nextName = null;\r\n        var candidates = getInitialCandidates(modules);\r\n        while (candidates.length > 0) {\r\n            nextName = candidates.splice(0, 1)[0];\r\n            module = modules[nextName];\r\n            if (module) {\r\n                sortedNames.push(nextName);\r\n                for (i = 0; i < module.dependant.length; i++) {\r\n                    var dependantName = module.dependant[i];\r\n                    if (allDependenciesMet(sortedNames, modules[dependantName]))\r\n                        candidates.push(dependantName);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (Object.keys(modules).length !== sortedNames.length)\r\n            throw new Error('Dependency cycle!');\r\n\r\n        return sortedNames;\r\n    }\r\n\r\n    function getInitialCandidates (modules) {\r\n        var candidates = [];\r\n        for (var name in modules)\r\n            if (modules[name].dependencies.length === 0)\r\n                candidates.push(name);\r\n        return candidates;\r\n    }\r\n\r\n    function allDependenciesMet (loadedUntilNow, module) {\r\n        for (var i = 0; i < module.dependencies.length; i++)\r\n            if (loadedUntilNow.indexOf(module.dependencies[i]) === -1) return false;\r\n        return true;\r\n    }\r\n\r\n    function runCallback (callbacks, name, params) {\r\n        var callback = callbacks[name];\r\n        var isFunction = typeof callback === 'function';\r\n        if (isFunction) callback.apply(null, params);\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('mesh', function (instance) {\r\n        instance.asset = instance.asset || {};\r\n        instance.asset.mesh = {\r\n            get: function (name, callback) {\r\n                Ajax.get('asset/mesh/' + name + '.obj', function (response) {\r\n                    callback(buildHalfEdge(response));\r\n                });\r\n            }\r\n        };\r\n    });\r\n\r\n    function buildHalfEdge (objSource) {\r\n        var mesh = null;\r\n        var vertices = [];\r\n        var lines = objSource.split(/\\r?\\n/);\r\n        lines.forEach(function (line) {\r\n            if (line.startsWith('v')) {\r\n                var vertex = line.substring(2).split(' ').map(function (number) {\r\n                    return parseFloat(number);\r\n                });\r\n                vertices.push(vertex);\r\n            } else if (line.startsWith('f')) {\r\n                if (mesh === null) {\r\n                    mesh = new Math.HalfEdgeMesh();\r\n                    mesh.addVertices(vertices);\r\n                }\r\n                var faceVertices = line.substring(2).split(' ').map(function (index) {\r\n                    return vertices[parseInt(index) - 1];\r\n                });\r\n                mesh.addFace(faceVertices);\r\n            }\r\n        });\r\n        return mesh;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('shader', function (instance) {\r\n        instance.asset = instance.asset || {};\r\n        instance.asset.shader = {\r\n            get: function (name, callback) {\r\n                var shader = null, firstSource = null;\r\n                Ajax.get('asset/shader/' + name + '.vert', function (response) {\r\n                    if (firstSource) {\r\n                        shader = new Shader(response, firstSource);\r\n                        callback(shader);\r\n                    } firstSource = response;\r\n                });\r\n                Ajax.get('asset/shader/' + name + '.frag', function (response) {\r\n                    if (firstSource) {\r\n                        shader = new Shader(firstSource, response);\r\n                        callback(shader);\r\n                    } firstSource = response;\r\n                });\r\n            }\r\n        };\r\n    });\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('pane-header', function (instance) {\r\n        instance.events.on('pane.create', function (pane) {\r\n            onCreateCallback(pane, instance);\r\n        });\r\n    }, ['pane-types']);\r\n\r\n    function onCreateCallback (pane, instance) {\r\n        var header = createHeader();\r\n        pane.appendChild(header);\r\n    }\r\n\r\n    function createHeader () {\r\n        var div = document.createElement('div');\r\n        div.className = 'pane-header';\r\n        return div;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('pane-types', function (instance) {\r\n\r\n        instance.events.on('pane.split', function (oldPane, newPane) {\r\n            var oldType = oldPane.attrData('pane-type');\r\n            if (oldType) instance.pane.setType(newPane, oldType);\r\n        });\r\n\r\n        instance.pane.types = {};\r\n\r\n        instance.pane.setType = function (pane, name) {\r\n            if (this.types[name]) {\r\n                var typeCallbacks = this.types[name];\r\n                typeCallbacks.onPaneType(pane, instance);\r\n                var paneHeader = pane.querySelector('.pane-header');\r\n                typeCallbacks.onCreateHeader(paneHeader, instance);\r\n                pane.dataset.paneType = name;\r\n            }\r\n        };\r\n    }, ['pane']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('pane', function (instance) {\r\n        var mainPanes = document.createElement('div');\r\n        mainPanes.className = 'main-panes';\r\n\r\n        var container = document.querySelector(instance.options.container.selector);\r\n        container.appendChild(mainPanes);\r\n\r\n        instance.events.on('app.loaded', function () {\r\n            instance.pane.internal = new Pane({\r\n                container: 'div.main-panes',\r\n                separator: {\r\n                    size: 3\r\n                },\r\n                callbacks: {\r\n                    onPaneCreate: onPaneCreate,\r\n                    onPaneSplit: onPaneSplit,\r\n                    onPaneResize: onPaneResize,\r\n                    //onPaneMerge: onPaneMerge,\r\n                    //onPaneDestroy: onPaneDestroy,\r\n                }\r\n            });\r\n\r\n            var root = instance.pane.internal.container.querySelector('.pane');\r\n            instance.pane.setType(root, 'surface');\r\n        });\r\n\r\n        instance.pane = {};\r\n\r\n        function onPaneCreate (pane) {\r\n            instance.events.trigger('pane.create', pane);\r\n        }\r\n\r\n        function onPaneSplit (origin, newPane) {\r\n            instance.events.trigger('pane.split', origin, newPane);\r\n        }\r\n\r\n        function onPaneResize (pane) {\r\n            instance.events.trigger('pane.resize', pane);\r\n        }\r\n\r\n        function onPaneMerge (merger, toRemove) {\r\n            console.debug('onPaneMerge', merger, toRemove);\r\n        }\r\n\r\n        function onPaneDestroy (pane) {\r\n            console.debug('onPaneDestroy', pane);\r\n        }\r\n    });\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Camera = function (center, rotation, distance) {\r\n        this.center = center || [0, 0, 0];\r\n        this.rotation = rotation || [2.8, 0.5];\r\n        this.distance = distance || 15;\r\n        this.projection = mat4.create();\r\n    };\r\n\r\n    Camera.prototype.getViewMatrix = function (view) {\r\n        view = view || mat4.create();\r\n        var eye = [0, 0, 0];\r\n        this.getPosition(eye);\r\n        mat4.lookAt(view, eye, this.center, this.getUpDirection());\r\n        return view;\r\n    };\r\n\r\n    Camera.prototype.getPosition = function (eye) {\r\n        eye = eye || vec3.create();\r\n        vec3.set(eye, 0, 0, -this.distance);\r\n        vec3.rotateX(eye, eye, this.rotation[1]);\r\n        vec3.rotateY(eye, eye, -this.rotation[0]);\r\n        return eye;\r\n    };\r\n\r\n    Camera.prototype.getDirection = function (direction) {\r\n        direction = direction || vec3.create();\r\n        var eye = this.getPosition();\r\n        vec3.sub(direction, this.center, eye);\r\n        vec3.normalize(direction, direction);\r\n        return direction;\r\n    };\r\n\r\n    Camera.prototype.getRay = function (ray, canvasCoords, canvasSize) {\r\n        ray = ray || new Math.Ray();\r\n        this.getPosition(ray.start);\r\n        vec3.set(ray.direction, canvasCoords[0] / (canvasSize[0] * 0.5) - 1.0,\r\n            canvasCoords[1] / (canvasSize[1] * 0.5) - 1.0, 1);\r\n        var auxMat = mat4.create();\r\n        mat4.multiply(auxMat, this.projection, this.getViewMatrix());\r\n        mat4.invert(auxMat, auxMat);\r\n        vec3.transformMat4(ray.direction, ray.direction, auxMat);\r\n        vec3.normalize(ray.direction, ray.direction);\r\n        return ray;\r\n    };\r\n\r\n    Camera.prototype.getUpDirection = function (up) {\r\n        up = up || vec3.create();\r\n        var vRotation = this.rotation[1];\r\n        if (vRotation >= Math.PI / 2 &&\r\n            vRotation <= ((Math.PI * 3) / 2))\r\n            vec3.set(up, 0, 1, 0);\r\n        else vec3.set(up, 0, -1, 0);\r\n        return up;\r\n    };\r\n\r\n    Camera.prototype.computeLocalAxis = function () {\r\n        var left = [0, 0, 0];\r\n        var up = [0, 0, 0];\r\n\r\n        var forward = this.getDirection();\r\n        vec3.cross(left, forward, [0, 1, 0]);\r\n        vec3.cross(up, forward, left);\r\n\r\n        return {up: up, left: left};\r\n    };\r\n\r\n    window.Math.Camera = Camera;\r\n})());\r\n","(function () {\r\n\t'use strict';\r\n\r\n\tvar defaultOptions = {\r\n\t\tmaxItems: 10,\r\n\t\tmaxDepth: 10,\r\n\t\tpadding: 0.1\r\n\t};\r\n\r\n\tvar OctreeNode = function (parent, depth) {\r\n\t\tthis.items = [];\r\n\t\tthis.children = null;\r\n\t\tthis.depth = depth || 0;\r\n\t\tthis.parent = parent || null;\r\n\t\tthis.aabb = { max: [0, 0, 0], min: [0, 0, 0] };\r\n\r\n\t\tthis.root = this;\r\n\t\twhile (this.root.parent !== null)\r\n\t\t\tthis.root = this.root.parent;\r\n\t};\r\n\r\n\tOctreeNode.prototype.getAllItems = function (container) {\r\n\t\tcontainer = container || [];\r\n\t\tvar i;\r\n        if (!this.children) {\r\n\t\t\tcontainer = container.concat(this.items);\r\n\t\t} else {\r\n            for (i = 0; i < this.children.length; i++)\r\n                container = this.children[i].getAllItems(container);\r\n        }\r\n\t\treturn container;\r\n\t};\r\n\r\n\tOctreeNode.prototype.addItems = function (items) {\r\n\t\tvar result = false;\r\n\t\tfor (var i = 0; i < items.length; i++) {\r\n\t\t\tvar item = items[i];\r\n\t\t\tresult |= this.addItem(item);\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\tOctreeNode.prototype.addItem = function (item) {\r\n\t\tif (this.canContain(item)) {\r\n\t\t\tif (this.children) {\r\n\t\t\t\tfor (var i = 0; i < 8; i++)\r\n\t\t\t\t\tif (this.children[i].addItem(item))\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\tthis.items.push(item);\r\n\t\t\t\tthis.splitIfNeeded();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tOctreeNode.prototype.removeItem = function (item) {\r\n\t\tvar removed = false;\r\n\t\tvar index = this.items.indexOf(item);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.items.splice(index, 1);\r\n\t\t\tthis.mergeIfNeeded();\r\n\t\t\tremoved = true;\r\n\t\t} else {\r\n\t\t\tif (this.children) {\r\n\t\t\t\tfor (var i = 0; i < this.children.length; i++) {\r\n\t\t\t\t\tremoved |= this.children[i].removeItem(item);\r\n\t\t\t\t\tif (removed) break;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (removed) this.mergeIfNeeded();\r\n\t\treturn removed;\r\n\t};\r\n\r\n\tOctreeNode.prototype.splitIfNeeded = function () {\r\n\t\tif (this.root.options.maxItems < this.items.length &&\r\n\t\t\tthis.root.options.maxDepth > this.depth) {\r\n\t\t\tthis.children = [];\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tthis.children[i] = new OctreeNode(this, this.depth + 1);\r\n\t\t\t\tthis.children[i].updateDimensions(this.aabb, i);\r\n\t\t\t}\r\n\t\t\tthis.redistributeItems(this.items);\r\n\t\t\tthis.items = [];\r\n\t\t}\r\n\t};\r\n\r\n\tOctreeNode.prototype.mergeIfNeeded = function () {\r\n\t\tif (this.children) {\r\n\t\t\tvar canMerge = false;\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\tthis.children[i].mergeIfNeeded();\r\n\t\t\t\tcanMerge = !this.children[i].children;\r\n\t\t\t\tif (!canMerge) return false;\r\n\t\t\t}\r\n\t\t\tvar subItems = this.getAllItems();\r\n\t\t\tif (this.root.options.maxItems > subItems.length) {\r\n\t\t\t\tthis.children = null;\r\n\t\t\t\tthis.redistributeItems(subItems);\r\n\t\t\t\treturn true;\r\n\t\t\t} else return false;\r\n\t\t} else return false;\r\n\t};\r\n\r\n\tOctreeNode.prototype.canContain = function (item) {\r\n\t\treturn canContain(item, this.aabb);\r\n\t};\r\n\r\n\tOctreeNode.prototype.getCollidingNodes = function (ray) {\r\n\t\tvar nodes = [];\r\n\t\tvar aabb = this.aabb;\r\n\t\tvar collidingPoint = [0, 0, 0];\r\n\t\tif (Math.geo.rayAABBCollision(ray.start, ray.direction,\r\n\t\t\tthis.aabb.min, this.aabb.max, collidingPoint)) {\r\n\t\t\tif (this.children) {\r\n\t\t\t\tfor (var i = 0; i < this.children.length; i++) {\r\n\t\t\t\t\tvar child = this.children[i];\r\n\t\t\t\t\tnodes = nodes.concat(child.getCollidingNodes(ray));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnodes.push(this);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nodes;\r\n\t};\r\n\r\n\tOctreeNode.prototype.getCollidingItems = function (ray) {\r\n\t\tvar items = [];\r\n\t\tthis.getCollidingNodes(ray).forEach(function (node) {\r\n\t\t\titems = items.concat(node.items);\r\n\t\t});\r\n\t\treturn items;\r\n\t};\r\n\r\n\tOctreeNode.prototype.updateDimensions = function (parentAabb, index) {\r\n\t\tvar half = [0, 0, 0];\r\n\t\tvec3.sub(half, parentAabb.max, parentAabb.min);\r\n\t\tvec3.scale(half, half, 0.5);\r\n\t\tvar ref = [!(index & 1), !(index & 2), !(index & 4)];\r\n\t\tvec3.mul(this.aabb.min, half, ref);\r\n\t\tvec3.add(this.aabb.min, this.aabb.min, parentAabb.min);\r\n\t\tvec3.add(this.aabb.max, this.aabb.min, half);\r\n\t\tif (this.children)\r\n\t\t\tfor (var i = 0; i < this.children.length; i++)\r\n\t\t\t\tthis.children[i].updateDimensions(this.aabb, i);\r\n\t};\r\n\r\n\tOctreeNode.prototype.redistributeItems = function (items) {\r\n\t\titems = items || this.items;\r\n\t\tfor (var i = 0; i < items.length; i++) {\r\n\t\t\tvar item = items[i];\r\n\t\t\tvar containingParent = findContainingParent(this, item);\r\n\t\t\tif (containingParent === null) {\r\n\t\t\t\tconsole.warn('Recomputing bounds...');\r\n\t\t\t\tthis.root.updateDimensions([item]);\r\n\t\t\t\tcontainingParent = findContainingParent(this, item);\r\n\t\t\t}\r\n\t\t\tcontainingParent.addItem(item);\r\n\t\t}\r\n\t};\r\n\r\n\tvar Octree = function (options) {\r\n\t\tthis.options = Object.assign({}, defaultOptions, options);\r\n\t\tOctreeNode.call(this);\r\n\t};\r\n\r\n\tOctree.prototype = Object.create(OctreeNode.prototype);\r\n\tOctree.prototype.constructor = OctreeNode;\r\n\r\n\tvar _addItem = Octree.prototype.addItem;\r\n\tOctree.prototype.addItem = function (item) {\r\n\t\tif (!this.canContain(item))\r\n\t\t\tthis.updateDimensions([item]);\r\n\t\treturn _addItem.call(this, item);\r\n\t};\r\n\r\n\tOctree.prototype.onVerticesMove = function (items) {\r\n\t\tfor (var i = 0; i < items.length; i++)\r\n\t\t\tif (this.removeItem(items[i]))\r\n\t\t\t\tthis.addItem(items[i]);\r\n\t};\r\n\r\n\tOctree.prototype.updateDimensions = function (newItems) {\r\n\t\tvar allItems = this.getAllItems(newItems);\r\n\t\tthis.updateBounds(allItems);\r\n\t\tif (this.children) {\r\n\t\t\tfor (var i = 0; i < this.children.length; i++) {\r\n\t\t\t\tthis.children[i].updateDimensions(this.aabb, i);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tOctree.prototype.updateBounds = function (items) {\r\n\t\tvar max = [0, 0, 0].fill(-Number.MAX_VALUE);\r\n\t\tvar min = [0, 0, 0].fill(Number.MAX_VALUE);\r\n\t\tvar padding = this.options.padding;\r\n\t\titems.forEach(function (item) {\r\n\t\t\tfor (var j = 0; j < 3; j++) {\r\n\t\t\t\tmin[j] = Math.min(min[j], item[j] - padding);\r\n\t\t\t\tmax[j] = Math.max(max[j], item[j] + padding);\r\n\t\t\t}\r\n\t\t});\r\n\t\tvec3.copy(this.aabb.min, min);\r\n\t\tvec3.copy(this.aabb.max, max);\r\n\t};\r\n\r\n\tMath.Octree = Octree;\r\n\r\n\tfunction canContain (item, aabb) {\r\n\t\tfor (var j = 0; j < 3; j++) {\r\n\t\t\tif (item[j] < aabb.min[j]) return false;\r\n\t\t\tif (item[j] > aabb.max[j]) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction findContainingParent (current, item) {\r\n\t\tvar result = current;\r\n\t\twhile (result && !result.canContain(item))\r\n\t\t\tresult = result.parent;\r\n\t\treturn result;\r\n\t}\r\n})();\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Plane = function (point, normal) {\r\n        this.normal = normal || [0, 1, 0];\r\n        this.point = point || vec3.create();\r\n        vec3.normalize(this.normal, this.normal);\r\n    };\r\n\r\n    window.Math.Plane = Plane;\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Ray = function (start, direction) {\r\n        this.direction = direction || [0, 0, 1];\r\n        this.start = start || vec3.create();\r\n        vec3.normalize(this.direction, this.direction);\r\n    };\r\n\r\n    Ray.fromPoints = function (a, b) {\r\n        var direction = vec3.create();\r\n        vec3.sub(direction, b, a);\r\n        return new Ray(a, direction);\r\n    };\r\n\r\n    window.Math.Ray = Ray;\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('surface', function (instance) {\r\n        instance.pane.types.surface = {\r\n            onPaneType: onSurfacePaneType,\r\n            onCreateHeader: onCreateSurfaceHeader\r\n        };\r\n\r\n        instance.events.on('pane.resize', function (pane) {\r\n            if (pane.attrData('pane-type') === 'surface')\r\n                updateCanvasSize(instance, pane);\r\n        });\r\n\r\n        window.addEventListener('resize', function (event) {\r\n            var surfaces = instance.pane.internal.container\r\n                .querySelectorAll('.pane canvas');\r\n            for (var i = 0; i < surfaces.length; i++) {\r\n                updateCanvasSize(instance, surfaces[i].parentNode);\r\n            }\r\n        });\r\n\r\n        instance.surface = {};\r\n    }, ['pane-types']);\r\n\r\n    var surfaceIndex = 0;\r\n    function onSurfacePaneType (pane, instance) {\r\n        var canvas = document.createElement('canvas');\r\n        canvas.id = 'surface' + (surfaceIndex++);\r\n        canvas.addEventListener('mouseover', function (event) {\r\n            event.target.focus();\r\n        });\r\n        canvas.className = 'surface';\r\n        pane.appendChild(canvas);\r\n\r\n        var surfaceGUI = document.createElement('div');\r\n        surfaceGUI.className = 'surface-toolbar';\r\n        surfaceGUI.style.float = 'left';\r\n        Ajax.get('partial/surface-toolbar.html', function (result) {\r\n            surfaceGUI.innerHTML = result;\r\n        });\r\n        pane.appendChild(surfaceGUI);\r\n\r\n        instance.surface.map = instance.surface.map || {};\r\n        instance.surface.map[canvas.id] = {\r\n            camera: new Math.Camera()\r\n        };\r\n\r\n        updateCanvasSize(instance, pane);\r\n\r\n        instance.events.trigger('surface.create', canvas);\r\n    }\r\n\r\n    function onCreateSurfaceHeader (header, instance) {\r\n        var label = document.createElement('label');\r\n        label.innerHTML = 'Surface Pane';\r\n        header.appendChild(label);\r\n    }\r\n\r\n    function updateCanvasSize (instance, pane) {\r\n        var canvas = pane.querySelector('canvas');\r\n        var context = canvas.getContext('2d');\r\n        var data = instance.surface.map[canvas.id];\r\n\r\n        var header = pane.querySelector('.pane-header');\r\n        var headerHeight = header ? header.height() : 0;\r\n\r\n        var gui = pane.querySelector('.surface-toolbar');\r\n        var guiWidth = gui ? gui.width() : 0;\r\n\r\n        var width = pane.width() - guiWidth - 1;\r\n        var height = pane.height() - headerHeight;\r\n        canvas.height = height;\r\n        canvas.width = width;\r\n\r\n        context.setTransform(1, 0, 0, 1, 0, 0);\r\n        context.translate(0, height);\r\n        context.scale(1, -1);\r\n\r\n        mat4.perspective(data.camera.projection, 45 * DEG2RAD, width / height, 0.1, 1000);\r\n    }\r\n})());\r\n","(function () {\r\n    'use strict';\r\n\r\n    var EPSILON = 0.000001;\r\n\r\n    Math.geo = Math.geo || {};\r\n\r\n    Math.geo.rayFaceCollision = function (start, direction, vertices, result) {\r\n        var triangles = Math.geo.triangulateFace(vertices);\r\n        for (var i = 0; i < triangles.length; i++) {\r\n            var triangle = triangles[i];\r\n            if (Math.geo.rayTriangleCollision(start, direction,\r\n                triangle[0], triangle[1], triangle[2], result))\r\n                return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    Math.geo.rayTriangleCollision = function (start, direction, v1, v2, v3, result) {\r\n        result = result || [0, 0, 0];\r\n    \tvar triangleNormal = getNormal(v1, v2, v3);\r\n        if (Math.geo.rayPlaneCollision(start, direction, v1, triangleNormal, result)) {\r\n            var bary = getBarycentricCoordinates(v1, v2, v3, result);\r\n        \treturn (bary[0] <= 1 && bary[0] >= 0) &&\r\n                (bary[1] <= 1 && bary[1] >= 0) &&\r\n                (bary[2] <= 1 && bary[2] >= 0);\r\n        }\r\n    \treturn false;\r\n    };\r\n\r\n    Math.geo.rayPlaneCollision = function (start, direction, planePoint, planeNormal, result) {\r\n\t\tvar numer = vec3.dot(planePoint, planeNormal) -\r\n            vec3.dot(planeNormal, start);\r\n\t\tvar denom = vec3.dot(planeNormal, direction);\r\n\t\tif (Math.abs(denom) < EPSILON) return false;\r\n\t\tvar t = numer / denom;\r\n\t\tif (t < 0.0) return false;\r\n\t\tif (result) {\r\n            vec3.scale(result, direction, t);\r\n            vec3.add(result, start, result);\r\n        }\r\n\t\treturn true;\r\n    };\r\n\r\n    //TODO: refactor to reduce number of operations\r\n    Math.geo.rayAABBCollision = function (start, direction, minB, maxB, result) {\r\n        result = result || vec3.create();\r\n\r\n\t\tvar inside = true;\r\n\t\tvar quadrant = new Float32Array(3);\r\n\t\tvar i = 0|0;\r\n\t\tvar whichPlane;\r\n\t\tvar maxT = new Float32Array(3);\r\n\t\tvar candidatePlane = new Float32Array(3);\r\n\r\n\t\t/* Find candidate planes; this loop can be avoided if\r\n\t\trays cast all from the eye(assume perpsective view) */\r\n\t\tfor (i=0; i < 3; ++i)\r\n\t\t\tif(start[i] < minB[i]) {\r\n\t\t\t\tquadrant[i] = 1;\r\n\t\t\t\tcandidatePlane[i] = minB[i];\r\n\t\t\t\tinside = false;\r\n\t\t\t}else if (start[i] > maxB[i]) {\r\n\t\t\t\tquadrant[i] = 0;\r\n\t\t\t\tcandidatePlane[i] = maxB[i];\r\n\t\t\t\tinside = false;\r\n\t\t\t}else\t{\r\n\t\t\t\tquadrant[i] = 2;\r\n\t\t\t}\r\n\r\n\t\t/* Ray origin inside bounding box */\r\n\t\tif(inside)\t{\r\n\t\t\tvec3.copy(result, start);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/* Calculate T distances to candidate planes */\r\n\t\tfor (i = 0; i < 3; ++i)\r\n\t\t\tif (quadrant[i] !== 2 && direction[i] !== 0)\r\n\t\t\t\tmaxT[i] = (candidatePlane[i] - start[i]) / direction[i];\r\n\t\t\telse\r\n\t\t\t\tmaxT[i] = -1;\r\n\r\n\t\t/* Get largest of the maxT's for final choice of intersection */\r\n\t\twhichPlane = 0;\r\n\t\tfor (i = 1; i < 3; i++)\r\n\t\t\tif (maxT[whichPlane] < maxT[i])\r\n\t\t\t\twhichPlane = i;\r\n\r\n\t\t/* Check final candidate actually inside box */\r\n\t\tif (maxT[whichPlane] < 0) return false;\r\n\t\tif (maxT[whichPlane] > Number.MAX_VALUE) return false; //NOT TESTED\r\n\r\n\t\tfor (i = 0; i < 3; ++i)\r\n\t\t\tif (whichPlane != i) {\r\n\t\t\t\tresult[i] = start[i] + maxT[whichPlane] * direction[i];\r\n\t\t\t\tif (result[i] < minB[i] || result[i] > maxB[i])\r\n\t\t\t\t\treturn false;\r\n\t\t\t} else {\r\n\t\t\t\tresult[i] = candidatePlane[i];\r\n\t\t\t}\r\n\t\treturn true;\r\n    };\r\n\r\n    //TODO: refactor to reduce number of operations\r\n    Math.geo.closestPointsBetweenSegments = function (a0,a1, b0,b1, p_a, p_b) {\r\n\t\tvar u = vec3.subtract( vec3.create(), a1, a0 );\r\n\t\tvar v = vec3.subtract( vec3.create(), b1, b0 );\r\n\t\tvar w = vec3.subtract( vec3.create(), a0, b0 );\r\n\r\n\t\tvar a = vec3.dot(u,u);         // always >= 0\r\n\t\tvar b = vec3.dot(u,v);\r\n\t\tvar c = vec3.dot(v,v);         // always >= 0\r\n\t\tvar d = vec3.dot(u,w);\r\n\t\tvar e = vec3.dot(v,w);\r\n\t\tvar D = a*c - b*b;        // always >= 0\r\n\t\tvar sc, tc;\r\n\r\n\t\t// compute the line parameters of the two closest points\r\n\t\tif (D < EPSILON) {          // the lines are almost parallel\r\n\t\t\tsc = 0.0;\r\n\t\t\ttc = (b>c ? d/b : e/c);    // use the largest denominator\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsc = (b*e - c*d) / D;\r\n\t\t\ttc = (a*e - b*d) / D;\r\n\t\t}\r\n\r\n\t\t// get the difference of the two closest points\r\n\t\tif(p_a)\tvec3.add(p_a, a0, vec3.scale(vec3.create(),u,sc));\r\n\t\tif(p_b)\tvec3.add(p_b, b0, vec3.scale(vec3.create(),v,tc));\r\n\r\n\t\tvar dP = vec3.add( vec3.create(), w, vec3.subtract( vec3.create(), vec3.scale(vec3.create(),u,sc) , vec3.scale(vec3.create(),v,tc)) );  // =  L1(sc) - L2(tc)\r\n\t\treturn vec3.length(dP);   // return the closest distance\r\n\t};\r\n\r\n    Math.geo.rayPointDistance = function (start, direction, point) {\r\n        var aux = [0, 0, 0];\r\n        vec3.sub(aux, point, start);\r\n        vec3.cross(aux, direction, aux);\r\n        return vec3.len(aux);\r\n    };\r\n\r\n    Math.geo.pointPointDistance = function (p1, p2) {\r\n        var aux = [0, 0, 0];\r\n        vec3.sub(aux, p2, p1);\r\n        return vec3.len(aux);\r\n    };\r\n\r\n    Math.geo.triangulateFace = function (vertices) {\r\n        var triangulated = [];\r\n        for (var i = 0; i < vertices.length - 2; i++) {\r\n            triangulated.push([vertices[0], vertices[i + 1], vertices[i + 2]]);\r\n        }\r\n        return triangulated;\r\n    };\r\n\r\n    Math.geo.computePointsCenter = function (points) {\r\n        if (!points || points.length === 0) return null;\r\n        var center = [0, 0, 0];\r\n        points.forEach(function(point) {\r\n            vec3.add(center, center, point);\r\n        });\r\n        vec3.scale(center, center, 1 / points.length);\r\n        return center;\r\n    };\r\n\r\n    Math.geo.findClosestPointIndex = function (position, points) {\r\n        if (!points || !points.length) return null;\r\n        var distance = Math.geo.pointPointDistance(position, points[0]);\r\n        var closestIndex = 0;\r\n        for (var i = 1; i < points.length; i++) {\r\n            var newDistance = Math.geo.pointPointDistance(position, points[i]);\r\n            if (newDistance < distance) {\r\n                distance = newDistance;\r\n                closestIndex = i;\r\n            }\r\n        }\r\n        return closestIndex;\r\n    };\r\n\r\n    Math.geo.findClosestPoint = function (position, points) {\r\n        if (!points || !points.length) return null;\r\n        var index = Math.geo.findClosestPointIndex(position, points);\r\n        return points[index];\r\n    };\r\n\r\n    Math.geo.findClosestFace = function (position, faces) {\r\n        if (!faces || !faces.length) return null;\r\n        var centers = faces.map(function (face) {\r\n            return face.computeCenter();\r\n        });\r\n        var index = Math.geo.findClosestPointIndex(position, centers);\r\n        return faces[index];\r\n    };\r\n\r\n    function getBarycentricCoordinates (p1, p2, p3, point) {\r\n        var v0 = getVectorFromPoints(p1, p2);\r\n        var v1 = getVectorFromPoints(p1, p3);\r\n        var v2 = getVectorFromPoints(p1, point);\r\n\r\n    \tvar d00 = vec3.dot(v0, v0);\r\n    \tvar d01 = vec3.dot(v0, v1);\r\n    \tvar d11 = vec3.dot(v1, v1);\r\n    \tvar d20 = vec3.dot(v2, v0);\r\n    \tvar d21 = vec3.dot(v2, v1);\r\n    \tvar denom = d00 * d11 - d01 * d01;\r\n\r\n        var result = [(d11 * d20 - d01 * d21) / denom,\r\n            (d00 * d21 - d01 * d20) / denom, 0];\r\n        result[2] = 1 - result[0] - result[1];\r\n    \treturn result;\r\n    }\r\n\r\n    function getNormal (v1, v2, v3) {\r\n        var tmp1 = vec3.create();\r\n        var tmp2 = vec3.create();\r\n        vec3.sub(tmp1, v2, v1);\r\n        vec3.sub(tmp2, v3, v1);\r\n        vec3.cross(tmp1, tmp1, tmp2);\r\n        return tmp1;\r\n    }\r\n\r\n    function getVectorFromPoints (a, b) {\r\n        var output = vec3.create();\r\n        vec3.sub(output, b, a);\r\n        return output;\r\n    }\r\n})();\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('halfedge-cache', function (instance) {\r\n        var superConstructor = Math.HalfEdgeMesh;\r\n        var cachedHalfEdgeMesh = function () {\r\n            superConstructor.call(this);\r\n            var heMesh = this;\r\n            this.cache = {\r\n                meshes: {},\r\n                get: function (key) {\r\n                    var e = this.meshes[key];\r\n                    var builder = Math.HalfEdgeMesh.prototype.builders[key];\r\n                    if (!e) {\r\n                        e = builder.onCreate(heMesh);\r\n                        this.meshes[key] = e;\r\n                    }\r\n                    if (builder.onClean) builder.onClean(e);\r\n                    return e;\r\n                },\r\n                onVerticesChange: function (vertices) {\r\n                    for (var key in this.meshes) {\r\n                        var e = this.meshes[key];\r\n                        var builder = Math.HalfEdgeMesh.prototype.builders[key];\r\n                        if (builder.onVerticesChange)\r\n                            builder.onVerticesChange(vertices, e);\r\n                    }\r\n                }\r\n            };\r\n        };\r\n        cachedHalfEdgeMesh.prototype = Object.create(Math.HalfEdgeMesh.prototype);\r\n        cachedHalfEdgeMesh.prototype.constructor = cachedHalfEdgeMesh;\r\n\r\n        Math.HalfEdgeMesh = cachedHalfEdgeMesh;\r\n\r\n        Math.HalfEdgeMesh.prototype.builders = {};\r\n        Math.HalfEdgeMesh.prototype.addBuilder = function (key, builder) {\r\n            this.builders[key] = builder;\r\n        };\r\n\r\n    }, ['halfedge']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('halfedge', function (instance) {\r\n        Math.HalfEdgeMesh = HalfEdgeMesh;\r\n    });\r\n\r\n    var HalfEdgeMesh = function () {\r\n        this.bounds = new Math.Octree();\r\n        this.halfEdges = [];\r\n        this.vertices = [];\r\n        this.faces = [];\r\n    };\r\n\r\n    HalfEdgeMesh.prototype.addVertices = function (vertices) {\r\n        if (arguments.length > 1) this.addVertices.apply(this, arguments);\r\n        if (!Array.isArray(vertices)) return;\r\n        this.bounds.addItems(vertices);\r\n        for (var i = 0; i < vertices.length; i++) {\r\n            var vertex = vertices[i];\r\n            var index = this.vertices.indexOf(vertex);\r\n            if (index < 0) {\r\n                var _halfEdge = {};\r\n                _halfEdge.computeNormal = VertexComputeNormal;\r\n                _halfEdge.ownIndex = this.vertices.length;\r\n                _halfEdge.getFaces = VertexGetFaces;\r\n                _halfEdge.outEdges = [];\r\n                vertex._halfEdge = _halfEdge;\r\n                this.vertices.push(vertex);\r\n            } else {\r\n                console.error('addVertices: Adding vertex twice!', vertex);\r\n            }\r\n        }\r\n    };\r\n\r\n    HalfEdgeMesh.prototype.addFace = function (vertices) {\r\n        if (arguments.length > 1) this.addFace.apply(this, arguments);\r\n        if (!Array.isArray(vertices)) return;\r\n        if (vertices.length >= 3) {\r\n            var he1 = buildEdge(vertices[0], vertices[1]);\r\n            var he2 = buildEdge(vertices[1], vertices[2], he1.face);\r\n            he1.next = he2;\r\n            this.halfEdges.push(he1, he2);\r\n            if (vertices.length >= 3) {\r\n                var last, prev = he2;\r\n                for (var i = 2; i < vertices.length - 1; i++) {\r\n                    last = buildEdge(vertices[i], vertices[i + 1], he1.face);\r\n                    if (!he2.next) he2.next = last;\r\n                    last.next = prev;\r\n                    this.halfEdges.push(last);\r\n                    prev = last;\r\n                }\r\n                last = buildEdge(vertices[i], vertices[0], he1.face);\r\n                last.next = he1;\r\n                this.halfEdges.push(last);\r\n                prev.next = last;\r\n            }\r\n            this.faces.push(he1.face);\r\n        } else {\r\n            console.error('addFace: 3 or more vertices needed to form a face!');\r\n        }\r\n    };\r\n\r\n    HalfEdgeMesh.prototype.onVerticesChange = function (vertex) {\r\n        if (this.cache && this.cache.onVerticesChange)\r\n            this.cache.onVerticesChange(vertex);\r\n        this.bounds.onVerticesMove(vertex);\r\n    };\r\n\r\n    HalfEdgeMesh.prototype.clear = function () {\r\n        this.halfEdges = [];\r\n        this.vertices = [];\r\n        this.faces = [];\r\n    };\r\n\r\n    function buildEdge (start, end, face) {\r\n        var edge = {};\r\n        edge.vertex = end;\r\n        edge.face = face ? face : new HalfEdgeFace(edge);\r\n        edge.opposite = findOppositeEdge(start, end) || edge;\r\n        edge.next = null;\r\n        start._halfEdge.outEdges.push(edge);\r\n        return edge;\r\n    }\r\n\r\n    function findOppositeEdge(start, end) {\r\n        var opposites = end._halfEdge.outEdges.filter(function (he) {\r\n            return he.vertex === start;\r\n        });\r\n        return (opposites && opposites[0]) ? opposites[0] : null;\r\n    }\r\n\r\n    function VertexGetFaces () {\r\n        return this.outEdges.map(function (edge) {\r\n            return edge.face;\r\n        });\r\n    }\r\n\r\n    function VertexComputeNormal () {\r\n        var normal = [0, 0, 0];\r\n        this.getFaces().forEach(function (face) {\r\n            vec3.add(normal, normal, face.computeRawNormal());\r\n        });\r\n        vec3.normalize(normal, normal);\r\n        return normal;\r\n    }\r\n\r\n    var HalfEdgeFace = function (halfEdge) {\r\n        this.halfEdge = halfEdge;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.getEdges = function () {\r\n        var output = [];\r\n        var he = this.halfEdge;\r\n        while (he.next !== this.halfEdge) {\r\n            output.push(he);\r\n            he = he.next;\r\n            if (he === null) {\r\n                var a = 0;\r\n                console.debug(this, a);\r\n            }\r\n        }\r\n        output.push(he);\r\n        return output;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.getVertices = function () {\r\n        return this.getEdges().map(function (edge) {\r\n            return edge.vertex;\r\n        });\r\n    };\r\n\r\n    HalfEdgeFace.prototype.getVerticesTriangulated = function () {\r\n        var triangulated = [];\r\n        var vertices = this.getVertices();\r\n        for (var i = 0; i < vertices.length - 2; i++) {\r\n            triangulated.push([vertices[0], vertices[i + 1], vertices[i + 2]]);\r\n        }\r\n        return triangulated;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.computeRawNormal = function () {\r\n        var normal = [0, 0, 0];\r\n        this.getVerticesTriangulated().forEach(function (triplet) {\r\n            var triangleNormal = computeNormal(triplet[0], triplet[1], triplet[2]);\r\n            vec3.add(normal, normal, triangleNormal);\r\n        });\r\n        return normal;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.computeNormal = function () {\r\n        var normal = this.computeRawNormal();\r\n        vec3.normalize(normal, normal);\r\n        return normal;\r\n    };\r\n\r\n    HalfEdgeFace.prototype.computeCenter = function () {\r\n        return Math.geo.computePointsCenter(this.getVertices());\r\n    };\r\n\r\n    function computeNormal (v1, v2, v3) {\r\n        var tmp1 = vec3.create();\r\n        var tmp2 = vec3.create();\r\n        vec3.sub(tmp1, v2, v1);\r\n        vec3.sub(tmp2, v3, v1);\r\n        vec3.cross(tmp1, tmp1, tmp2);\r\n        return tmp1;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var originalRotation = null;\r\n    var mouseDownCoords = null;\r\n\r\n    Modules.prototype.add('common-interaction', function (instance) {\r\n        instance.surface.interactions.common = {\r\n            onMouseWheel: function (event, realCoords) {\r\n                var canvas = event.target;\r\n                var delta = Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail)));\r\n\r\n                var data = instance.surface.map[canvas.id];\r\n                data.camera.distance -= (delta * data.camera.distance) / 25;\r\n\r\n                return true;\r\n            },\r\n            onMouseMove: function (event, realCoords) {\r\n                if (event.target.dataset.moving) {\r\n                    var canvas = event.target;\r\n                    var data = instance.surface.map[canvas.id];\r\n                    if (data) {\r\n                        var delta = getCoordsDelta(mouseDownCoords, realCoords);\r\n                        combine(data.camera, originalRotation, delta);\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            onMouseDown: function (event, realCoords) {\r\n                var canvas = event.target;\r\n                var data = instance.surface.map[canvas.id];\r\n                if (event.which === 3) {\r\n                    event.target.dataset.moving = 'true';\r\n                    upNormalMouseDown = vec3.equals(data.camera.getUpDirection(), [0, 1, 0]);\r\n                    originalRotation = data.camera.rotation.slice();\r\n                    mouseDownCoords = realCoords;\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n            onMouseUp: function (event, realCoords) {\r\n                if (event.which === 3) {\r\n                    delete event.target.dataset.moving;\r\n                    var data = instance.surface.map[event.target.id];\r\n                    mouseDownCoords = null;\r\n                }\r\n                return true;\r\n            }\r\n        };\r\n    }, ['surface-interaction']);\r\n\r\n    var upNormalMouseDown = true;\r\n    function combine (surface, originalRotation, delta) {\r\n        if (!originalRotation) return;\r\n        if (!upNormalMouseDown) delta[0] = -delta[0];\r\n\r\n        var rotation = surface.rotation;\r\n        rotation[0] = originalRotation[0] + delta[0] * 0.005;\r\n        rotation[1] = originalRotation[1] + delta[1] * 0.005;\r\n        clampRotations(rotation);\r\n    }\r\n\r\n    function getCoordsDelta (initial, current) {\r\n        if (!initial) return [0, 0];\r\n        return [\r\n            initial[0] - current[0],\r\n            current[1] - initial[1]\r\n        ];\r\n    }\r\n\r\n    function clampRotations (rotations) {\r\n        var pi2 = Math.PI * 2;\r\n        if (rotations[0] < 0) rotations[0] = pi2 + rotations[0];\r\n        if (rotations[0] >= pi2) rotations[0] = rotations[0] - pi2;\r\n        if (rotations[1] < 0) rotations[1] = pi2 + rotations[1];\r\n        if (rotations[1] >= pi2) rotations[1] = rotations[1] - pi2;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('object-interaction', function (instance) {\r\n        instance.surface.interactions.object = {\r\n            onMouseDown: function (event, realCoords) {\r\n                var canvas = event.target;\r\n                var data = instance.surface.map[canvas.id];\r\n                if (event.which === 1) {\r\n                    var ray = data.camera.getRay(null, realCoords,\r\n                        [canvas.width, canvas.height]);\r\n\r\n                    var isHit = false, hitPoint = vec3.create();\r\n                    instance.scene.getObjects().forEach(function (node) {\r\n                        isHit = geo.testRayBBox(ray.start, ray.direction, node.data.mesh.bounding, node.data.model, hitPoint);\r\n                        if (isHit) {\r\n                            node.data.selected = true;\r\n                        } else delete node.data.selected;\r\n                    });\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n        };\r\n\r\n    }, ['surface-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('surface-interaction', function (instance) {\r\n        instance.surface.interactions = {};\r\n\r\n        instance.surface.setInteraction = function (surface, name) {\r\n            surface.dataset.interaction = name;\r\n        };\r\n\r\n        instance.surface.getInteractionCallbacks = function (surface) {\r\n            var interactionName = surface.dataset.interaction;\r\n            return instance.surface.interactions[interactionName];\r\n        };\r\n\r\n        instance.surface.onRender = function (canvas, surface) {\r\n            var keepRunning = true;\r\n            var callbacks = instance.surface.getInteractionCallbacks(canvas);\r\n            if (callbacks.onRender) keepRunning = callbacks.onRender(surface);\r\n            if (keepRunning) {\r\n                var common = instance.surface.interactions.common;\r\n                common.onRender(surface);\r\n            }\r\n        };\r\n\r\n        instance.events.on('surface.create', function (surface) {\r\n            surface.tabIndex = 1000;\r\n\r\n            surface.oncontextmenu = onContextMenu;\r\n\r\n            surface.onkeydown = onSurfaceEvent;\r\n            surface.onkeyup = onSurfaceEvent;\r\n\r\n            surface.onmousewheel = onSurfaceEvent;\r\n            surface.onmousemove = onSurfaceEvent;\r\n            surface.onmousedown = onSurfaceEvent;\r\n            surface.onmouseup = onSurfaceEvent;\r\n            surface.onclick = onSurfaceEvent;\r\n        });\r\n\r\n        function onSurfaceEvent (event) {\r\n            var callbacks = instance.surface.getInteractionCallbacks(event.target);\r\n            var keepRunning = runCallback(callbacks, event);\r\n            if (keepRunning === undefined) keepRunning = true;\r\n            if (keepRunning) {\r\n                var common = instance.surface.interactions.common;\r\n                runCallback(common, event);\r\n            }\r\n        }\r\n\r\n        instance.events.on('pane.split', function (oldPane, newPane) {\r\n            var initialValue = oldPane.dataset.interaction;\r\n            newPane.dataset.interaction = initialValue;\r\n        });\r\n    }, ['surface']);\r\n\r\n    function runCallback (callbacks, event) {\r\n        var realCoords = getLocalCoordinates(event);\r\n        switch (event.type) {\r\n            case 'keydown': if (callbacks.onKeyDown) return callbacks.onKeyDown(event); break;\r\n            case 'keyup': if (callbacks.onKeyUp) return callbacks.onKeyUp(event); break;\r\n\r\n            case 'mousewheel': if (callbacks.onMouseWheel) return callbacks.onMouseWheel(event, realCoords); break;\r\n            case 'mousemove': if (callbacks.onMouseMove) return callbacks.onMouseMove(event, realCoords); break;\r\n            case 'mousedown': if (callbacks.onMouseDown) return callbacks.onMouseDown(event, realCoords); break;\r\n            case 'mouseup': if (callbacks.onMouseUp) return callbacks.onMouseUp(event, realCoords); break;\r\n            case 'click': if (callbacks.onClick) return callbacks.onClick(event, realCoords); break;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getLocalCoordinates (event) {\r\n        return [event.layerX, event.layerY];\r\n    }\r\n\r\n    function onContextMenu (event) {\r\n        event.preventDefault();\r\n        return false;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var bytesPerFloat32Element = Float32Array.BYTES_PER_ELEMENT;\r\n\r\n    Modules.prototype.add('render-solid-cache', function (instance) {\r\n        Math.HalfEdgeMesh.prototype.addBuilder('render-solid', solidBuilder);\r\n    }, ['halfedge-cache']);\r\n\r\n    var solidBuilder = {\r\n        onCreate: function (halfEdgeMesh) {\r\n            var indices = [];\r\n            halfEdgeMesh.faces.forEach(function (face) {\r\n                var faceNormal = face.computeNormal();\r\n                face.getVerticesTriangulated().forEach(function (t) {\r\n                    indices.push(t[0]._halfEdge.ownIndex,\r\n                        t[1]._halfEdge.ownIndex, t[2]._halfEdge.ownIndex);\r\n                });\r\n            });\r\n\r\n            var mesh = GL.Mesh.load({\r\n                vertices: new Float32Array(halfEdgeMesh.vertices.length * 3),\r\n                normals: new Float32Array(halfEdgeMesh.vertices.length * 3),\r\n                triangles: new Uint16Array(indices)\r\n            });\r\n            this.onVerticesChange(halfEdgeMesh.vertices, mesh);\r\n            return mesh;\r\n        },\r\n        onVerticesChange: function (vertices, mesh) {\r\n            var buffer = mesh.vertexBuffers;\r\n            var vRange = [Number.MAX_VALUE, 0];\r\n            var nRange = [Number.MAX_VALUE, 0];\r\n\r\n            for (var i = 0; i < vertices.length; i++) {\r\n                var vertex = vertices[i];\r\n                var index = vertex._halfEdge.ownIndex;\r\n\r\n                buffer.vertices.data.set(vertex, index * 3);\r\n                vRange[0] = Math.min(vRange[0], index * 3);\r\n                vRange[1] = Math.max(vRange[1], index * 3 + 3);\r\n\r\n                var normal = vertex._halfEdge.computeNormal();\r\n                buffer.normals.data.set(normal, index * 3);\r\n                nRange[0] = Math.min(nRange[0], index * 3);\r\n                nRange[1] = Math.max(nRange[1], index * 3 + 3);\r\n            }\r\n            uploadRange(buffer.vertices, vRange);\r\n            uploadRange(buffer.normals, nRange);\r\n        },\r\n        onClean: function (mesh) {\r\n            if (mesh.vertexBuffers.vertices.dirty) {\r\n                mesh.vertexBuffers.vertices.upload();\r\n                delete mesh.vertexBuffers.vertices.dirty;\r\n            }\r\n            if (mesh.vertexBuffers.normals.dirty) {\r\n                mesh.vertexBuffers.normals.upload();\r\n                delete mesh.vertexBuffers.normals.dirty;\r\n            }\r\n        }\r\n    };\r\n\r\n    function uploadRange (buffer, range) {\r\n        buffer.uploadRange(range[0] * bytesPerFloat32Element,\r\n            (range[1] - range[0]) * bytesPerFloat32Element);\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var solidShader = null;\r\n    var wireframeShader = null;\r\n\r\n    Modules.prototype.add('render-solid', function (instance) {\r\n        instance.asset.shader.get('solid', function (s) {\r\n            solidShader = s;\r\n        });\r\n        instance.asset.shader.get('wireframe', function (s) {\r\n            wireframeShader = s;\r\n        });\r\n\r\n        var bounds = GL.Mesh.load({\r\n            vertices: new Float32Array([\r\n                0.5, 0.5, 0.5, -0.5, 0.5, 0.5, 0.5, -0.5, 0.5, -0.5, -0.5, 0.5,\r\n                0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, -0.5, -0.5, -0.5, -0.5, -0.5,\r\n            ]),\r\n            colors: new Float32Array([\r\n                0.6, 0.6, 0.6, 1, 0.6, 0.6, 0.6, 1, 0.6, 0.6, 0.6, 1, 0.6, 0.6, 0.6, 1,\r\n                0.6, 0.6, 0.6, 1, 0.6, 0.6, 0.6, 1, 0.6, 0.6, 0.6, 1, 0.6, 0.6, 0.6, 1\r\n            ]),\r\n            wireframe: new Uint16Array([\r\n                0, 1, 1, 3, 3, 2, 2, 0,\r\n                4, 5, 5, 7, 7, 6, 6, 4,\r\n                0, 4, 1, 5, 2, 6, 3, 7\r\n            ])\r\n        });\r\n        var grid = GL.Mesh.grid({lines:17,size:16});\r\n        var colorsArray = [];\r\n        grid.vertexBuffers.vertices.forEach(function (vertex, bufferIndex) {\r\n            colorsArray.push(0.4, 0.4, 0.4, 1);\r\n        });\r\n        grid.createVertexBuffer('colors', 'a_color', 4, new Float32Array(colorsArray));\r\n        var axisX = GL.Mesh.load({\r\n            vertices: new Float32Array([-8, 0.001, 0, 8, 0.001, 0]),\r\n            colors: new Float32Array([1, 0, 0, 1, 1, 0, 0, 1])\r\n        });\r\n        var axisZ = GL.Mesh.load({\r\n            vertices: new Float32Array([0, 0.001, -8, 0, 0.001, 8]),\r\n            colors: new Float32Array([0, 1, 0, 1, 0, 1, 0, 1])\r\n        });\r\n\r\n        instance.surface.renders.solid = function (surface) {\r\n            var lightDirection = vec3.create();\r\n            surface.camera.getPosition(lightDirection);\r\n            vec3.add(lightDirection, lightDirection, [1, 2, 0]);\r\n            vec3.normalize(lightDirection, lightDirection);\r\n            uniforms.u_lightvector = lightDirection;\r\n\r\n            renderObject(surface, grid, wireframeShader, instance.graphics.gl.LINES);\r\n            renderObject(surface, axisX, wireframeShader, instance.graphics.gl.LINES);\r\n            renderObject(surface, axisZ, wireframeShader, instance.graphics.gl.LINES);\r\n            instance.scene.getObjects().forEach(function (node) {\r\n                var mesh = node.data.mesh.cache.get('render-solid');\r\n                renderBounds(surface, wireframeShader, bounds, node.data.mesh.bounds, instance.graphics.gl.LINES);\r\n                renderObject(surface, mesh, solidShader, node.data.primitive, node.data.model);\r\n            });\r\n        };\r\n\r\n        instance.events.on('surface.create', function (surface) {\r\n            instance.surface.setRender(surface, 'solid');\r\n        });\r\n    }, ['surface-render', 'shader', 'render-solid-cache']);\r\n\r\n    var uniforms = {\r\n        u_color: [0.5, 0.5, 0.5, 1],\r\n        u_lightvector: null,\r\n        u_model: null,\r\n        u_mvp: mat4.create()\r\n    };\r\n\r\n    var temp = mat4.create();\r\n    function renderObject (surface, mesh, shader, primitive, model, indexBufferName) {\r\n        model = model || mat4.create();\r\n\r\n        surface.camera.getViewMatrix(temp);\r\n        mat4.multiply(temp, surface.camera.projection, temp);\r\n        mat4.multiply(uniforms.u_mvp, temp, model);\r\n\r\n        uniforms.u_model = model;\r\n\r\n        if (shader) {\r\n            shader.uniforms(uniforms);\r\n            if (mesh instanceof Math.HalfEdgeMesh) {\r\n                if (mesh) shader.draw(mesh, primitive, indexBufferName);\r\n            } else {\r\n                shader.draw(mesh, primitive, indexBufferName);\r\n            }\r\n        }\r\n    }\r\n\r\n    var boundsModel = mat4.create();\r\n    function renderBounds (surface, shader, bounds, octree, primitive) {\r\n        updateBoundsModel(boundsModel, octree);\r\n        renderObject(surface, bounds, shader, primitive, boundsModel, 'wireframe');\r\n        if (octree.children)\r\n            for (var i = 0; i < octree.children.length; i++)\r\n                renderBounds(surface, shader, bounds, octree.children[i], primitive);\r\n    }\r\n\r\n    function updateBoundsModel (model, octree) {\r\n        mat4.identity(model);\r\n        var scale = [0, 0, 0], position = [0, 0, 0];\r\n        vec3.lerp(position, octree.aabb.min, octree.aabb.max, 0.5);\r\n        mat4.translate(model, model, position);\r\n        vec3.sub(scale, octree.aabb.max, octree.aabb.min);\r\n        mat4.scale(model, model, scale);\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('surface-render', function (instance) {\r\n        instance.surface.renders = {};\r\n\r\n        instance.surface.setRender = function (surface, name) {\r\n            surface.dataset.render = name;\r\n        };\r\n\r\n        instance.surface.getRender = function (surface) {\r\n            var renderName = surface.dataset.render;\r\n            return instance.surface.renders[renderName];\r\n        };\r\n\r\n        var panes = document.querySelectorAll('.pane');\r\n        for (var i = 0; i < panes.length; i++) {\r\n            if (panes[i].dataset.paneType == 'surface') {\r\n                var canvas = panes[i].querySelector('canvas');\r\n                canvas.dataset.render = 'solid';\r\n            }\r\n        }\r\n\r\n        instance.events.on('pane.split', function (oldPane, newPane) {\r\n            newPane.attrData('surface-render', oldPane.attrData('surface-render'));\r\n        });\r\n    }, ['surface']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-all', function (instance) {\r\n        instance.surface.interactions.edit.actions.all = {\r\n            init: function (context, event) {\r\n                if (!context.selection.isEmpty()) context.selection.clear();\r\n                else {\r\n                    var selection = context.selection;\r\n                    instance.scene.getObjects().forEach(function (object) {\r\n                        var result = selection.addAll(object.data);\r\n                        object.data.mesh.cache.onVerticesChange(result);\r\n                    });\r\n                }\r\n                context.action = null;\r\n            }\r\n        };\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-move', function (instance) {\r\n        var initialCoords = vec2.create();\r\n        var selectionNormal = null;\r\n        var axisOrigin = null;\r\n        var isY = false;\r\n\r\n        instance.surface.interactions.edit.actions.move = {\r\n            axis: null,\r\n            init: function (context, event) {\r\n                vec2.copy(initialCoords, context.lastCoords);\r\n                selectionNormal = context.selection.getNormal();\r\n                for (var name in context.selection.objects) {\r\n                    var selectedObj = context.selection.objects[name];\r\n                    for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                        var vertex = selectedObj.vertices[i];\r\n                        vertex.originalPosition = vertex.slice();\r\n                    }\r\n                }\r\n            },\r\n            onMouseMove: function (context, event) {\r\n                if (!context.selection.isEmpty()) {\r\n                    var canvas = event.target;\r\n                    var data = instance.surface.map[canvas.id];\r\n\r\n                    var currentRay = data.camera.getRay(null, context.lastCoords,\r\n                        [canvas.width, canvas.height]);\r\n                    var initialRay = data.camera.getRay(null, initialCoords,\r\n                        [canvas.width, canvas.height]);\r\n                    var cameraDirection = data.camera.getDirection();\r\n\r\n                    var hitPointInitial = [0, 0, 0], hitPointCurrent = [0, 0, 0];\r\n\r\n                    var selectionCenter = context.selection.getCenter();\r\n                    Math.geo.rayPlaneCollision(initialRay.start, initialRay.direction,\r\n                        selectionCenter, cameraDirection, hitPointInitial);\r\n\r\n                    var delta = vec3.create();\r\n\r\n                    if (this.axis) {\r\n                        var currentRayEnd = vec3.scaleAndAdd(vec3.create(), currentRay.start, currentRay.direction, 100);\r\n                        var axisStart = vec3.scale(vec3.create(), this.axis, -50);\r\n                        var axisEnd = vec3.scale(vec3.create(), this.axis, 50);\r\n                        Math.geo.closestPointsBetweenSegments(axisStart, axisEnd, currentRay.start, currentRayEnd, hitPointCurrent);\r\n\r\n                        if (!axisOrigin) {\r\n                            axisOrigin = vec3.copy(vec3.create(), hitPointCurrent);\r\n                        } else vec3.sub(delta, hitPointCurrent, axisOrigin);\r\n                    } else {\r\n                        Math.geo.rayPlaneCollision(currentRay.start, currentRay.direction,\r\n                            selectionCenter, cameraDirection, hitPointCurrent);\r\n                        vec3.sub(delta, hitPointCurrent, hitPointInitial);\r\n                    }\r\n\r\n                    if (context.isControlDown)\r\n                        for (var j = 0; j < 3; j++)\r\n                            delta[j] = Math.round(delta[j]);\r\n\r\n                    for (var name in context.selection.objects) {\r\n                        var hitPoint = [0, 0, 0];\r\n                        var selectedObj = context.selection.objects[name];\r\n                        var sceneObj = instance.scene.getObjectByName(name);\r\n\r\n                        for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                            var vertex = selectedObj.vertices[i];\r\n                            if (vertex.originalPosition)\r\n                                vec3.add(vertex, vertex.originalPosition, delta);\r\n                        }\r\n                        sceneObj.mesh.onVerticesChange(selectedObj.vertices);\r\n                    }\r\n                }\r\n            },\r\n            onMouseDown: function (context, event) {\r\n                if (event.which === 1 || event.which === 3) {\r\n                    var restore = event.which === 3;\r\n                    for (var name in context.selection.objects) {\r\n                        var selectedObj = context.selection.objects[name];\r\n                        var sceneObj = instance.scene.getObjectByName(name);\r\n                        for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                            var vertex = selectedObj.vertices[i];\r\n                            if (vertex.originalPosition) {\r\n                                if (restore)\r\n                                    vec3.copy(vertex, vertex.originalPosition);\r\n                                delete vertex.originalPosition;\r\n                            }\r\n                        }\r\n                        sceneObj.mesh.bounds.updateDimensions();\r\n                        sceneObj.mesh.onVerticesChange(sceneObj.mesh.vertices);\r\n                    }\r\n                }\r\n                isY = false;\r\n                this.axis = null;\r\n                context.action = null;\r\n            },\r\n            onKeyDown: function (context, event) {\r\n                if (event.key === 'x') this.axis = vec3.set(vec3.create(), 1, 0, 0);\r\n                else if (event.key === 'y') {\r\n                    if (isY) {\r\n                        this.axis = selectionNormal;\r\n                        isY = false;\r\n                    } else {\r\n                        this.axis = vec3.set(vec3.create(), 0, 1, 0);\r\n                        isY = true;\r\n                    }\r\n                } else if (event.key === 'z') this.axis = vec3.set(vec3.create(), 0, 0, 1);\r\n                axisOrigin = null;\r\n            }\r\n        };\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-action-scale', function (instance) {\r\n        var selectionCenter2d = vec2.create();\r\n        var selectionCenter = vec3.create();\r\n        var initialDistance = 0;\r\n\r\n        var aux = vec2.create();\r\n\r\n        instance.surface.interactions.edit.actions.scale = {\r\n            axis: null,\r\n            init: function (context, event) {\r\n                if (context.selection.isEmpty()) {\r\n                    context.action = null;\r\n                    return;\r\n                }\r\n                var canvas = event.target;\r\n                var data = instance.surface.map[canvas.id];\r\n\r\n                var center = context.selection.getCenter();\r\n                vec3.copy(selectionCenter, center);\r\n                vec3.transformMat4(center, center, data.camera.getViewMatrix());\r\n                vec3.transformMat4(center, center, data.camera.projection);\r\n                center[0] = ((center[0] + 1) / 2) * canvas.width;\r\n                center[1] = ((center[1] + 1) / 2) * canvas.height;\r\n                vec2.copy(selectionCenter2d, center);\r\n\r\n                vec2.sub(aux, context.lastCoords, selectionCenter2d);\r\n                initialDistance = vec2.length(aux);\r\n                for (var name in context.selection.objects) {\r\n                    var selectedObj = context.selection.objects[name];\r\n                    for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                        var vertex = selectedObj.vertices[i];\r\n                        vertex.originalPosition = vertex.slice();\r\n                    }\r\n                }\r\n            },\r\n            onMouseMove: function (context, event) {\r\n                if (!context.selection.isEmpty()) {\r\n                    var canvas = event.target;\r\n                    var data = instance.surface.map[canvas.id];\r\n\r\n                    vec2.sub(aux, context.lastCoords, selectionCenter2d);\r\n                    var delta = (vec2.length(aux) / initialDistance);\r\n\r\n                    var scaleVector = vec3.create();\r\n                    for (var name in context.selection.objects) {\r\n                        var selectedObj = context.selection.objects[name];\r\n                        var sceneObj = instance.scene.getObjectByName(name);\r\n\r\n                        for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                            var vertex = selectedObj.vertices[i];\r\n                            vec3.sub(scaleVector, vertex, selectionCenter);\r\n                            vec3.normalize(scaleVector, scaleVector);\r\n                            vec3.scale(scaleVector, scaleVector, delta - 1);\r\n                            if (this.axis)\r\n                                vec3.mul(scaleVector, scaleVector, this.axis);\r\n                            if (vertex.originalPosition)\r\n                                vec3.add(vertex, vertex.originalPosition, scaleVector);\r\n                        }\r\n                        sceneObj.mesh.onVerticesChange(selectedObj.vertices);\r\n                    }\r\n                }\r\n            },\r\n            onMouseDown: function (context, event) {\r\n                if (event.which === 1 || event.which === 3) {\r\n                    var restore = event.which === 3;\r\n                    for (var name in context.selection.objects) {\r\n                        var selectedObj = context.selection.objects[name];\r\n                        var sceneObj = instance.scene.getObjectByName(name);\r\n                        for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                            var vertex = selectedObj.vertices[i];\r\n                            if (vertex.originalPosition) {\r\n                                if (restore)\r\n                                    vec3.copy(vertex, vertex.originalPosition);\r\n                                delete vertex.originalPosition;\r\n                            }\r\n                        }\r\n                        sceneObj.mesh.bounds.updateDimensions();\r\n                        sceneObj.mesh.onVerticesChange(sceneObj.mesh.vertices);\r\n                    }\r\n                }\r\n                this.axis = null;\r\n                context.action = null;\r\n            },\r\n            onKeyDown: function (context, event) {\r\n                if (event.key === 'x') this.axis = vec3.set(vec3.create(), 1, 0, 0);\r\n                else if (event.key === 'y') this.axis = vec3.set(vec3.create(), 0, 1, 0);\r\n                else if (event.key === 'z') this.axis = vec3.set(vec3.create(), 0, 0, 1);\r\n            }\r\n        };\r\n    }, ['edit-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var bytesPerFloat32Element = Float32Array.BYTES_PER_ELEMENT;\r\n\r\n    Modules.prototype.add('edit-interaction-render-cache', function (instance) {\r\n        Math.HalfEdgeMesh.prototype.addBuilder('edit-interaction-render-wireframe', wireframeBuilder);\r\n        Math.HalfEdgeMesh.prototype.addBuilder('edit-interaction-render-vertices', verticesBuilder);\r\n    }, ['edit-interaction', 'shader']);\r\n\r\n    var wireframeBuilder = {\r\n        onCreate: function (halfEdgeMesh) {\r\n            var indices = [];\r\n            halfEdgeMesh.faces.forEach(function (face) {\r\n                face.getVertices().forEach(function (vertex, i, array) {\r\n                    var index = i >= array.length - 1 ? 0 : i + 1;\r\n                    indices.push(vertex._halfEdge.ownIndex);\r\n                    indices.push(array[index]._halfEdge.ownIndex);\r\n                });\r\n            });\r\n\r\n            var mesh = GL.Mesh.load({\r\n                vertices: new Float32Array(halfEdgeMesh.vertices.length * 3),\r\n                colors: new Float32Array(halfEdgeMesh.vertices.length * 4),\r\n                lines: new Uint16Array(indices)\r\n            });\r\n            this.onVerticesChange(halfEdgeMesh.vertices, mesh);\r\n            return mesh;\r\n        },\r\n        onVerticesChange: function (vertices, mesh) {\r\n            var buffer = mesh.vertexBuffers;\r\n            var vRange = [Number.MAX_VALUE, 0];\r\n            var cRange = [Number.MAX_VALUE, 0];\r\n            for (var i = 0; i < vertices.length; i++) {\r\n                var vertex = vertices[i];\r\n                var index = vertex._halfEdge.ownIndex;\r\n                buffer.vertices.data.set(vertex, index * 3);\r\n                vRange[0] = Math.min(vRange[0], index * 3);\r\n                vRange[1] = Math.max(vRange[1], index * 3 + 3);\r\n                var color = vertex._selected ? [1, 0.4, 0.1, 1] : [0, 0, 0, 1];\r\n                buffer.colors.data.set(color, index * 4);\r\n                cRange[0] = Math.min(cRange[0], index * 4);\r\n                cRange[1] = Math.max(cRange[1], index * 4 + 4);\r\n            }\r\n            uploadRange(buffer.vertices, vRange);\r\n            uploadRange(buffer.colors, cRange);\r\n        }\r\n    };\r\n\r\n    var verticesBuilder = {\r\n        onCreate: function (halfEdgeMesh) {\r\n            var mesh = GL.Mesh.load({\r\n                vertices: new Float32Array(halfEdgeMesh.vertices.length * 3),\r\n                colors: new Float32Array(halfEdgeMesh.vertices.length * 4)\r\n            });\r\n            this.onVerticesChange(halfEdgeMesh.vertices, mesh);\r\n            return mesh;\r\n        },\r\n        onVerticesChange: function (vertices, mesh) {\r\n            var buffer = mesh.vertexBuffers;\r\n            var vRange = [Number.MAX_VALUE, 0];\r\n            var cRange = [Number.MAX_VALUE, 0];\r\n            for (var i = 0; i < vertices.length; i++) {\r\n                var vertex = vertices[i];\r\n                var index = vertex._halfEdge.ownIndex;\r\n\r\n                buffer.vertices.data.set(vertex, index * 3);\r\n                vRange[0] = Math.min(vRange[0], index * 3);\r\n                vRange[1] = Math.max(vRange[1], index * 3 + 3);\r\n\r\n                var color = vertex._selected ? [1, 0.4, 0.1, 1] : [0, 0, 0, 1];\r\n                buffer.colors.data.set(color, index * 4);\r\n                cRange[0] = Math.min(cRange[0], index * 4);\r\n                cRange[1] = Math.max(cRange[1], index * 4 + 4);\r\n            }\r\n            uploadRange(buffer.vertices, vRange);\r\n            uploadRange(buffer.colors, cRange);\r\n        }\r\n    };\r\n\r\n    function uploadRange (buffer, range) {\r\n        buffer.uploadRange(range[0] * bytesPerFloat32Element,\r\n            (range[1] - range[0]) * bytesPerFloat32Element);\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var shader = null;\r\n\r\n    Modules.prototype.add('edit-interaction-render', function (instance) {\r\n        instance.asset.shader.get('wireframe', function (s) {\r\n            shader = s;\r\n        });\r\n\r\n        var uniforms = {\r\n            u_mvp: mat4.create()\r\n        };\r\n\r\n        var temp = mat4.create();\r\n        instance.surface.interactions.edit.onRender = function (surface) {\r\n            instance.scene.getObjects().forEach(function (node) {\r\n                var obj = node.data;\r\n\r\n                surface.camera.getViewMatrix(temp);\r\n                mat4.multiply(temp, surface.camera.projection, temp);\r\n                mat4.multiply(uniforms.u_mvp, temp, obj.model);\r\n\r\n                if (shader) {\r\n                    shader.uniforms(uniforms);\r\n                    if (obj.mesh instanceof Math.HalfEdgeMesh) {\r\n                        var wireframe = obj.mesh.cache.get('edit-interaction-render-wireframe');\r\n                        var vertices = obj.mesh.cache.get('edit-interaction-render-vertices');\r\n                        shader.draw(wireframe, instance.graphics.gl.LINES);\r\n                        shader.draw(vertices, instance.graphics.gl.POINTS);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n    }, ['edit-interaction', 'shader', 'edit-interaction-render-cache']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction-selection', function (instance) {\r\n        instance.surface.interactions.edit.selection = {\r\n            objects: {},\r\n            addAll: function (object) {\r\n                var result = [];\r\n                var selection = this;\r\n                object.mesh.vertices.forEach(function (vertex) {\r\n                    toggleVertex(selection, object, vertex);\r\n                    result.push(vertex);\r\n                });\r\n                return result;\r\n            },\r\n            add: function (ray, object, camera) {\r\n                var position = camera.getPosition();\r\n                var selection = this;\r\n\r\n                var result = {\r\n                    vertex: null,\r\n                    face: null\r\n                };\r\n\r\n                var vertexSelectionMargin = camera.distance / 200;\r\n                var vertices = object.mesh.bounds.getCollidingItems(ray);\r\n                var rayVertices = vertices.filter(function (vertex) {\r\n                    return Math.geo.rayPointDistance(ray.start, ray.direction, vertex) <= vertexSelectionMargin;\r\n                });\r\n                var vertex = Math.geo.findClosestPoint(position, rayVertices);\r\n                if (vertex) result.vertex = vertex;\r\n\r\n                var uniqueFaces = getFacesFromVertices(vertices);\r\n                uniqueFaces = uniqueFaces.filter(function (face) {\r\n                    return Math.geo.rayFaceCollision(ray.start, ray.direction,\r\n                        face.getVertices());\r\n                });\r\n                var closestFace = Math.geo.findClosestFace(position, uniqueFaces);\r\n                if (closestFace) result.face = closestFace;\r\n\r\n                var vertexDistance = result.vertex ? Math.geo.pointPointDistance(position, result.vertex) : Number.MAX_VALUE;\r\n                var faceDistance = result.face ? Math.geo.pointPointDistance(position, result.face.computeCenter()) : Number.MAX_VALUE;\r\n\r\n                if (faceDistance > vertexDistance) {\r\n                    result.face = null;\r\n                    toggleVertex(selection, object, result.vertex);\r\n                } else {\r\n                    result.vertex = null;\r\n                    toggleFace(selection, object, result.face);\r\n                }\r\n\r\n                return result;\r\n            },\r\n            getCenter: function () {\r\n                //TODO: take into account multiple objects\r\n                var name = Object.keys(this.objects)[0];\r\n                return Math.geo.computePointsCenter(this.objects[name].vertices);\r\n            },\r\n            getNormal: function () {\r\n                var normal = vec3.create();\r\n                for (var name in this.objects) {\r\n                    var obj = this.objects[name];\r\n                    for (var i = 0; i < obj.vertices.length; i++) {\r\n                        var vertex = obj.vertices[i];\r\n                        vec3.add(normal, normal, vertex._halfEdge.computeNormal());\r\n                    }\r\n                }\r\n                vec3.normalize(normal, normal);\r\n                return normal;\r\n            },\r\n            clear: function () {\r\n                for (var name in this.objects) {\r\n                    var selectedObj = this.objects[name];\r\n                    var sceneObj = instance.scene.getObjectByName(name);\r\n                    for (var i = 0; i < selectedObj.vertices.length; i++) {\r\n                        var vertex = selectedObj.vertices[i];\r\n                        if (vertex._selected)\r\n                            delete vertex._selected;\r\n                    }\r\n                    sceneObj.mesh.onVerticesChange(selectedObj.vertices);\r\n                }\r\n                this.objects = {};\r\n            },\r\n            isEmpty: function () {\r\n                return !Object.keys(this.objects).length;\r\n            }\r\n        };\r\n\r\n    }, ['edit-interaction']);\r\n\r\n    function toggleVertex (selection, object, vertex) {\r\n        if (vertex) {\r\n            if (toggle(selection, object, vertex, 'vertices')) {\r\n                vertex._selected = true;\r\n                vertex._halfEdge.getFaces().forEach(function (face) {\r\n                    var selectedVertices = selection.objects[object.name].vertices;\r\n                    var faceVertices = face.getVertices();\r\n                    var allSelected = true;\r\n                    faceVertices.forEach(function (vertex) {\r\n                        allSelected &= selectedVertices.includes(vertex);\r\n                    });\r\n                    if (allSelected && !face._selected)\r\n                        toggleFace(selection, object, face);\r\n                });\r\n            } else delete vertex._selected;\r\n        }\r\n    }\r\n\r\n    function toggleEdge (selection, object, edge) {\r\n        if (edge) {\r\n            if (toggle(selection, object, edge, 'edges')) {\r\n                edge._selected = true;\r\n            } else delete edge._selected;\r\n        }\r\n    }\r\n\r\n    function toggleFace (selection, object, face) {\r\n        if (face) {\r\n            if (toggle(selection, object, face, 'faces')) {\r\n                face._selected = true;\r\n                face.getVertices().forEach(function (vertex) {\r\n                    if (!vertex._selected)\r\n                        toggleVertex(selection, object, vertex);\r\n                });\r\n            } else delete face._selected;\r\n        }\r\n    }\r\n\r\n    function toggle (selection, object, item, arrayName) {\r\n        initObjectIfNeeded(selection, object);\r\n        var array = selection.objects[object.name][arrayName];\r\n        var index = array.indexOf(item);\r\n        if (index >= 0) {\r\n            array.splice(index, 1);\r\n            delObjectIfNeeded(selection, object);\r\n            return false;\r\n        } else {\r\n            array.push(item);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function initObjectIfNeeded (selection, object) {\r\n        var name = object.name;\r\n        if (!selection.objects[name]) {\r\n            selection.objects[name] = {\r\n                faces: [],\r\n                edges: [],\r\n                vertices: []\r\n            };\r\n        }\r\n    }\r\n\r\n    function delObjectIfNeeded (selection, object) {\r\n        var name = object.name;\r\n        if (selection.objects[name]) {\r\n            var objSelection = selection.objects[name];\r\n            if (!objSelection.vertices.length &&\r\n                !objSelection.vertices.length &&\r\n                !objSelection.vertices.length)\r\n                delete selection.objects[name];\r\n        }\r\n    }\r\n\r\n    function getEdgesFromVertices (vertices) {\r\n        var edges = [];\r\n        vertices.forEach(function (vertex) {\r\n            vertex._halfEdge.outEdges.forEach(function (edge) {\r\n                if (edges.indexOf(edge) === -1)\r\n                    edges.push(edge);\r\n            });\r\n        });\r\n        return edges;\r\n    }\r\n\r\n    function getFacesFromVertices (vertices) {\r\n        var faces = [];\r\n        vertices.forEach(function (vertex) {\r\n            vertex._halfEdge.getFaces().forEach(function (face) {\r\n                if (faces.indexOf(face) === -1)\r\n                    faces.push(face);\r\n            });\r\n        });\r\n        return faces;\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('edit-interaction', function (instance) {\r\n        var mouseDownCoords = vec2.create();\r\n\r\n        instance.surface.interactions.edit = {\r\n            actions: {},\r\n            action: null,\r\n            isMouseDown: false,\r\n            isShiftDown: false,\r\n            isControlDown: false,\r\n            lastCoords: [0, 0],\r\n            onMouseMove: function (event, realCoords) {\r\n                vec2.copy(this.lastCoords, realCoords);\r\n                if (this.isMouseDown && !this.action) {\r\n                    var delta2d = vec2.sub(vec2.create(), mouseDownCoords, realCoords);\r\n                    if (vec2.length(delta2d) > 10) this.setAction('move', event);\r\n                }\r\n                this.runAction('onMouseMove', event, realCoords);\r\n            },\r\n            onMouseUp: function (event, realCoords) {\r\n                if (event.which === 1) this.isMouseDown = false;\r\n                this.runAction('onMouseUp', event, realCoords);\r\n            },\r\n            onMouseDown: function (event, realCoords) {\r\n                if (!this.action) {\r\n                    var canvas = event.target;\r\n                    var data = instance.surface.map[canvas.id];\r\n\r\n                    if (event.which === 1) {\r\n                        this.isMouseDown = true;\r\n\r\n                        var ray = data.camera.getRay(null, realCoords,\r\n                            [canvas.width, canvas.height]);\r\n\r\n                        var selection = this.selection;\r\n                        var shiftDown = this.isShiftDown;\r\n                        instance.scene.getObjects().forEach(function (node) {\r\n                            if (!shiftDown) selection.clear();\r\n                            var result = selection.add(ray, node.data, data.camera);\r\n                            if (result.vertex)\r\n                                node.data.mesh.cache.onVerticesChange([result.vertex]);\r\n                            if (result.face)\r\n                                node.data.mesh.cache.onVerticesChange(result.face.getVertices());\r\n                        });\r\n                        return false;\r\n                    }\r\n                }\r\n                this.runAction('onMouseDown', event, realCoords);\r\n                return true;\r\n            },\r\n            onKeyDown: function (event, realCoords) {\r\n                this.isShiftDown = event.shiftKey;\r\n                this.isShiftDown = event.ctrlKey;\r\n                if (!this.action) {\r\n                    if (event.key === 'a') this.setAction('all', event);\r\n                    else if (event.key === 'g') this.setAction('move', event);\r\n                    else if (event.key === 's') this.setAction('scale', event);\r\n                } else this.runAction('onKeyDown', event, realCoords);\r\n            },\r\n            onKeyUp: function (event, realCoords) {\r\n                this.isShiftDown = event.shiftKey;\r\n                this.isShiftDown = event.ctrlKey;\r\n                this.runAction('onKeyUp', event, realCoords);\r\n            },\r\n            setAction: function (name, event) {\r\n                if (name && this.actions[name]) {\r\n                    this.action = name;\r\n                    this.runAction('init', event);\r\n                }\r\n            },\r\n            runAction : function (callbackName, event) {\r\n                if (this.action && this.actions[this.action]) {\r\n                    var action = this.actions[this.action];\r\n                    var callback = action[callbackName];\r\n                    if (callback) callback.call(action, this, event);\r\n                }\r\n            }\r\n        };\r\n\r\n        instance.events.on('surface.create', function (surface) {\r\n            instance.surface.setInteraction(surface, 'edit');\r\n        });\r\n\r\n    }, ['surface-interaction']);\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var Graphics = function (instance) {\r\n        this.gl = GL.create({\r\n            height: screen.height,\r\n            width: screen.width\r\n        });\r\n        this.gl.animate();\r\n        this.gl.ondraw = function () {\r\n            var renderTargets = document.querySelectorAll('canvas');\r\n            for (var i = 0; i < renderTargets.length; i++)\r\n                drawRenderTarget(instance, renderTargets[i]);\r\n        };\r\n        this.gl.clearColor(0.349, 0.349, 0.349, 1);\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n\r\n        console.info(this.gl.getParameter(this.gl.VERSION));\r\n        console.info(this.gl.getParameter(this.gl.SHADING_LANGUAGE_VERSION));\r\n        console.info(this.gl.getParameter(this.gl.VENDOR));\n    };\r\n\r\n    Modules.prototype.add('graphics', function (instance) {\r\n        instance.graphics = new Graphics(instance);\r\n    });\r\n\r\n    function drawRenderTarget (instance, canvas) {\r\n        var width  = canvas.clientWidth, height = canvas.clientHeight;\r\n        var data = instance.surface.map[canvas.id];\r\n        var gl = instance.graphics.gl;\r\n\r\n        var c = instance.graphics.gl.canvas;\r\n        gl.viewport(0, c.height - height, width, height);\r\n\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        var mainRender = instance.surface.getRender(canvas);\r\n        var surfaceRender = instance.surface.onRender;\r\n        if (mainRender) mainRender(data);\r\n        if (surfaceRender) surfaceRender(canvas, data);\r\n\r\n        var error = gl.getError();\r\n        if (error) console.error('WebGL error! CODE: ', error);\r\n\r\n        var context = canvas.getContext('2d');\r\n        if (context) context.drawImage(c, 0, 0, width, height, 0, 0, width, height);\r\n    }\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    Modules.prototype.add('main-menu', function (instance) {\r\n        var container = document.querySelector(instance.options.container.selector);\r\n\r\n        var mainMenu = document.createElement('div');\r\n        mainMenu.className = 'main-menu';\r\n\r\n        mainMenu.innerHTML = 'Main Menu -- ';\r\n        mainMenu.innerHTML += 'Item1';\r\n        mainMenu.innerHTML += 'Item2';\r\n        mainMenu.innerHTML += 'Item3';\r\n\r\n        container.insertBefore(mainMenu, container.firstChild);\r\n    });\r\n})());\r\n","((function () {\r\n    'use strict';\r\n\r\n    var objectCount = 0;\r\n\r\n    Modules.prototype.add('scene', function (instance) {\r\n        instance.scene = TreeNode.extend();\r\n\r\n        instance.scene.addObject = function (info) {\r\n            if (!info.primitive) info.primitive = instance.graphics.gl.TRIANGLES;\r\n            if (!info.model) info.model = mat4.create();\r\n            if (!info.type) info.type = 'object';\r\n            if (!info.name) info.name = 'object_' + (objectCount++);\r\n            this.add(info);\r\n        };\r\n\r\n        instance.scene.getObjectByName = function (name) {\r\n            return getObjectByName(this, name);\r\n        };\r\n\r\n        instance.scene.getObjects = function () {\r\n            return this.dfs(function (node) {\r\n                return node.data.type === 'object';\r\n            });\r\n        };\r\n\r\n        instance.asset.mesh.get('monkey', function (mesh) {\r\n            instance.scene.addObject({mesh: mesh});\r\n        });\r\n    }, ['graphics']);\r\n\r\n    function getObjectByName (rootNode, name) {\r\n        for (var i = 0; i < rootNode.children.length; i++) {\r\n            var child = rootNode.children[i];\r\n            if (child.data.name === name) {\r\n                return child.data;\r\n            } else {\r\n                var node = getObjectByName(child, name);\r\n                if (node) return node.data;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n})());\r\n"]}