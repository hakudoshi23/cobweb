!function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}e(Array.prototype,"unique",function(){for(var e=this.concat(),t=0;t<e.length;++t)for(var n=t+1;n<e.length;++n)e[t]===e[n]&&e.splice(n--,1);return e}),e(Array.prototype,"forEach",function(e){for(var t=0;t<this.length;t++)e(this[t],t,this)})}(),function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}function t(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}e(HTMLElement.prototype,"addClass",function(){var e,t;for(var n in arguments)e=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[],t=arguments[n]?arguments[n].trim().replace(/\s+/g," ").split(" "):[],this.className=e.concat(t).unique().join(" ")}),e(HTMLElement.prototype,"hasClass",function(){var e,t=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[];for(var n in arguments){e=arguments[n]?arguments[n].trim().replace(/\s+/g," ").split(" "):[];for(var a=0;a<e.length;a++){var r=e[a];if(t.indexOf(r)==-1)return!1}}return!0}),e(HTMLElement.prototype,"removeClass",function(){var e,t,n=0,a=function(t){n=e.indexOf(t),n!=-1&&e.splice(n,1)};for(var r in arguments)e=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[],t=arguments[r]?arguments[r].trim().replace(/\s+/g," ").split(" "):[],t.forEach(a),this.className=e.unique().join(" ")}),e(HTMLElement.prototype,"data",function(e,t){window.__data_cache||(window.__data_cache=new WeakMap);var n=window.__data_cache.get(this)||{};return t?(n[e]=t,window.__data_cache.set(this,n),this):e?n&&n[e]:n}),e(HTMLElement.prototype,"setData",function(e){return window.__data_cache||(window.__data_cache=new WeakMap),window.__data_cache.set(this,e),this}),e(HTMLElement.prototype,"attr",function(e,t){if(void 0!==t)this.setAttribute(e,t);else{if(null!==t)return this.getAttribute(e);this.removeAttribute(e)}return this}),e(HTMLElement.prototype,"attrData",function(e,t){return this.attr("data-"+e,t)}),e(Element.prototype,"matches",Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(e){for(var t=(this.document||this.ownerDocument).querySelectorAll(e),n=t.length;--n>=0&&t.item(n)!==this;);return n>-1}),e(HTMLElement.prototype,"parent",function(e){if(!e)return this.parentElement;for(var t=this.parentElement;!t.matches(e);)t=t.parentElement;return t}),e(HTMLElement.prototype,"height",function(){if(1!=arguments.length)return this.clientHeight;var e=arguments[0];"number"==typeof e?this.style.height=e+"px":this.style.height=e}),e(HTMLElement.prototype,"width",function(){if(1!=arguments.length)return this.clientWidth;var e=arguments[0];"number"==typeof e?this.style.width=e+"px":this.style.width=e}),e(window,"guid",function(){return"GUID-"+t()+"-"+t()+"-"+t()}),e(HTMLElement.prototype,"guid",function(){var e=null,t=null;do e=window.guid(),t=document.querySelector("#"+e);while(t);return this.attr("id",e),e})}(),function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}e(Object,"keys",function(){return function(e){if("object"!=typeof e&&("function"!=typeof e||null===e))throw new TypeError("Object.keys called on non-object");var t,n=[];for(t in e)e.hasOwnProperty(t)&&n.push(t);return n}}()),e(Object,"clone",function(e){var t={};for(var n in e)if(e.hasOwnProperty(n)){var a=e[n];"object"==typeof a?t[n]=Object.clone(e[n]):t[n]=e[n]}return t})}(),function(){"use strict";var e=function(e){this.instance=e,this.listeners={}};e.prototype.trigger=function(){var e=arguments[0],t=this.listeners[e]||[];Array.prototype.splice.call(arguments,0,1);for(var n=0;n<t.length;n++)t[n].apply(null,arguments);this.instance.logger.debug("Event triggered: "+e),arguments.length>0&&this.instance.logger.debug(arguments)},e.prototype.on=function(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t)},e.prototype.off=function(e){delete this.listeners[e]},e.prototype.off=function(e,t){if(this.listeners[e]){var n=this.listeners[e];n.indexOf(t)>-1&&n.splice(index,1)}},window.EventHandler=e}(),function(){"use strict";var e=function(t){this.handlers=[],this.addHandler(this.level.ALL,function(t,n){e.prototype.level.DEBUG===t?console.debug(n):e.prototype.level.INFO===t?console.info(n):e.prototype.level.WARNING===t?console.warn(n):e.prototype.level.ERROR===t&&console.error(n)})};e.prototype.level={ALL:0,DEBUG:1,INFO:2,WARNING:3,ERROR:4,NONE:5},e.prototype.debug=function(t){this.log(e.prototype.level.DEBUG,t)},e.prototype.info=function(t){this.log(e.prototype.level.INFO,t)},e.prototype.warning=function(t){this.log(e.prototype.level.WARNING,t)},e.prototype.error=function(t){this.log(e.prototype.level.ERROR,t)},e.prototype.log=function(e,t){for(var n=e,a=this.handlers[n]||[];n>=0;)a.forEach(function(n){n(e,t)}),a=this.handlers[--n]||[]},e.prototype.addHandler=function(e,t){this.handlers[e]||(this.handlers[e]=[]),this.handlers[e].push(t)},e.prototype.removeHandler=function(e,t){var n=this.handlers[e];if(n){var a=n.indexOf(t);a>-1&&n.splice(a,1)}},window.Logger=e}(),function(){"use strict";var e={container:{selector:"#cobweb",className:"cb-container"}},t=function(n){if(this.options=e,this.extendOptions(this.options,n||{}),this.container=document.querySelector(this.options.container.selector),!this.container)throw new Error("Invalid container selector: '"+this.options.container.selector+"'");this.container.addClass(this.options.container.className),this.container.data("instance",this),this.logger=new Logger(this),this.events=new EventHandler(this),t.prototype.plugins.load(this)};t.prototype.extendOptions=function(e,t){for(var n in t)if(t.hasOwnProperty(n)){var a=t[n];"object"==typeof a?this.extendOptions(e[n],t[n]):e[n]=t[n]}},window.Cobweb=t}(),function(){"use strict";function e(e){for(var t in e){var n=e[t];if(n.dependant||(n.dependant=[]),n.dependencies.length>0)for(var a=0;a<n.dependencies.length;a++){var r=e[n.dependencies[a]];r.dependant||(r.dependant=[]),r.dependant.push(t)}}}function t(e,t){var a=[],r=[];for(var i in t)0===t[i].dependencies.length&&a.push(i);for(;a.length>0;){var o=a[0];if(a.splice(0,1),t[o]){var s=t[o];r.push(o);for(var p=0;p<s.dependant.length;p++){var c=s.dependant[p];n(r,t[c])&&a.push(c)}}else e.events.trigger("plugins.error.missing",o),e.logger.warning("Missing plugin '"+o+"'")}return Object.keys(t).length!==r.length&&(e.events.trigger("plugins.error.cycle"),e.logger.error("Dependency cycle found in plugins")),r}function n(e,t){for(var n=0;n<t.dependencies.length;n++)if(e.indexOf(t.dependencies[n])===-1)return!1;return!0}var a=function(){this.available={}};a.prototype.add=function(e,t,n){if(n=n||[],"string"!=typeof e)throw new Error("Parameter 1: expected string, found "+typeof e);if(!Array.isArray(n))throw new Error("Parameter 2: expected array, found "+typeof n);if("function"!=typeof t)throw new Error("Parameter 3: expected function, found "+typeof t);this.available[e]={dependencies:n,init:t}},a.prototype.load=function(n){n.plugins={},e(this.available);for(var a=t(n,this.available),r=0;r<a.length;r++){var i=a[r];this.available[i].init(n),n.events.trigger("plugins.loaded",i)}n.events.trigger("plugins.loaded.all",a)},Cobweb.prototype.plugins=new a}(),function(){"use strict";Cobweb.prototype.plugins.add("pane-types",function(e){var t={all:{},add:function(e,t){this.all[e]=t},get:function(e){return this.all[e]},remove:function(e){delete this.all[e]},has:function(e){return!!this.all[e]}};t.add("default",function(e,t){t.logger.debug("Default pane type (this does nothing)")});var n=document.querySelector(".cb-container .pane"),a=t.defaultType;a&&t.setType(n,a),e.events.on("pane.split",function(t,n){var a=t.attrData("pane-type");a&&e.pane.setType(n,a)}),e.pane.types=t,e.pane.setType=function(t,n){this.types.has(n)&&(this.types.get(n)(t,e),t.attrData("pane-type",n))}},["pane"])}(),function(){"use strict";function e(){var e=document.createElement("DIV");e.addClass("pane"),e.addEventListener("mouseover",i);var t=document.createElement("DIV");return t.addClass("pane-anchor"),t.addEventListener("mousedown",o),e.append(t),e}function t(e,t,n){var a=document.createElement("DIV"),r=e.parent(".pane-group");a[r.data("styleProperty")](n),a.addEventListener("mousedown",s),a.addClass("pane-separator"),a.data("pane1",e),a.data("pane2",t);var i="width"===r.data("styleProperty")?"ew":"ns";return a.style.cursor=i+"-resize",r.insertBefore(a,t),a}function n(e,t){var n=e.parent();if(n.hasClass(t))return n;var a=document.createElement("DIV");e.nextSibling&&e.nextSibling.data("pane1",a),e.previousSibling&&e.previousSibling.data("pane2",a),a.addClass("pane-group",t);var r="pane-group-h"===t?"width":"height";return a.style.cssText=e.style.cssText,a.data("perc-height",e.data("perc-height")),a.data("perc-width",e.data("perc-width")),a.data("styleProperty",r),e.attr("style",null),n.insertBefore(a,e),n.removeChild(e),a.append(e),a}function a(e){var t=e.parent(),n=t.parent();e.data("perc-height",t.data("perc-height")),e.data("perc-width",t.data("perc-width")),e.style.cssText=t.style.cssText,t.removeChild(e),n.insertBefore(e,t),n.removeChild(t),e.previousSibling&&e.previousSibling.data("pane2",e),e.nextSibling&&e.nextSibling.data("pane1",e)}function r(e,t){var n,a,r=0,i=e.querySelectorAll(":scope > .pane-separator"),o=e.querySelectorAll(":scope > .pane, :scope > .pane-group"),s=0;0!==i.length&&(s=i[0][t]()*i.length/o.length);for(var p=0;p<o.length;p++)n=o[p].data("perc-"+t),r+=n,a=n+"%",o[p].style[t]="calc("+a+" - "+s+"px)";r<100&&(n=o[o.length-1].data("perc-"+t),a=n+(100-r)+"%",o[o.length-1].style[t]="calc("+a+" - "+s+"px)")}function i(e){var t=e.target.hasClass("pane")?e.target:e.target.parent(".pane"),n=t.parent(".cb-container"),a=n.data("instance");a.pane.anchor||(a.pane.current=t)}function o(e){var t=e.target.parent(".cb-container"),n=t.data("instance");n.pane.anchor=e.target}function s(e){var t=e.target.parent(".cb-container"),n=t.data("instance");n.pane.separator=e.target,n.pane.separator.data("startX",e.pageX),n.pane.separator.data("startY",e.pageY)}function p(e){var t=document.querySelector(".cb-container"),n=t.data("instance");if(n.pane.anchor){var a=n.pane.anchor.getBoundingClientRect(),r=[a.left+a.width/2,a.top+a.height/2];r[0]-e.pageX>h?n.pane.anchor.style.backgroundColor="#000000":r[0]-e.pageX<-h?n.pane.anchor.style.backgroundColor="#FF0000":r[1]-e.pageY>h?n.pane.anchor.style.backgroundColor="#00FF00":r[1]-e.pageY<-h?n.pane.anchor.style.backgroundColor="#0000FF":n.pane.anchor.style.backgroundColor=""}if(n.pane.separator){var i=n.pane.separator,o=i.parent(),s=o.data("styleProperty"),p=o.querySelectorAll(":scope > .pane, :scope > .pane-group"),c=o.querySelectorAll(":scope > .pane-separator"),u=i.data("pane1"),d=i.data("pane2"),g=0,f=c[0][s]()*c.length/p.length+"px";if(g="height"===s?e.pageY-i.data("startY"):e.pageX-i.data("startX"),g>0&&d[s]()>100||g<0&&u[s]()>100){var v=100*g/o[s](),y=u.data("perc-"+s)+v,m=d.data("perc-"+s)-v;u.style[s]="calc("+y+"% - "+f+")",d.style[s]="calc("+m+"% - "+f+")",u.data("perc-"+s,y),d.data("perc-"+s,m),i.data("startX",e.pageX),i.data("startY",e.pageY),l(n,u),l(n,d)}}}function c(e){var t=document.querySelector(".cb-container"),n=t.data("instance");if(n.pane.anchor){n.pane.anchor.style.backgroundColor="";var a=n.pane.anchor.getBoundingClientRect(),r=[a.left+a.width/2,a.top+a.height/2];r[0]-e.pageX>h?n.pane.splitPane(n.pane.current,"h"):r[0]-e.pageX<-h?n.pane.mergePane(n.pane.current,"h"):r[1]-e.pageY>h?n.pane.mergePane(n.pane.current,"v"):r[1]-e.pageY<-h?n.pane.splitPane(n.pane.current,"v"):n.pane.anchor.style.backgroundColor="",n.pane.anchor=null}n.pane.separator&&(n.pane.separator=null)}function l(e,t){if(t.hasClass("pane-group")){var n=t.querySelectorAll(".pane");n.forEach(function(t){e.events.trigger("pane.resize",t)})}else e.events.trigger("pane.resize",t)}var u={minSize:50,separator:{size:5}},d=function(t){this.instance=t,this.options=u,t.extendOptions(this.options,t.options.pane||{});var n=e();n.data("perc-height",100),n.data("perc-width",100),n.style.height="100%",n.style.width="100%",t.container.append(n),this.separator=null,this.anchor=null,this.current=null,document.addEventListener("mousemove",p),document.addEventListener("mouseup",c),t.events.on("pane.select",function(e){t.pane.current=e}),window.addEventListener("resize",function(e){var n=":scope > .pane, :scope > .pane-group",a=t.container.querySelector(n);l(t,a)})};d.prototype.splitPane=function(a,i){var o="h"===i?"width":"height",s="h"===i?"height":"width";if(a[o]()>this.options.minSize){var p=n(a,"pane-group-"+i),c=e();a.nextSibling&&a.nextSibling.data("pane1",c);var u=a.data("perc-"+o);c.data("perc-"+o,u/2),a.data("perc-"+o,u/2),c.data("perc-"+s,100),a.data("perc-"+s,100),p.insertBefore(c,a.nextSibling),t(a,c,this.options.separator.size),r(p,o),this.instance.events.trigger("pane.split",a,c),l(this.instance,c),l(this.instance,a)}},d.prototype.mergePane=function(e,t){var n=0,i=e.parent(".pane-group");if("h"===t&&i.hasClass("pane-group-h")||"v"===t&&i.hasClass("pane-group-v")){var o="h"===t?"nextSibling":"previousSibling",s="h"===t?"width":"height";if(e[o]){var p=e[o][o];n=p.data("perc-"+s),this.instance.events.trigger("pane.merge",e,p),i.removeChild(e[o]),i.removeChild(e[o]),e.previousSibling&&e.previousSibling.data("pane2",e),e.nextSibling&&e.nextSibling.data("pane1",e);var c=i.children.length,u=e.data("perc-"+s)+n;e.data("perc-"+s,1===c?100:u);var d=i.querySelectorAll(":scope > .pane, :scope > .pane-group");1===d.length?a(e):r(i,s),l(this.instance,e)}}},Cobweb.prototype.plugins.add("pane",function(e){e.pane=new d(e)});var h=30}(),function(){"use strict";function e(e){var t=e.querySelector("canvas"),n=t.getContext("2d"),a=e.width(),r=e.height();e.data("buffer",new Uint8Array(a*r*4)),e.data("imgData",n.createImageData(a,r)),t.height=r,t.width=a;var i=e.data("surface");mat4.perspective(i.proj,-45*DEG2RAD,a/r,.1,1e3)}Cobweb.prototype.plugins.add("surface",function(t){t.pane.types.add("surface",function(t,n){var a=document.createElement("canvas");t.append(a);var r={proj:mat4.create(),view:mat4.create()};mat4.perspective(r.proj,-45*DEG2RAD,a.width/a.height,.1,1e3),mat4.lookAt(r.view,[0,2,4],[0,0,0],[0,1,0]),mat4.scale(r.view,r.view,[1,1.2,1]),t.data("surface",r),e(t)}),t.events.on("pane.resize",function(t){"surface"===t.attrData("pane-type")&&e(t)});var n=document.querySelector(".pane");t.pane.setType(n,"surface"),t.pane.setRender(n,"solid"),t.events.trigger("pane.resize",n)},["pane-types","surface-render"])}(),function(){"use strict";Cobweb.prototype.plugins.add("render-solid",function(e){var t=new Shader("precision highp float;attribute vec3 a_vertex;attribute vec3 a_normal;varying vec3 v_normal;uniform mat4 u_mvp;uniform mat4 u_model;void main() {    v_normal = (u_model * vec4(a_normal,0.0)).xyz;    gl_Position = u_mvp * vec4(a_vertex,1.0);}","precision highp float;varying vec3 v_normal;uniform vec3 u_lightvector;uniform vec4 u_color;void main() {  vec3 N = normalize(v_normal);  gl_FragColor = u_color * max(0.0, dot(u_lightvector,N));}"),n=mat4.create(),a=mat4.create(),r={u_color:[1,1,1,1],u_lightvector:vec3.normalize(vec3.create(),[1,2,3]),u_model:null,u_mvp:a};e.graphics.renders.add("solid",function(i){for(var o in e.scene){var s=e.scene[o];s&&(mat4.multiply(n,i.view,s.model),mat4.multiply(a,i.proj,n),r.u_model=s.model,t.uniforms(r).draw(s.mesh,s.primitive),mat4.rotateY(i.view,i.view,.01))}})},["graphics-render"])}(),function(){"use strict";Cobweb.prototype.plugins.add("surface-render",function(e){e.pane.setRender=function(t,n){var a=e.graphics.renders;a.has(n)&&t.attrData("surface-render",n)},e.pane.getRender=function(t){var n=e.graphics.renders,a=t.attrData("surface-render");return n.get(a)},e.events.on("pane.split",function(e,t){t.attrData("surface-render",e.attrData("surface-render"))})},["graphics-render"])}(),function(){"use strict";Cobweb.prototype.plugins.add("graphics-render",function(e){e.graphics.renders={all:{},add:function(e,t){this.all[e]=t},get:function(e){return this.all[e]},remove:function(e){delete this.all[e]},has:function(e){return!!this.all[e]}}},["graphics"])}(),function(){"use strict";function e(e,t){var n=t.parent(".pane"),a=n.data("imgData"),r=n.data("surface"),i=n.data("buffer"),o=e.graphics.gl,s=t.clientWidth,p=t.clientHeight;o.clear(o.COLOR_BUFFER_BIT|o.DEPTH_BUFFER_BIT),o.viewport(0,0,s,p);var c=e.pane.getRender(n);c&&c(r);var l=t.getContext("2d");l&&(o.readPixels(0,0,s,p,o.RGBA,o.UNSIGNED_BYTE,i),a.data.set(i),l.putImageData(a,0,0),l.translate(100,100))}var t=function(t){this.instance=t,this.gl=GL.create({height:screen.height,width:screen.width}),this.gl.animate(),this.gl.ondraw=function(){for(var n=document.querySelectorAll("canvas"),a=0;a<n.length;a++)e(t,n[a])},this.gl.clearColor(.4,.4,.4,1),this.gl.enable(this.gl.DEPTH_TEST)};Cobweb.prototype.plugins.add("graphics",function(e){e.graphics=new t(e),e.scene.cube={primitive:e.graphics.gl.TRIANGLES,model:mat4.create(),mesh:GL.Mesh.cube()}},["scene"])}(),function(){"use strict";Cobweb.prototype.plugins.add("scene",function(e){e.scene={}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5LmpzIiwiaHRtbC5qcyIsIm9iai5qcyIsImV2ZW50cy5qcyIsImxvZ2dlci5qcyIsImNvYndlYi5qcyIsInBsdWdpbnMuanMiLCJwYW5lL3BhbmUtdHlwZXMuanMiLCJwYW5lL3BhbmVzLmpzIiwicGFuZS9zdXJmYWNlL3N1cmZhY2UuanMiLCJwYW5lL3N1cmZhY2UvcmVuZGVyL3JlbmRlci1zb2xpZC5qcyIsInBhbmUvc3VyZmFjZS9yZW5kZXIvc3VyZmFjZS1yZW5kZXIuanMiLCJncmFwaGljLXJlbmRlci5qcyIsImdyYXBoaWMuanMiLCJzY2VuZS5qcyJdLCJuYW1lcyI6WyJzYWZlRXh0ZW5kIiwicHJvdG90eXBlIiwicHJvcGVydHkiLCJ2YWx1ZSIsIkFycmF5IiwiYSIsInRoaXMiLCJjb25jYXQiLCJpIiwibGVuZ3RoIiwiaiIsInNwbGljZSIsImNhbGxiYWNrIiwiczQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsIkhUTUxFbGVtZW50Iiwib2xkQ2xhc3NOYW1lcyIsIm5ld0NsYXNzTmFtZXMiLCJhcmd1bWVudHMiLCJjbGFzc05hbWUiLCJ0cmltIiwicmVwbGFjZSIsInNwbGl0IiwidW5pcXVlIiwiam9pbiIsInF1ZXJ5Q2xhc3NOYW1lcyIsImN1cnJlbnRDbGFzc05hbWVzIiwiaW5kZXgiLCJuYW1lIiwiaW5kZXhPZiIsInJlbW92ZUNsYXNzTmFtZXMiLCJyZW1vdmVFYWNoIiwiZm9yRWFjaCIsImF0dHIiLCJ3aW5kb3ciLCJfX2RhdGFfY2FjaGUiLCJXZWFrTWFwIiwiZWxBdHRycyIsImdldCIsInNldCIsImRhdGEiLCJ1bmRlZmluZWQiLCJzZXRBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJFbGVtZW50IiwibWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwicyIsIm1hdGNoZXMiLCJkb2N1bWVudCIsIm93bmVyRG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaXRlbSIsInF1ZXJ5IiwicGFyZW50RWxlbWVudCIsImN1cnJlbnQiLCJjbGllbnRIZWlnaHQiLCJzdHlsZSIsImhlaWdodCIsImNsaWVudFdpZHRoIiwid2lkdGgiLCJndWlkIiwib3ZlcmxhcCIsInF1ZXJ5U2VsZWN0b3IiLCJPYmplY3QiLCJvYmoiLCJUeXBlRXJyb3IiLCJwcm9wIiwicmVzdWx0IiwiaGFzT3duUHJvcGVydHkiLCJwdXNoIiwibmV3T2JqIiwiY2xvbmUiLCJFdmVudEhhbmRsZXIiLCJpbnN0YW5jZSIsImxpc3RlbmVycyIsInRyaWdnZXIiLCJjYWxsIiwiYXBwbHkiLCJsb2dnZXIiLCJkZWJ1ZyIsIm9uIiwib2ZmIiwiYXJyYXkiLCJMb2dnZXIiLCJoYW5kbGVycyIsImFkZEhhbmRsZXIiLCJsZXZlbCIsIkFMTCIsIm1lc3NhZ2UiLCJERUJVRyIsImNvbnNvbGUiLCJJTkZPIiwiaW5mbyIsIldBUk5JTkciLCJ3YXJuIiwiRVJST1IiLCJlcnJvciIsIk5PTkUiLCJsb2ciLCJ3YXJuaW5nIiwidG1wIiwibGV2ZWxIYW5kbGVycyIsImhhbmRsZXIiLCJyZW1vdmVIYW5kbGVyIiwiZGVmYXVsdE9wdGlvbnMiLCJjb250YWluZXIiLCJzZWxlY3RvciIsIkNvYndlYiIsIm9wdGlvbnMiLCJleHRlbmRPcHRpb25zIiwiRXJyb3IiLCJhZGRDbGFzcyIsImV2ZW50cyIsInBsdWdpbnMiLCJsb2FkIiwiZGVmYXVsdHMiLCJwcm9wZXJ0aWVzIiwiYWRkUmV2ZXJzZURlcGVuZGVuY2llcyIsInBsdWdpbiIsImRlcGVuZGFudCIsImRlcGVuZGVuY2llcyIsImRlcFBsdWdpbiIsInRvcG9sb2dpY2FsU29ydCIsImNhbmRpZGF0ZXMiLCJzb3J0ZWROYW1lcyIsIm5leHROYW1lIiwiZGVwTmFtZSIsImFsbERlcGVuZGVuY2llc01ldCIsImtleXMiLCJsb2FkZWRVbnRpbE5vdyIsIlBsdWdpbnMiLCJhdmFpbGFibGUiLCJhZGQiLCJpbml0IiwiaXNBcnJheSIsInBhbmVUeXBlcyIsImFsbCIsInJlbW92ZSIsImhhcyIsInBhbmUiLCJyb290IiwidHlwZSIsImRlZmF1bHRUeXBlIiwic2V0VHlwZSIsIm9sZFBhbmUiLCJuZXdQYW5lIiwib2xkVHlwZSIsImF0dHJEYXRhIiwidHlwZXMiLCJjcmVhdGVQYW5lIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwib25QYW5lTW91c2VPdmVyIiwiYW5jaG9yIiwib25BbmNob3JNb3VzZURvd24iLCJhcHBlbmQiLCJjcmVhdGVTZXBhcmF0b3IiLCJwYW5lMSIsInBhbmUyIiwic2l6ZSIsImdyb3VwIiwicGFyZW50Iiwib25TZXBhcmF0b3JNb3VzZURvd24iLCJhcnJvdyIsImN1cnNvciIsImluc2VydEJlZm9yZSIsIndyYXBCeUdyb3VwIiwiaGFzQ2xhc3MiLCJuZXh0U2libGluZyIsInByZXZpb3VzU2libGluZyIsInN0eWxlUHJvcCIsImNzc1RleHQiLCJyZW1vdmVDaGlsZCIsInVud3JhcEZyb21Hcm91cCIsInVwZGF0ZURpbWVuc2lvbnMiLCJzdHlsZUF0dHIiLCJwZXJjIiwicHJldlNpemUiLCJ0b3RhbFBlcmNzIiwic2VwcyIsInBhbmVzIiwic3ViU2l6ZSIsImV2ZW50IiwidGFyZ2V0Iiwic2VwYXJhdG9yIiwicGFnZVgiLCJwYWdlWSIsIm9uRG9jdW1lbnRNb3VzZU1vdmUiLCJiIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicG9zaXRpb24iLCJsZWZ0IiwidG9wIiwiYW5jaG9yVHJlc2hob2xkIiwiYmFja2dyb3VuZENvbG9yIiwic2VwIiwiZGVsdGEiLCJkZWx0YVBlcmMiLCJuZXdQYW5lMVBlcmMiLCJuZXdQYW5lMlBlcmMiLCJ0cmlnZ2VyUmVzaXplIiwib25Eb2N1bWVudE1vdXNlVXAiLCJzcGxpdFBhbmUiLCJtZXJnZVBhbmUiLCJtaW5TaXplIiwiUGFuZSIsInF1ZXJ5U3RyaW5nIiwiYXhpcyIsIl9zdHlsZUF0dHIiLCJvcmlnaW5hbERpbWVuc2lvbiIsInJlbW92ZWRTaXplIiwic2libGluZyIsInRvUmVtb3ZlIiwic2libGluZ3MiLCJjaGlsZHJlbiIsIm5ld1BlcmMiLCJzdWJQYW5lcyIsInVwZGF0ZUNhbnZhc1NpemUiLCJjYW52YXMiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsIlVpbnQ4QXJyYXkiLCJjcmVhdGVJbWFnZURhdGEiLCJtYXQ0IiwicGVyc3BlY3RpdmUiLCJwcm9qIiwiREVHMlJBRCIsImNyZWF0ZSIsInZpZXciLCJsb29rQXQiLCJzY2FsZSIsInNldFJlbmRlciIsInNoYWRlciIsIlNoYWRlciIsInRlbXAiLCJtdnAiLCJ1bmlmb3JtcyIsInVfY29sb3IiLCJ1X2xpZ2h0dmVjdG9yIiwidmVjMyIsIm5vcm1hbGl6ZSIsInVfbW9kZWwiLCJ1X212cCIsImdyYXBoaWNzIiwicmVuZGVycyIsInN1cmZhY2UiLCJzY2VuZSIsIm11bHRpcGx5IiwibW9kZWwiLCJkcmF3IiwibWVzaCIsInByaW1pdGl2ZSIsInJvdGF0ZVkiLCJnZXRSZW5kZXIiLCJkcmF3UmVuZGVyVGFyZ2V0IiwiaW1hZ2VEYXRhIiwiYnVmZmVyIiwiZ2wiLCJjbGVhciIsIkNPTE9SX0JVRkZFUl9CSVQiLCJERVBUSF9CVUZGRVJfQklUIiwidmlld3BvcnQiLCJyZW5kZXIiLCJyZWFkUGl4ZWxzIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJwdXRJbWFnZURhdGEiLCJ0cmFuc2xhdGUiLCJHcmFwaGljcyIsIkdMIiwic2NyZWVuIiwiYW5pbWF0ZSIsIm9uZHJhdyIsInJlbmRlclRhcmdldHMiLCJjbGVhckNvbG9yIiwiZW5hYmxlIiwiREVQVEhfVEVTVCIsImN1YmUiLCJUUklBTkdMRVMiLCJNZXNoIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUNBLFlBZUEsU0FBQUEsR0FBQUMsRUFBQUMsRUFBQUMsR0FDQUYsRUFBQUMsS0FBQUQsRUFBQUMsR0FBQUMsR0FkQUgsRUFBQUksTUFBQUgsVUFB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YUMxQkEsV0FDQSxZQUVBM0ssUUFBQW5ILFVBQUF5SCxRQUFBbUIsSUFBQSxRQUFBLFNBQUEzRCxHQUNBQSxFQUFBOEsiLCJmaWxlIjoiY29id2ViLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIigoZnVuY3Rpb24oKXtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEFycmF5LnByb3RvdHlwZSwgJ3VuaXF1ZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBhID0gdGhpcy5jb25jYXQoKTtcclxuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7ICsraSlcclxuICAgICAgICAgICAgZm9yKHZhciBqID0gaSArIDE7IGogPCBhLmxlbmd0aDsgKytqKVxyXG4gICAgICAgICAgICAgICAgaWYoYVtpXSA9PT0gYVtqXSkgYS5zcGxpY2Uoai0tLCAxKTtcclxuICAgICAgICByZXR1cm4gYTtcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoQXJyYXkucHJvdG90eXBlLCAnZm9yRWFjaCcsIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICBjYWxsYmFjayh0aGlzW2ldLCBpLCB0aGlzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhZmVFeHRlbmQocHJvdG90eXBlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcclxuICAgICAgICBpZighcHJvdG90eXBlW3Byb3BlcnR5XSkgcHJvdG90eXBlW3Byb3BlcnR5XSA9IHZhbHVlO1xyXG4gICAgfVxyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbigpe1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnYWRkQ2xhc3MnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG9sZENsYXNzTmFtZXMsIG5ld0NsYXNzTmFtZXM7XHJcbiAgICAgICAgZm9yKHZhciBpIGluIGFyZ3VtZW50cyl7XHJcbiAgICAgICAgICAgIG9sZENsYXNzTmFtZXMgPSAhdGhpcy5jbGFzc05hbWUgPyBbXSA6IHRoaXMuY2xhc3NOYW1lLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csICcgJykuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgbmV3Q2xhc3NOYW1lcyA9ICFhcmd1bWVudHNbaV0gPyBbXSA6IGFyZ3VtZW50c1tpXS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gb2xkQ2xhc3NOYW1lcy5jb25jYXQobmV3Q2xhc3NOYW1lcykudW5pcXVlKCkuam9pbignICcpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnaGFzQ2xhc3MnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHF1ZXJ5Q2xhc3NOYW1lcywgY3VycmVudENsYXNzTmFtZXMgPSAhdGhpcy5jbGFzc05hbWUgPyBbXSA6IHRoaXMuY2xhc3NOYW1lLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csICcgJykuc3BsaXQoJyAnKTtcclxuICAgICAgICBmb3IodmFyIGkgaW4gYXJndW1lbnRzKXtcclxuICAgICAgICAgICAgcXVlcnlDbGFzc05hbWVzID0gIWFyZ3VtZW50c1tpXSA/IFtdIDogYXJndW1lbnRzW2ldLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csICcgJykuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHF1ZXJ5Q2xhc3NOYW1lcy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gcXVlcnlDbGFzc05hbWVzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q2xhc3NOYW1lcy5pbmRleE9mKG5hbWUpID09IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAncmVtb3ZlQ2xhc3MnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gMCwgY3VycmVudENsYXNzTmFtZXMsIHJlbW92ZUNsYXNzTmFtZXM7XHJcbiAgICAgICAgdmFyIHJlbW92ZUVhY2ggPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICBpbmRleCA9IGN1cnJlbnRDbGFzc05hbWVzLmluZGV4T2YobmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCAhPSAtMSlcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRDbGFzc05hbWVzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IodmFyIGkgaW4gYXJndW1lbnRzKXtcclxuICAgICAgICAgICAgY3VycmVudENsYXNzTmFtZXMgPSAhdGhpcy5jbGFzc05hbWUgPyBbXSA6IHRoaXMuY2xhc3NOYW1lLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csICcgJykuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgcmVtb3ZlQ2xhc3NOYW1lcyA9ICFhcmd1bWVudHNbaV0gPyBbXSA6IGFyZ3VtZW50c1tpXS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzTmFtZXMuZm9yRWFjaChyZW1vdmVFYWNoKTtcclxuICAgICAgICAgICAgdGhpcy5jbGFzc05hbWUgPSBjdXJyZW50Q2xhc3NOYW1lcy51bmlxdWUoKS5qb2luKCcgJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgc2FmZUV4dGVuZChIVE1MRWxlbWVudC5wcm90b3R5cGUsICdkYXRhJywgZnVuY3Rpb24gKGF0dHIsIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCF3aW5kb3cuX19kYXRhX2NhY2hlKSB3aW5kb3cuX19kYXRhX2NhY2hlID0gbmV3IFdlYWtNYXAoKTtcclxuICAgICAgICB2YXIgZWxBdHRycyA9IHdpbmRvdy5fX2RhdGFfY2FjaGUuZ2V0KHRoaXMpIHx8IHt9O1xyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBlbEF0dHJzW2F0dHJdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHdpbmRvdy5fX2RhdGFfY2FjaGUuc2V0KHRoaXMsIGVsQXR0cnMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChhdHRyKSByZXR1cm4gZWxBdHRycyAmJiBlbEF0dHJzW2F0dHJdO1xyXG4gICAgICAgICAgICBlbHNlIHJldHVybiBlbEF0dHJzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnc2V0RGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgaWYgKCF3aW5kb3cuX19kYXRhX2NhY2hlKSB3aW5kb3cuX19kYXRhX2NhY2hlID0gbmV3IFdlYWtNYXAoKTtcclxuICAgICAgICB3aW5kb3cuX19kYXRhX2NhY2hlLnNldCh0aGlzLCBkYXRhKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnYXR0cicsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XHJcbiAgICAgICAgZWxzZSBpZiAodmFsdWUgPT09IG51bGwpXHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc2FmZUV4dGVuZChIVE1MRWxlbWVudC5wcm90b3R5cGUsICdhdHRyRGF0YScsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2RhdGEtJyArIG5hbWUsIHZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoRWxlbWVudC5wcm90b3R5cGUsICdtYXRjaGVzJyxcclxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzU2VsZWN0b3IgfHxcclxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcclxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fFxyXG4gICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm9NYXRjaGVzU2VsZWN0b3IgfHxcclxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcclxuICAgICAgICBmdW5jdGlvbihzKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRjaGVzID0gKHRoaXMuZG9jdW1lbnQgfHwgdGhpcy5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHMpLFxyXG4gICAgICAgICAgICAgICAgaSA9IG1hdGNoZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB3aGlsZSAoLS1pID49IDAgJiYgbWF0Y2hlcy5pdGVtKGkpICE9PSB0aGlzKSB7fVxyXG4gICAgICAgICAgICByZXR1cm4gaSA+IC0xO1xyXG4gICAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgc2FmZUV4dGVuZChIVE1MRWxlbWVudC5wcm90b3R5cGUsICdwYXJlbnQnLCBmdW5jdGlvbiAocXVlcnkpIHtcclxuICAgICAgICBpZiAoIXF1ZXJ5KSByZXR1cm4gdGhpcy5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgIHdoaWxlICghY3VycmVudC5tYXRjaGVzKHF1ZXJ5KSlcclxuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50RWxlbWVudDtcclxuICAgICAgICByZXR1cm4gY3VycmVudDtcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnaGVpZ2h0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUuaGVpZ2h0ID0gdmFsdWUgKyAncHgnO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0eWxlLmhlaWdodCA9IHZhbHVlO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRIZWlnaHQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ3dpZHRoJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUud2lkdGggPSB2YWx1ZSArICdweCc7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUud2lkdGggPSB2YWx1ZTtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50V2lkdGg7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKHdpbmRvdywgJ2d1aWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICdHVUlELScgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArIHM0KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ2d1aWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGd1aWQgPSBudWxsLCBvdmVybGFwID0gbnVsbDtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIGd1aWQgPSB3aW5kb3cuZ3VpZCgpO1xyXG4gICAgICAgICAgICBvdmVybGFwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyBndWlkKTtcclxuICAgICAgICB9IHdoaWxlKG92ZXJsYXApO1xyXG4gICAgICAgIHRoaXMuYXR0cignaWQnLCBndWlkKTtcclxuICAgICAgICByZXR1cm4gZ3VpZDtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhZmVFeHRlbmQocHJvdG90eXBlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcclxuICAgICAgICBpZighcHJvdG90eXBlW3Byb3BlcnR5XSkgcHJvdG90eXBlW3Byb3BlcnR5XSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHM0KCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKCgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwKVxyXG4gICAgICAgICAgICAudG9TdHJpbmcoMTYpLnN1YnN0cmluZygxKTtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24oKXtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBzYWZlRXh0ZW5kKE9iamVjdCwgJ2tleXMnLCAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGRvbnRFbnVtcyA9IFsgJ3RvU3RyaW5nJywgJ3RvTG9jYWxlU3RyaW5nJywgJ3ZhbHVlT2YnLCAnaGFzT3duUHJvcGVydHknLFxyXG4gICAgICAgICAgICAnaXNQcm90b3R5cGVPZicsICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICdjb25zdHJ1Y3RvcicgXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgJiYgKHR5cGVvZiBvYmogIT09ICdmdW5jdGlvbicgfHwgb2JqID09PSBudWxsKSlcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5rZXlzIGNhbGxlZCBvbiBub24tb2JqZWN0Jyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW10sIHByb3A7XHJcbiAgICAgICAgICAgIGZvciAocHJvcCBpbiBvYmopXHJcbiAgICAgICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHByb3ApKVxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHByb3ApO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcbiAgICB9KCkpKTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKE9iamVjdCwgJ2Nsb25lJywgZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIHZhciBuZXdPYmogPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBvYmopXHJcbiAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBvYmpbcHJvcGVydHldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3T2JqW3Byb3BlcnR5XSA9IE9iamVjdC5jbG9uZShvYmpbcHJvcGVydHldKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBuZXdPYmpbcHJvcGVydHldID0gb2JqW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXdPYmo7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYWZlRXh0ZW5kKHByb3RvdHlwZSwgcHJvcGVydHksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYoIXByb3RvdHlwZVtwcm9wZXJ0eV0pIHByb3RvdHlwZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIEV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xyXG4gICAgfTtcclxuXHJcbiAgICBFdmVudEhhbmRsZXIucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgbmFtZSA9IGFyZ3VtZW50c1swXTtcclxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNbbmFtZV0gfHwgW107XHJcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGFyZ3VtZW50cywgMCwgMSk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UubG9nZ2VyLmRlYnVnKCdFdmVudCB0cmlnZ2VyZWQ6ICcgKyBuYW1lKTtcclxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UubG9nZ2VyLmRlYnVnKGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG5cclxuICAgIEV2ZW50SGFuZGxlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICghdGhpcy5saXN0ZW5lcnNbbmFtZV0pIHRoaXMubGlzdGVuZXJzW25hbWVdID0gW107XHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbbmFtZV0ucHVzaChjYWxsYmFjayk7XHJcbiAgICB9O1xyXG5cclxuICAgIEV2ZW50SGFuZGxlci5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmxpc3RlbmVyc1tuYW1lXTtcclxuICAgIH07XHJcblxyXG4gICAgRXZlbnRIYW5kbGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICh0aGlzLmxpc3RlbmVyc1tuYW1lXSkge1xyXG4gICAgICAgICAgICB2YXIgYXJyYXkgPSB0aGlzLmxpc3RlbmVyc1tuYW1lXTtcclxuICAgICAgICAgICAgaWYgKGFycmF5LmluZGV4T2YoY2FsbGJhY2spID4gLTEpIGFycmF5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB3aW5kb3cuRXZlbnRIYW5kbGVyID0gRXZlbnRIYW5kbGVyO1xyXG59KSgpKTtcclxuIiwiLyoganNoaW50IGxvb3BmdW5jOnRydWUgKi9cclxuXHJcbigoZnVuY3Rpb24oKXtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgTG9nZ2VyID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVycyA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLmFkZEhhbmRsZXIodGhpcy5sZXZlbC5BTEwsIGZ1bmN0aW9uIChsZXZlbCwgbWVzc2FnZSkge1xyXG4gICAgICAgICAgICBpZiAoTG9nZ2VyLnByb3RvdHlwZS5sZXZlbC5ERUJVRyA9PT0gbGV2ZWwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoTG9nZ2VyLnByb3RvdHlwZS5sZXZlbC5JTkZPID09PSBsZXZlbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKExvZ2dlci5wcm90b3R5cGUubGV2ZWwuV0FSTklORyA9PT0gbGV2ZWwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChMb2dnZXIucHJvdG90eXBlLmxldmVsLkVSUk9SID09PSBsZXZlbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBMb2dnZXIucHJvdG90eXBlLmxldmVsID0ge1xyXG4gICAgICAgIEFMTDogMCxcclxuICAgICAgICBERUJVRzogMSxcclxuICAgICAgICBJTkZPOiAyLFxyXG4gICAgICAgIFdBUk5JTkc6IDMsXHJcbiAgICAgICAgRVJST1I6IDQsXHJcbiAgICAgICAgTk9ORTogNSxcclxuICAgIH07XHJcblxyXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5kZWJ1ZyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhpcy5sb2coTG9nZ2VyLnByb3RvdHlwZS5sZXZlbC5ERUJVRywgbWVzc2FnZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIExvZ2dlci5wcm90b3R5cGUuaW5mbyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhpcy5sb2coTG9nZ2VyLnByb3RvdHlwZS5sZXZlbC5JTkZPLCBtZXNzYWdlKTtcclxuICAgIH07XHJcblxyXG4gICAgTG9nZ2VyLnByb3RvdHlwZS53YXJuaW5nID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICB0aGlzLmxvZyhMb2dnZXIucHJvdG90eXBlLmxldmVsLldBUk5JTkcsIG1lc3NhZ2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICBMb2dnZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICB0aGlzLmxvZyhMb2dnZXIucHJvdG90eXBlLmxldmVsLkVSUk9SLCBtZXNzYWdlKTtcclxuICAgIH07XHJcblxyXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAobGV2ZWwsIG1lc3NhZ2UpIHtcclxuICAgICAgICB2YXIgdG1wID0gbGV2ZWw7XHJcbiAgICAgICAgdmFyIGxldmVsSGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzW3RtcF0gfHwgW107XHJcbiAgICAgICAgd2hpbGUgKHRtcCA+PSAwKSB7XHJcbiAgICAgICAgICAgIGxldmVsSGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcihsZXZlbCwgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBsZXZlbEhhbmRsZXJzID0gdGhpcy5oYW5kbGVyc1stLXRtcF0gfHwgW107XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBMb2dnZXIucHJvdG90eXBlLmFkZEhhbmRsZXIgPSBmdW5jdGlvbiAobGV2ZWwsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmhhbmRsZXJzW2xldmVsXSlcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVyc1tsZXZlbF0gPSBbXTtcclxuICAgICAgICB0aGlzLmhhbmRsZXJzW2xldmVsXS5wdXNoKGNhbGxiYWNrKTtcclxuICAgIH07XHJcblxyXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5yZW1vdmVIYW5kbGVyID0gZnVuY3Rpb24gKGxldmVsLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBsZXZlbEhhbmRsZXJzID0gdGhpcy5oYW5kbGVyc1tsZXZlbF07XHJcbiAgICAgICAgaWYgKGxldmVsSGFuZGxlcnMpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gbGV2ZWxIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpXHJcbiAgICAgICAgICAgICAgICBsZXZlbEhhbmRsZXJzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB3aW5kb3cuTG9nZ2VyID0gTG9nZ2VyO1xyXG59KSgpKTtcclxuIiwiKGZ1bmN0aW9uKCl7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xyXG4gICAgICAgIGNvbnRhaW5lcjoge1xyXG4gICAgICAgICAgICBzZWxlY3RvcjogJyNjb2J3ZWInLFxyXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdjYi1jb250YWluZXInXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgQ29id2ViID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcclxuICAgICAgICB0aGlzLmV4dGVuZE9wdGlvbnModGhpcy5vcHRpb25zLCBvcHRpb25zIHx8IHt9KTtcclxuXHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMub3B0aW9ucy5jb250YWluZXIuc2VsZWN0b3IpO1xyXG4gICAgICAgIGlmICghdGhpcy5jb250YWluZXIpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb250YWluZXIgc2VsZWN0b3I6IFxcJycgK1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmNvbnRhaW5lci5zZWxlY3RvciArICdcXCcnKTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuY29udGFpbmVyLmNsYXNzTmFtZSk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuZGF0YSgnaW5zdGFuY2UnLCB0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBuZXcgTG9nZ2VyKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcih0aGlzKTtcclxuICAgICAgICBDb2J3ZWIucHJvdG90eXBlLnBsdWdpbnMubG9hZCh0aGlzKTtcclxuICAgIH07XHJcblxyXG4gICAgQ29id2ViLnByb3RvdHlwZS5leHRlbmRPcHRpb25zID0gZnVuY3Rpb24gKGRlZmF1bHRzLCBwcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gcHJvcGVydGllcylcclxuICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBwcm9wZXJ0aWVzW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXh0ZW5kT3B0aW9ucyhkZWZhdWx0c1twcm9wZXJ0eV0sIHByb3BlcnRpZXNbcHJvcGVydHldKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0c1twcm9wZXJ0eV0gPSBwcm9wZXJ0aWVzW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB3aW5kb3cuQ29id2ViID0gQ29id2ViO1xyXG59KCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgUGx1Z2lucyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmF2YWlsYWJsZSA9IHt9O1xyXG4gICAgfTtcclxuXHJcbiAgICBQbHVnaW5zLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAobmFtZSwgaW5pdCwgZGVwZW5kZW5jaWVzKSB7XHJcbiAgICAgICAgZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzIHx8IFtdO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRXJyb3IoJ1BhcmFtZXRlciAxOiBleHBlY3RlZCBzdHJpbmcsIGZvdW5kICcgKyB0eXBlb2YgbmFtZSk7XHJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRlcGVuZGVuY2llcykpIHRocm93IG5ldyBFcnJvcignUGFyYW1ldGVyIDI6IGV4cGVjdGVkIGFycmF5LCBmb3VuZCAnICsgdHlwZW9mIGRlcGVuZGVuY2llcyk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBpbml0ICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRXJyb3IoJ1BhcmFtZXRlciAzOiBleHBlY3RlZCBmdW5jdGlvbiwgZm91bmQgJyArIHR5cGVvZiBpbml0KTtcclxuXHJcbiAgICAgICAgdGhpcy5hdmFpbGFibGVbbmFtZV0gPSB7XHJcbiAgICAgICAgICAgIGRlcGVuZGVuY2llczogZGVwZW5kZW5jaWVzLFxyXG4gICAgICAgICAgICBpbml0OiBpbml0XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgUGx1Z2lucy5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UucGx1Z2lucyA9IHt9O1xyXG4gICAgICAgIGFkZFJldmVyc2VEZXBlbmRlbmNpZXModGhpcy5hdmFpbGFibGUpO1xyXG4gICAgICAgIHZhciBzb3J0ZWROYW1lcyA9IHRvcG9sb2dpY2FsU29ydChpbnN0YW5jZSwgdGhpcy5hdmFpbGFibGUpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc29ydGVkTmFtZXMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgICAgICAgIHZhciBuYW1lID0gc29ydGVkTmFtZXNbaV07XHJcbiAgICAgICAgICAgIC8vdHJ5IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXZhaWxhYmxlW25hbWVdLmluaXQoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuZXZlbnRzLnRyaWdnZXIoJ3BsdWdpbnMubG9hZGVkJywgbmFtZSk7XHJcbiAgICAgICAgICAgIC8qfSBjYXRjaCAoZXgpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmxvZ2dlci5lcnJvcignTG9hZGluZyBwbHVnaW4gJyArIG5hbWUgKyAnOiAnICsgZXgpO1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuZXZlbnRzLnRyaWdnZXIoJ3BsdWdpbnMuZXJyb3InLCBuYW1lLCBleCk7XHJcbiAgICAgICAgICAgIH0qL1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbnN0YW5jZS5ldmVudHMudHJpZ2dlcigncGx1Z2lucy5sb2FkZWQuYWxsJywgc29ydGVkTmFtZXMpO1xyXG4gICAgfTtcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLnBsdWdpbnMgPSBuZXcgUGx1Z2lucygpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFkZFJldmVyc2VEZXBlbmRlbmNpZXMgKHBsdWdpbnMpIHtcclxuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHBsdWdpbnMpIHtcclxuICAgICAgICAgICAgdmFyIHBsdWdpbiA9IHBsdWdpbnNbbmFtZV07XHJcbiAgICAgICAgICAgIGlmICghcGx1Z2luLmRlcGVuZGFudCkgcGx1Z2luLmRlcGVuZGFudCA9IFtdO1xyXG4gICAgICAgICAgICBpZiAocGx1Z2luLmRlcGVuZGVuY2llcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbi5kZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVwUGx1Z2luID0gcGx1Z2luc1twbHVnaW4uZGVwZW5kZW5jaWVzW2ldXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWRlcFBsdWdpbi5kZXBlbmRhbnQpIGRlcFBsdWdpbi5kZXBlbmRhbnQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBkZXBQbHVnaW4uZGVwZW5kYW50LnB1c2gobmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdG9wb2xvZ2ljYWxTb3J0IChpbnN0YW5jZSwgcGx1Z2lucykge1xyXG4gICAgICAgIHZhciBjYW5kaWRhdGVzID0gW10sIHNvcnRlZE5hbWVzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBwbHVnaW5zKVxyXG4gICAgICAgICAgICBpZiAocGx1Z2luc1tuYW1lXS5kZXBlbmRlbmNpZXMubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgY2FuZGlkYXRlcy5wdXNoKG5hbWUpO1xyXG4gICAgICAgIHdoaWxlIChjYW5kaWRhdGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIG5leHROYW1lID0gY2FuZGlkYXRlc1swXTtcclxuICAgICAgICAgICAgY2FuZGlkYXRlcy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgICAgIGlmIChwbHVnaW5zW25leHROYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBsdWdpbiA9IHBsdWdpbnNbbmV4dE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgc29ydGVkTmFtZXMucHVzaChuZXh0TmFtZSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbi5kZXBlbmRhbnQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVwTmFtZSA9IHBsdWdpbi5kZXBlbmRhbnRbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbERlcGVuZGVuY2llc01ldChzb3J0ZWROYW1lcywgcGx1Z2luc1tkZXBOYW1lXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZXMucHVzaChkZXBOYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmV2ZW50cy50cmlnZ2VyKCdwbHVnaW5zLmVycm9yLm1pc3NpbmcnLCBuZXh0TmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIud2FybmluZygnTWlzc2luZyBwbHVnaW4gXFwnJyArIG5leHROYW1lICsgJ1xcJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhwbHVnaW5zKS5sZW5ndGggIT09IHNvcnRlZE5hbWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5ldmVudHMudHJpZ2dlcigncGx1Z2lucy5lcnJvci5jeWNsZScpO1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZXJyb3IoJ0RlcGVuZGVuY3kgY3ljbGUgZm91bmQgaW4gcGx1Z2lucycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc29ydGVkTmFtZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWxsRGVwZW5kZW5jaWVzTWV0IChsb2FkZWRVbnRpbE5vdywgcGx1Z2luKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbHVnaW4uZGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICBpZiAobG9hZGVkVW50aWxOb3cuaW5kZXhPZihwbHVnaW4uZGVwZW5kZW5jaWVzW2ldKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUucGx1Z2lucy5hZGQoJ3BhbmUtdHlwZXMnLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICB2YXIgcGFuZVR5cGVzID0ge1xyXG4gICAgICAgICAgICBhbGw6IHt9LFxyXG4gICAgICAgICAgICBhZGQ6IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hbGxbbmFtZV0gPSBjYWxsYmFjaztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWxsW25hbWVdO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5hbGxbbmFtZV07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGhhczogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhIXRoaXMuYWxsW25hbWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcGFuZVR5cGVzLmFkZCgnZGVmYXVsdCcsIGZ1bmN0aW9uIChwYW5lLCBpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZGVidWcoJ0RlZmF1bHQgcGFuZSB0eXBlICh0aGlzIGRvZXMgbm90aGluZyknKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdmFyIHJvb3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2ItY29udGFpbmVyIC5wYW5lJyk7XHJcbiAgICAgICAgdmFyIHR5cGUgPSBwYW5lVHlwZXMuZGVmYXVsdFR5cGU7XHJcbiAgICAgICAgaWYgKHR5cGUpIHBhbmVUeXBlcy5zZXRUeXBlKHJvb3QsIHR5cGUpO1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5ldmVudHMub24oJ3BhbmUuc3BsaXQnLCBmdW5jdGlvbiAob2xkUGFuZSwgbmV3UGFuZSkge1xyXG4gICAgICAgICAgICB2YXIgb2xkVHlwZSA9IG9sZFBhbmUuYXR0ckRhdGEoJ3BhbmUtdHlwZScpO1xyXG4gICAgICAgICAgICBpZiAob2xkVHlwZSkgaW5zdGFuY2UucGFuZS5zZXRUeXBlKG5ld1BhbmUsIG9sZFR5cGUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5wYW5lLnR5cGVzID0gcGFuZVR5cGVzO1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5wYW5lLnNldFR5cGUgPSBmdW5jdGlvbiAocGFuZSwgbmFtZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50eXBlcy5oYXMobmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHlwZXMuZ2V0KG5hbWUpKHBhbmUsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIHBhbmUuYXR0ckRhdGEoJ3BhbmUtdHlwZScsIG5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0sIFsncGFuZSddKTtcclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICAgICAgICBtaW5TaXplOiA1MCxcclxuICAgICAgICBzZXBhcmF0b3I6IHtcclxuICAgICAgICAgICAgc2l6ZTogNVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdmFyIFBhbmUgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICB0aGlzLmluc3RhbmNlID0gaW5zdGFuY2U7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XHJcbiAgICAgICAgaW5zdGFuY2UuZXh0ZW5kT3B0aW9ucyh0aGlzLm9wdGlvbnMsIGluc3RhbmNlLm9wdGlvbnMucGFuZSB8fCB7fSk7XHJcblxyXG4gICAgICAgIHZhciByb290ID0gY3JlYXRlUGFuZSgpO1xyXG4gICAgICAgIHJvb3QuZGF0YSgncGVyYy1oZWlnaHQnLCAxMDApO1xyXG4gICAgICAgIHJvb3QuZGF0YSgncGVyYy13aWR0aCcsIDEwMCk7XHJcbiAgICAgICAgcm9vdC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XHJcbiAgICAgICAgcm9vdC5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgICAgICBpbnN0YW5jZS5jb250YWluZXIuYXBwZW5kKHJvb3QpO1xyXG5cclxuICAgICAgICB0aGlzLnNlcGFyYXRvciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5hbmNob3IgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY3VycmVudCA9IG51bGw7XHJcblxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uRG9jdW1lbnRNb3VzZU1vdmUpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbkRvY3VtZW50TW91c2VVcCk7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmV2ZW50cy5vbigncGFuZS5zZWxlY3QnLCBmdW5jdGlvbiAocGFuZSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5wYW5lLmN1cnJlbnQgPSBwYW5lO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBxdWVyeVN0cmluZyA9ICc6c2NvcGUgPiAucGFuZSwgOnNjb3BlID4gLnBhbmUtZ3JvdXAnO1xyXG4gICAgICAgICAgICB2YXIgcm9vdCA9IGluc3RhbmNlLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKHF1ZXJ5U3RyaW5nKTtcclxuICAgICAgICAgICAgdHJpZ2dlclJlc2l6ZShpbnN0YW5jZSwgcm9vdCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIFBhbmUucHJvdG90eXBlLnNwbGl0UGFuZSA9IGZ1bmN0aW9uIChwYW5lLCBheGlzKSB7XHJcbiAgICAgICAgdmFyIHN0eWxlQXR0ciA9IGF4aXMgPT09ICdoJyA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcclxuICAgICAgICB2YXIgX3N0eWxlQXR0ciA9IGF4aXMgPT09ICdoJyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcclxuICAgICAgICBpZiAocGFuZVtzdHlsZUF0dHJdKCkgPiB0aGlzLm9wdGlvbnMubWluU2l6ZSkge1xyXG4gICAgICAgICAgICB2YXIgZ3JvdXAgPSB3cmFwQnlHcm91cChwYW5lLCAncGFuZS1ncm91cC0nICsgYXhpcyk7XHJcbiAgICAgICAgICAgIHZhciBuZXdQYW5lID0gY3JlYXRlUGFuZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHBhbmUubmV4dFNpYmxpbmcpXHJcbiAgICAgICAgICAgICAgICBwYW5lLm5leHRTaWJsaW5nLmRhdGEoJ3BhbmUxJywgbmV3UGFuZSk7XHJcblxyXG4gICAgICAgICAgICAvL25ld1BhbmUuc2V0RGF0YShPYmplY3QuY2xvbmUoZ3JvdXAuZGF0YSgpKSk7XHJcbiAgICAgICAgICAgIHZhciBvcmlnaW5hbERpbWVuc2lvbiA9IHBhbmUuZGF0YSgncGVyYy0nICsgc3R5bGVBdHRyKTtcclxuICAgICAgICAgICAgbmV3UGFuZS5kYXRhKCdwZXJjLScgKyBzdHlsZUF0dHIsIG9yaWdpbmFsRGltZW5zaW9uIC8gMik7XHJcbiAgICAgICAgICAgIHBhbmUuZGF0YSgncGVyYy0nICsgc3R5bGVBdHRyLCBvcmlnaW5hbERpbWVuc2lvbiAvIDIpO1xyXG4gICAgICAgICAgICBuZXdQYW5lLmRhdGEoJ3BlcmMtJyArIF9zdHlsZUF0dHIsIDEwMCk7XHJcbiAgICAgICAgICAgIHBhbmUuZGF0YSgncGVyYy0nICsgX3N0eWxlQXR0ciwgMTAwKTtcclxuICAgICAgICAgICAgZ3JvdXAuaW5zZXJ0QmVmb3JlKG5ld1BhbmUsIHBhbmUubmV4dFNpYmxpbmcpO1xyXG4gICAgICAgICAgICBjcmVhdGVTZXBhcmF0b3IocGFuZSwgbmV3UGFuZSwgdGhpcy5vcHRpb25zLnNlcGFyYXRvci5zaXplKTtcclxuXHJcbiAgICAgICAgICAgIHVwZGF0ZURpbWVuc2lvbnMoZ3JvdXAsIHN0eWxlQXR0cik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlLmV2ZW50cy50cmlnZ2VyKCdwYW5lLnNwbGl0JywgcGFuZSwgbmV3UGFuZSk7XHJcbiAgICAgICAgICAgIHRyaWdnZXJSZXNpemUodGhpcy5pbnN0YW5jZSwgbmV3UGFuZSk7XHJcbiAgICAgICAgICAgIHRyaWdnZXJSZXNpemUodGhpcy5pbnN0YW5jZSwgcGFuZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBQYW5lLnByb3RvdHlwZS5tZXJnZVBhbmUgPSBmdW5jdGlvbiAocGFuZSwgYXhpcykge1xyXG4gICAgICAgIHZhciByZW1vdmVkU2l6ZSA9IDA7XHJcbiAgICAgICAgdmFyIGdyb3VwID0gcGFuZS5wYXJlbnQoJy5wYW5lLWdyb3VwJyk7XHJcbiAgICAgICAgaWYgKChheGlzID09PSAnaCcgJiYgZ3JvdXAuaGFzQ2xhc3MoJ3BhbmUtZ3JvdXAtaCcpKSB8fFxuICAgICAgICAgICAgKGF4aXMgPT09ICd2JyAmJiBncm91cC5oYXNDbGFzcygncGFuZS1ncm91cC12JykpKSB7XG4gICAgICAgICAgICB2YXIgc2libGluZyA9IGF4aXMgPT09ICdoJyA/ICduZXh0U2libGluZycgOiAncHJldmlvdXNTaWJsaW5nJztcclxuICAgICAgICAgICAgdmFyIHN0eWxlQXR0ciA9IGF4aXMgPT09ICdoJyA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcclxuICAgICAgICAgICAgaWYgKHBhbmVbc2libGluZ10pIHtcclxuICAgICAgICAgICAgICAgIHZhciB0b1JlbW92ZSA9IHBhbmVbc2libGluZ11bc2libGluZ107XHJcbiAgICAgICAgICAgICAgICByZW1vdmVkU2l6ZSA9IHRvUmVtb3ZlLmRhdGEoJ3BlcmMtJyArIHN0eWxlQXR0cik7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS5ldmVudHMudHJpZ2dlcigncGFuZS5tZXJnZScsIHBhbmUsIHRvUmVtb3ZlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBncm91cC5yZW1vdmVDaGlsZChwYW5lW3NpYmxpbmddKTtcclxuICAgICAgICAgICAgICAgIGdyb3VwLnJlbW92ZUNoaWxkKHBhbmVbc2libGluZ10pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhbmUucHJldmlvdXNTaWJsaW5nKSBwYW5lLnByZXZpb3VzU2libGluZy5kYXRhKCdwYW5lMicsIHBhbmUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhbmUubmV4dFNpYmxpbmcpIHBhbmUubmV4dFNpYmxpbmcuZGF0YSgncGFuZTEnLCBwYW5lKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgc2libGluZ3MgPSBncm91cC5jaGlsZHJlbi5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3UGVyYyA9IHBhbmUuZGF0YSgncGVyYy0nICsgc3R5bGVBdHRyKSArIHJlbW92ZWRTaXplO1xyXG4gICAgICAgICAgICAgICAgcGFuZS5kYXRhKCdwZXJjLScgKyBzdHlsZUF0dHIsIHNpYmxpbmdzID09PSAxID8gMTAwIDogbmV3UGVyYyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHN1YlBhbmVzID0gZ3JvdXAucXVlcnlTZWxlY3RvckFsbCgnOnNjb3BlID4gLnBhbmUsIDpzY29wZSA+IC5wYW5lLWdyb3VwJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3ViUGFuZXMubGVuZ3RoID09PSAxKSB1bndyYXBGcm9tR3JvdXAocGFuZSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHVwZGF0ZURpbWVuc2lvbnMoZ3JvdXAsIHN0eWxlQXR0cik7XHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyUmVzaXplKHRoaXMuaW5zdGFuY2UsIHBhbmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLnBsdWdpbnMuYWRkKCdwYW5lJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UucGFuZSA9IG5ldyBQYW5lKGluc3RhbmNlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhbmUgKCkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcygncGFuZScpO1xyXG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgb25QYW5lTW91c2VPdmVyKTtcclxuXHJcbiAgICAgICAgdmFyIGFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIGFuY2hvci5hZGRDbGFzcygncGFuZS1hbmNob3InKTtcclxuICAgICAgICBhbmNob3IuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25BbmNob3JNb3VzZURvd24pO1xyXG4gICAgICAgIGVsZW1lbnQuYXBwZW5kKGFuY2hvcik7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlU2VwYXJhdG9yIChwYW5lMSwgcGFuZTIsIHNpemUpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgIHZhciBncm91cCA9IHBhbmUxLnBhcmVudCgnLnBhbmUtZ3JvdXAnKTtcclxuICAgICAgICBlbGVtZW50W2dyb3VwLmRhdGEoJ3N0eWxlUHJvcGVydHknKV0oc2l6ZSk7XHJcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvblNlcGFyYXRvck1vdXNlRG93bik7XHJcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcygncGFuZS1zZXBhcmF0b3InKTtcclxuICAgICAgICBlbGVtZW50LmRhdGEoJ3BhbmUxJywgcGFuZTEpO1xyXG4gICAgICAgIGVsZW1lbnQuZGF0YSgncGFuZTInLCBwYW5lMik7XHJcbiAgICAgICAgdmFyIGFycm93ID0gZ3JvdXAuZGF0YSgnc3R5bGVQcm9wZXJ0eScpID09PSAnd2lkdGgnID8gJ2V3JyA6ICducyc7XHJcbiAgICAgICAgZWxlbWVudC5zdHlsZS5jdXJzb3IgPSBhcnJvdyArICctcmVzaXplJztcclxuICAgICAgICBncm91cC5pbnNlcnRCZWZvcmUoZWxlbWVudCwgcGFuZTIpO1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHdyYXBCeUdyb3VwIChwYW5lLCBjbGFzc05hbWUpIHtcclxuICAgICAgICB2YXIgcGFyZW50ID0gcGFuZS5wYXJlbnQoKTtcclxuICAgICAgICBpZiAoIXBhcmVudC5oYXNDbGFzcyhjbGFzc05hbWUpKSB7XHJcbiAgICAgICAgICAgIHZhciBncm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgICAgICBpZiAocGFuZS5uZXh0U2libGluZylcclxuICAgICAgICAgICAgICAgIHBhbmUubmV4dFNpYmxpbmcuZGF0YSgncGFuZTEnLCBncm91cCk7XHJcbiAgICAgICAgICAgIGlmIChwYW5lLnByZXZpb3VzU2libGluZylcclxuICAgICAgICAgICAgICAgIHBhbmUucHJldmlvdXNTaWJsaW5nLmRhdGEoJ3BhbmUyJywgZ3JvdXApO1xyXG4gICAgICAgICAgICBncm91cC5hZGRDbGFzcygncGFuZS1ncm91cCcsIGNsYXNzTmFtZSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgc3R5bGVQcm9wID0gY2xhc3NOYW1lID09PSAncGFuZS1ncm91cC1oJyA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcclxuICAgICAgICAgICAgZ3JvdXAuc3R5bGUuY3NzVGV4dCA9IHBhbmUuc3R5bGUuY3NzVGV4dDtcclxuICAgICAgICAgICAgZ3JvdXAuZGF0YSgncGVyYy1oZWlnaHQnLCBwYW5lLmRhdGEoJ3BlcmMtaGVpZ2h0JykpO1xyXG4gICAgICAgICAgICBncm91cC5kYXRhKCdwZXJjLXdpZHRoJywgcGFuZS5kYXRhKCdwZXJjLXdpZHRoJykpO1xyXG4gICAgICAgICAgICBncm91cC5kYXRhKCdzdHlsZVByb3BlcnR5Jywgc3R5bGVQcm9wKTtcclxuICAgICAgICAgICAgcGFuZS5hdHRyKCdzdHlsZScsIG51bGwpO1xyXG5cclxuICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShncm91cCwgcGFuZSk7XHJcbiAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChwYW5lKTtcclxuICAgICAgICAgICAgZ3JvdXAuYXBwZW5kKHBhbmUpO1xyXG4gICAgICAgICAgICByZXR1cm4gZ3JvdXA7XHJcbiAgICAgICAgfSBlbHNlIHJldHVybiBwYXJlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdW53cmFwRnJvbUdyb3VwIChwYW5lKSB7XHJcbiAgICAgICAgdmFyIGdyb3VwID0gcGFuZS5wYXJlbnQoKTtcclxuICAgICAgICB2YXIgcGFyZW50ID0gZ3JvdXAucGFyZW50KCk7XHJcblxyXG4gICAgICAgIHBhbmUuZGF0YSgncGVyYy1oZWlnaHQnLCBncm91cC5kYXRhKCdwZXJjLWhlaWdodCcpKTtcclxuICAgICAgICBwYW5lLmRhdGEoJ3BlcmMtd2lkdGgnLCBncm91cC5kYXRhKCdwZXJjLXdpZHRoJykpO1xyXG4gICAgICAgIHBhbmUuc3R5bGUuY3NzVGV4dCA9IGdyb3VwLnN0eWxlLmNzc1RleHQ7XHJcblxyXG4gICAgICAgIGdyb3VwLnJlbW92ZUNoaWxkKHBhbmUpO1xyXG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUocGFuZSwgZ3JvdXApO1xyXG4gICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChncm91cCk7XHJcblxyXG4gICAgICAgIGlmIChwYW5lLnByZXZpb3VzU2libGluZykgcGFuZS5wcmV2aW91c1NpYmxpbmcuZGF0YSgncGFuZTInLCBwYW5lKTtcclxuICAgICAgICBpZiAocGFuZS5uZXh0U2libGluZykgcGFuZS5uZXh0U2libGluZy5kYXRhKCdwYW5lMScsIHBhbmUpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZURpbWVuc2lvbnMgKGdyb3VwLCBzdHlsZUF0dHIpIHtcclxuICAgICAgICB2YXIgdG90YWxQZXJjcyA9IDAsIHBlcmMsIHByZXZTaXplO1xyXG4gICAgICAgIHZhciBzZXBzID0gZ3JvdXAucXVlcnlTZWxlY3RvckFsbCgnOnNjb3BlID4gLnBhbmUtc2VwYXJhdG9yJyk7XHJcbiAgICAgICAgdmFyIHBhbmVzID0gZ3JvdXAucXVlcnlTZWxlY3RvckFsbCgnOnNjb3BlID4gLnBhbmUsIDpzY29wZSA+IC5wYW5lLWdyb3VwJyk7XHJcbiAgICAgICAgdmFyIHN1YlNpemUgPSAwO1xyXG4gICAgICAgIGlmIChzZXBzLmxlbmd0aCAhPT0gMClcbiAgICAgICAgICAgIHN1YlNpemUgPSBzZXBzWzBdW3N0eWxlQXR0cl0oKSAqIHNlcHMubGVuZ3RoIC8gcGFuZXMubGVuZ3RoO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFuZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcGVyYyA9IHBhbmVzW2ldLmRhdGEoJ3BlcmMtJyArIHN0eWxlQXR0cik7XHJcbiAgICAgICAgICAgIHRvdGFsUGVyY3MgKz0gcGVyYztcclxuICAgICAgICAgICAgcHJldlNpemUgPSBwZXJjICsgJyUnO1xyXG4gICAgICAgICAgICBwYW5lc1tpXS5zdHlsZVtzdHlsZUF0dHJdID0gJ2NhbGMoJyArIHByZXZTaXplICsgJyAtICcgKyBzdWJTaXplICsgJ3B4KSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0b3RhbFBlcmNzIDwgMTAwKSB7XHJcbiAgICAgICAgICAgIHBlcmMgPSBwYW5lc1twYW5lcy5sZW5ndGggLSAxXS5kYXRhKCdwZXJjLScgKyBzdHlsZUF0dHIpO1xyXG4gICAgICAgICAgICBwcmV2U2l6ZSA9IChwZXJjICsgKDEwMCAtIHRvdGFsUGVyY3MpKSArICclJztcclxuICAgICAgICAgICAgcGFuZXNbcGFuZXMubGVuZ3RoIC0gMV0uc3R5bGVbc3R5bGVBdHRyXSA9ICdjYWxjKCcgKyBwcmV2U2l6ZSArICcgLSAnICsgc3ViU2l6ZSArICdweCknO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBvblBhbmVNb3VzZU92ZXIgKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIHBhbmUgPSBldmVudC50YXJnZXQuaGFzQ2xhc3MoJ3BhbmUnKSA/IGV2ZW50LnRhcmdldCA6IGV2ZW50LnRhcmdldC5wYXJlbnQoJy5wYW5lJyk7XHJcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IHBhbmUucGFyZW50KCcuY2ItY29udGFpbmVyJyk7XHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gY29udGFpbmVyLmRhdGEoJ2luc3RhbmNlJyk7XHJcbiAgICAgICAgaWYgKCFpbnN0YW5jZS5wYW5lLmFuY2hvcilcclxuICAgICAgICAgICAgaW5zdGFuY2UucGFuZS5jdXJyZW50ID0gcGFuZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBvbkFuY2hvck1vdXNlRG93biAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgY29udGFpbmVyID0gZXZlbnQudGFyZ2V0LnBhcmVudCgnLmNiLWNvbnRhaW5lcicpO1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGNvbnRhaW5lci5kYXRhKCdpbnN0YW5jZScpO1xyXG4gICAgICAgIGluc3RhbmNlLnBhbmUuYW5jaG9yID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG9uU2VwYXJhdG9yTW91c2VEb3duIChldmVudCkge1xyXG4gICAgICAgIHZhciBjb250YWluZXIgPSBldmVudC50YXJnZXQucGFyZW50KCcuY2ItY29udGFpbmVyJyk7XHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gY29udGFpbmVyLmRhdGEoJ2luc3RhbmNlJyk7XHJcbiAgICAgICAgaW5zdGFuY2UucGFuZS5zZXBhcmF0b3IgPSBldmVudC50YXJnZXQ7XHJcbiAgICAgICAgaW5zdGFuY2UucGFuZS5zZXBhcmF0b3IuZGF0YSgnc3RhcnRYJywgZXZlbnQucGFnZVgpO1xyXG4gICAgICAgIGluc3RhbmNlLnBhbmUuc2VwYXJhdG9yLmRhdGEoJ3N0YXJ0WScsIGV2ZW50LnBhZ2VZKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgYW5jaG9yVHJlc2hob2xkID0gMzA7XHJcbiAgICBmdW5jdGlvbiBvbkRvY3VtZW50TW91c2VNb3ZlIChldmVudCkge1xyXG4gICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2ItY29udGFpbmVyJyk7XHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gY29udGFpbmVyLmRhdGEoJ2luc3RhbmNlJyk7XHJcblxyXG4gICAgICAgIGlmIChpbnN0YW5jZS5wYW5lLmFuY2hvcikge1xyXG4gICAgICAgICAgICB2YXIgYiA9IGluc3RhbmNlLnBhbmUuYW5jaG9yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBbYi5sZWZ0ICsgKGIud2lkdGggLyAyKSwgYi50b3AgKyAoYi5oZWlnaHQgLyAyKV07XHJcblxyXG4gICAgICAgICAgICBpZiAoKHBvc2l0aW9uWzBdIC0gZXZlbnQucGFnZVgpID4gYW5jaG9yVHJlc2hob2xkKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5wYW5lLmFuY2hvci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzAwMDAwMCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKHBvc2l0aW9uWzBdIC0gZXZlbnQucGFnZVgpIDwgLWFuY2hvclRyZXNoaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UucGFuZS5hbmNob3Iuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyNGRjAwMDAnO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKChwb3NpdGlvblsxXSAtIGV2ZW50LnBhZ2VZKSA+IGFuY2hvclRyZXNoaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UucGFuZS5hbmNob3Iuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyMwMEZGMDAnO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKChwb3NpdGlvblsxXSAtIGV2ZW50LnBhZ2VZKSA8IC1hbmNob3JUcmVzaGhvbGQpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnBhbmUuYW5jaG9yLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjMDAwMEZGJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnBhbmUuYW5jaG9yLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaW5zdGFuY2UucGFuZS5zZXBhcmF0b3IpIHtcclxuICAgICAgICAgICAgdmFyIHNlcCA9IGluc3RhbmNlLnBhbmUuc2VwYXJhdG9yO1xyXG4gICAgICAgICAgICB2YXIgZ3JvdXAgPSBzZXAucGFyZW50KCk7XHJcbiAgICAgICAgICAgIHZhciBzdHlsZUF0dHIgPSBncm91cC5kYXRhKCdzdHlsZVByb3BlcnR5Jyk7XHJcbiAgICAgICAgICAgIHZhciBwYW5lcyA9IGdyb3VwLnF1ZXJ5U2VsZWN0b3JBbGwoJzpzY29wZSA+IC5wYW5lLCA6c2NvcGUgPiAucGFuZS1ncm91cCcpO1xyXG4gICAgICAgICAgICB2YXIgc2VwcyA9IGdyb3VwLnF1ZXJ5U2VsZWN0b3JBbGwoJzpzY29wZSA+IC5wYW5lLXNlcGFyYXRvcicpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHBhbmUxID0gc2VwLmRhdGEoJ3BhbmUxJyk7XHJcbiAgICAgICAgICAgIHZhciBwYW5lMiA9IHNlcC5kYXRhKCdwYW5lMicpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGRlbHRhID0gMDtcclxuICAgICAgICAgICAgdmFyIHN1YlNpemUgPSAoc2Vwc1swXVtzdHlsZUF0dHJdKCkgKiBzZXBzLmxlbmd0aCAvIHBhbmVzLmxlbmd0aCkgKyAncHgnO1xyXG4gICAgICAgICAgICBpZiAoc3R5bGVBdHRyID09PSAnaGVpZ2h0JykgZGVsdGEgPSBldmVudC5wYWdlWSAtIHNlcC5kYXRhKCdzdGFydFknKTtcclxuICAgICAgICAgICAgZWxzZSBkZWx0YSA9IGV2ZW50LnBhZ2VYIC0gc2VwLmRhdGEoJ3N0YXJ0WCcpO1xyXG4gICAgICAgICAgICBpZiAoKGRlbHRhID4gMCAmJiBwYW5lMltzdHlsZUF0dHJdKCkgPiAxMDApIHx8IChkZWx0YSA8IDAgJiYgcGFuZTFbc3R5bGVBdHRyXSgpID4gMTAwKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlbHRhUGVyYyA9IGRlbHRhICogMTAwIC8gZ3JvdXBbc3R5bGVBdHRyXSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld1BhbmUxUGVyYyA9IHBhbmUxLmRhdGEoJ3BlcmMtJyArIHN0eWxlQXR0cikgKyBkZWx0YVBlcmM7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3UGFuZTJQZXJjID0gcGFuZTIuZGF0YSgncGVyYy0nICsgc3R5bGVBdHRyKSAtIGRlbHRhUGVyYztcclxuICAgICAgICAgICAgICAgIHBhbmUxLnN0eWxlW3N0eWxlQXR0cl0gPSAnY2FsYygnICsgbmV3UGFuZTFQZXJjICsgJyUgLSAnICsgc3ViU2l6ZSArICcpJztcclxuICAgICAgICAgICAgICAgIHBhbmUyLnN0eWxlW3N0eWxlQXR0cl0gPSAnY2FsYygnICsgbmV3UGFuZTJQZXJjICsgJyUgLSAnICsgc3ViU2l6ZSArICcpJztcclxuICAgICAgICAgICAgICAgIHBhbmUxLmRhdGEoJ3BlcmMtJyArIHN0eWxlQXR0ciwgbmV3UGFuZTFQZXJjKTtcclxuICAgICAgICAgICAgICAgIHBhbmUyLmRhdGEoJ3BlcmMtJyArIHN0eWxlQXR0ciwgbmV3UGFuZTJQZXJjKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXAuZGF0YSgnc3RhcnRYJywgZXZlbnQucGFnZVgpO1xyXG4gICAgICAgICAgICAgICAgc2VwLmRhdGEoJ3N0YXJ0WScsIGV2ZW50LnBhZ2VZKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyUmVzaXplKGluc3RhbmNlLCBwYW5lMSk7XHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyUmVzaXplKGluc3RhbmNlLCBwYW5lMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gb25Eb2N1bWVudE1vdXNlVXAgKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYi1jb250YWluZXInKTtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSBjb250YWluZXIuZGF0YSgnaW5zdGFuY2UnKTtcclxuXHJcbiAgICAgICAgaWYgKGluc3RhbmNlLnBhbmUuYW5jaG9yKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnBhbmUuYW5jaG9yLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcnO1xyXG5cclxuICAgICAgICAgICAgdmFyIGIgPSBpbnN0YW5jZS5wYW5lLmFuY2hvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gW2IubGVmdCArIChiLndpZHRoIC8gMiksIGIudG9wICsgKGIuaGVpZ2h0IC8gMildO1xyXG5cclxuICAgICAgICAgICAgaWYgKChwb3NpdGlvblswXSAtIGV2ZW50LnBhZ2VYKSA+IGFuY2hvclRyZXNoaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UucGFuZS5zcGxpdFBhbmUoaW5zdGFuY2UucGFuZS5jdXJyZW50LCAnaCcpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKChwb3NpdGlvblswXSAtIGV2ZW50LnBhZ2VYKSA8IC1hbmNob3JUcmVzaGhvbGQpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnBhbmUubWVyZ2VQYW5lKGluc3RhbmNlLnBhbmUuY3VycmVudCwgJ2gnKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgocG9zaXRpb25bMV0gLSBldmVudC5wYWdlWSkgPiBhbmNob3JUcmVzaGhvbGQpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnBhbmUubWVyZ2VQYW5lKGluc3RhbmNlLnBhbmUuY3VycmVudCwgJ3YnKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgocG9zaXRpb25bMV0gLSBldmVudC5wYWdlWSkgPCAtYW5jaG9yVHJlc2hob2xkKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5wYW5lLnNwbGl0UGFuZShpbnN0YW5jZS5wYW5lLmN1cnJlbnQsICd2Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5wYW5lLmFuY2hvci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5zdGFuY2UucGFuZS5hbmNob3IgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGluc3RhbmNlLnBhbmUuc2VwYXJhdG9yKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnBhbmUuc2VwYXJhdG9yID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdHJpZ2dlclJlc2l6ZSAoaW5zdGFuY2UsIHBhbmUpIHtcclxuICAgICAgICBpZiAocGFuZS5oYXNDbGFzcygncGFuZS1ncm91cCcpKSB7XHJcbiAgICAgICAgICAgIHZhciBwYW5lcyA9IHBhbmUucXVlcnlTZWxlY3RvckFsbCgnLnBhbmUnKTtcclxuICAgICAgICAgICAgcGFuZXMuZm9yRWFjaChmdW5jdGlvbiAocGFuZSkge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuZXZlbnRzLnRyaWdnZXIoJ3BhbmUucmVzaXplJywgcGFuZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmV2ZW50cy50cmlnZ2VyKCdwYW5lLnJlc2l6ZScsIHBhbmUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUucGx1Z2lucy5hZGQoJ3N1cmZhY2UnLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBpbnN0YW5jZS5wYW5lLnR5cGVzLmFkZCgnc3VyZmFjZScsIGZ1bmN0aW9uIChwYW5lLCBpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgICAgICAgIHBhbmUuYXBwZW5kKGNhbnZhcyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIHByb2o6IG1hdDQuY3JlYXRlKCksXHJcbiAgICAgICAgICAgICAgICB2aWV3OiBtYXQ0LmNyZWF0ZSgpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIG1hdDQucGVyc3BlY3RpdmUoZGF0YS5wcm9qLCAtNDUgKiBERUcyUkFELFxyXG4gICAgICAgICAgICAgICAgY2FudmFzLndpZHRoIC8gY2FudmFzLmhlaWdodCwgMC4xLCAxMDAwKTtcclxuICAgICAgICAgICAgbWF0NC5sb29rQXQoZGF0YS52aWV3LCBbMCwyLDRdLCBbMCwwLDBdLCBbMCwxLDBdKTtcclxuICAgICAgICAgICAgbWF0NC5zY2FsZShkYXRhLnZpZXcsIGRhdGEudmlldywgWzEsMS4yLDFdKTtcclxuICAgICAgICAgICAgcGFuZS5kYXRhKCdzdXJmYWNlJywgZGF0YSk7XHJcbiAgICAgICAgICAgIHVwZGF0ZUNhbnZhc1NpemUocGFuZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmV2ZW50cy5vbigncGFuZS5yZXNpemUnLCBmdW5jdGlvbiAocGFuZSkge1xyXG4gICAgICAgICAgICBpZiAocGFuZS5hdHRyRGF0YSgncGFuZS10eXBlJykgPT09ICdzdXJmYWNlJykge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlQ2FudmFzU2l6ZShwYW5lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgcm9vdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYW5lJyk7XHJcbiAgICAgICAgaW5zdGFuY2UucGFuZS5zZXRUeXBlKHJvb3QsICdzdXJmYWNlJyk7XHJcbiAgICAgICAgaW5zdGFuY2UucGFuZS5zZXRSZW5kZXIocm9vdCwgJ3NvbGlkJyk7XHJcbiAgICAgICAgaW5zdGFuY2UuZXZlbnRzLnRyaWdnZXIoJ3BhbmUucmVzaXplJywgcm9vdCk7XHJcbiAgICB9LCBbJ3BhbmUtdHlwZXMnLCAnc3VyZmFjZS1yZW5kZXInXSk7XHJcblxyXG4gICAgZnVuY3Rpb24gdXBkYXRlQ2FudmFzU2l6ZSAocGFuZSkge1xyXG4gICAgICAgIHZhciBjYW52YXMgPSBwYW5lLnF1ZXJ5U2VsZWN0b3IoJ2NhbnZhcycpO1xyXG4gICAgICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgICAgdmFyIHdpZHRoID0gcGFuZS53aWR0aCgpLCBoZWlnaHQgPSBwYW5lLmhlaWdodCgpO1xyXG4gICAgICAgIHBhbmUuZGF0YSgnYnVmZmVyJywgbmV3IFVpbnQ4QXJyYXkod2lkdGggKiBoZWlnaHQgKiA0KSk7XHJcbiAgICAgICAgcGFuZS5kYXRhKCdpbWdEYXRhJywgY29udGV4dC5jcmVhdGVJbWFnZURhdGEod2lkdGgsIGhlaWdodCkpO1xyXG5cclxuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xyXG5cclxuICAgICAgICB2YXIgZGF0YSA9IHBhbmUuZGF0YSgnc3VyZmFjZScpO1xyXG4gICAgICAgIG1hdDQucGVyc3BlY3RpdmUoZGF0YS5wcm9qLCAtNDUgKiBERUcyUkFELCB3aWR0aCAvIGhlaWdodCwgMC4xLCAxMDAwKTtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUucGx1Z2lucy5hZGQoJ3JlbmRlci1zb2xpZCcsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIHZhciBzaGFkZXIgPSBuZXcgU2hhZGVyKFxyXG4gICAgICAgICAgICAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0OycgK1xyXG4gICAgICAgICAgICAnYXR0cmlidXRlIHZlYzMgYV92ZXJ0ZXg7JyArXHJcbiAgICAgICAgICAgICdhdHRyaWJ1dGUgdmVjMyBhX25vcm1hbDsnICtcclxuICAgICAgICAgICAgJ3ZhcnlpbmcgdmVjMyB2X25vcm1hbDsnICtcclxuICAgICAgICAgICAgJ3VuaWZvcm0gbWF0NCB1X212cDsnICtcclxuICAgICAgICAgICAgJ3VuaWZvcm0gbWF0NCB1X21vZGVsOycgK1xyXG4gICAgICAgICAgICAndm9pZCBtYWluKCkgeycgK1xyXG4gICAgICAgICAgICAnICAgIHZfbm9ybWFsID0gKHVfbW9kZWwgKiB2ZWM0KGFfbm9ybWFsLDAuMCkpLnh5ejsnICtcclxuICAgICAgICAgICAgJyAgICBnbF9Qb3NpdGlvbiA9IHVfbXZwICogdmVjNChhX3ZlcnRleCwxLjApOycgK1xyXG4gICAgICAgICAgICAnfScsXHJcbiAgICAgICAgICAgICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7JyArXHJcbiAgICAgICAgICAgICd2YXJ5aW5nIHZlYzMgdl9ub3JtYWw7JyArXHJcbiAgICAgICAgICAgICd1bmlmb3JtIHZlYzMgdV9saWdodHZlY3RvcjsnICtcclxuICAgICAgICAgICAgJ3VuaWZvcm0gdmVjNCB1X2NvbG9yOycgK1xyXG4gICAgICAgICAgICAndm9pZCBtYWluKCkgeycgK1xyXG4gICAgICAgICAgICAnICB2ZWMzIE4gPSBub3JtYWxpemUodl9ub3JtYWwpOycgK1xyXG4gICAgICAgICAgICAnICBnbF9GcmFnQ29sb3IgPSB1X2NvbG9yICogbWF4KDAuMCwgZG90KHVfbGlnaHR2ZWN0b3IsTikpOycgK1xyXG4gICAgICAgICAgICAnfSdcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB2YXIgdGVtcCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAgICAgICAgdmFyIG12cCA9IG1hdDQuY3JlYXRlKCk7XHJcblxyXG4gICAgICAgIHZhciB1bmlmb3JtcyA9IHtcclxuICAgICAgICAgICAgdV9jb2xvcjogWzEsIDEsIDEsIDFdLFxyXG4gICAgICAgICAgICB1X2xpZ2h0dmVjdG9yOiB2ZWMzLm5vcm1hbGl6ZSh2ZWMzLmNyZWF0ZSgpLCBbMSwgMiwgM10pLFxyXG4gICAgICAgICAgICB1X21vZGVsOiBudWxsLFxyXG4gICAgICAgICAgICB1X212cDogbXZwXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UuZ3JhcGhpY3MucmVuZGVycy5hZGQoJ3NvbGlkJywgZnVuY3Rpb24gKHN1cmZhY2UpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBpbnN0YW5jZS5zY2VuZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IGluc3RhbmNlLnNjZW5lW25hbWVdO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9iaikge1xyXG4gICAgICAgIFx0XHRcdG1hdDQubXVsdGlwbHkodGVtcCwgc3VyZmFjZS52aWV3LCBvYmoubW9kZWwpO1xyXG4gICAgICAgIFx0XHRcdG1hdDQubXVsdGlwbHkobXZwLCBzdXJmYWNlLnByb2osIHRlbXApO1xyXG5cclxuICAgICAgICBcdFx0XHR1bmlmb3Jtcy51X21vZGVsID0gb2JqLm1vZGVsO1xyXG4gICAgICAgIFx0XHRcdHNoYWRlci51bmlmb3Jtcyh1bmlmb3JtcykuZHJhdyhvYmoubWVzaCwgb2JqLnByaW1pdGl2ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0NC5yb3RhdGVZKHN1cmZhY2Uudmlldywgc3VyZmFjZS52aWV3LCAwLjAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICB9LCBbJ2dyYXBoaWNzLXJlbmRlciddKTtcclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUucGx1Z2lucy5hZGQoJ3N1cmZhY2UtcmVuZGVyJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UucGFuZS5zZXRSZW5kZXIgPSBmdW5jdGlvbiAocGFuZSwgbmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgcmVuZGVycyA9IGluc3RhbmNlLmdyYXBoaWNzLnJlbmRlcnM7XHJcbiAgICAgICAgICAgIGlmIChyZW5kZXJzLmhhcyhuYW1lKSlcclxuICAgICAgICAgICAgICAgIHBhbmUuYXR0ckRhdGEoJ3N1cmZhY2UtcmVuZGVyJywgbmFtZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UucGFuZS5nZXRSZW5kZXIgPSBmdW5jdGlvbiAocGFuZSkge1xyXG4gICAgICAgICAgICB2YXIgcmVuZGVycyA9IGluc3RhbmNlLmdyYXBoaWNzLnJlbmRlcnM7XHJcbiAgICAgICAgICAgIHZhciBuYW1lID0gcGFuZS5hdHRyRGF0YSgnc3VyZmFjZS1yZW5kZXInKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcnMuZ2V0KG5hbWUpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmV2ZW50cy5vbigncGFuZS5zcGxpdCcsIGZ1bmN0aW9uIChvbGRQYW5lLCBuZXdQYW5lKSB7XHJcbiAgICAgICAgICAgIG5ld1BhbmUuYXR0ckRhdGEoJ3N1cmZhY2UtcmVuZGVyJywgb2xkUGFuZS5hdHRyRGF0YSgnc3VyZmFjZS1yZW5kZXInKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBbJ2dyYXBoaWNzLXJlbmRlciddKTtcclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUucGx1Z2lucy5hZGQoJ2dyYXBoaWNzLXJlbmRlcicsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGluc3RhbmNlLmdyYXBoaWNzLnJlbmRlcnMgPSB7XHJcbiAgICAgICAgICAgIGFsbDoge30sXHJcbiAgICAgICAgICAgIGFkZDogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFsbFtuYW1lXSA9IGNhbGxiYWNrO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hbGxbbmFtZV07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFsbFtuYW1lXTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaGFzOiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5hbGxbbmFtZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSwgWydncmFwaGljcyddKTtcclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBHcmFwaGljcyA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgICAgICB0aGlzLmdsID0gR0wuY3JlYXRlKHtcclxuICAgICAgICAgICAgaGVpZ2h0OiBzY3JlZW4uaGVpZ2h0LFxyXG4gICAgICAgICAgICB3aWR0aDogc2NyZWVuLndpZHRoXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5nbC5hbmltYXRlKCk7XHJcbiAgICAgICAgdGhpcy5nbC5vbmRyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZW5kZXJUYXJnZXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnY2FudmFzJyk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVuZGVyVGFyZ2V0cy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgIGRyYXdSZW5kZXJUYXJnZXQoaW5zdGFuY2UsIHJlbmRlclRhcmdldHNbaV0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5nbC5jbGVhckNvbG9yKDAuNCwgMC40LCAwLjQsIDEpO1xyXG4gICAgICAgIHRoaXMuZ2wuZW5hYmxlKHRoaXMuZ2wuREVQVEhfVEVTVCk7XHJcbiAgICB9O1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUucGx1Z2lucy5hZGQoJ2dyYXBoaWNzJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UuZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3MoaW5zdGFuY2UpO1xyXG4gICAgICAgIGluc3RhbmNlLnNjZW5lLmN1YmUgPSB7XHJcbiAgICAgICAgICAgIHByaW1pdGl2ZTogaW5zdGFuY2UuZ3JhcGhpY3MuZ2wuVFJJQU5HTEVTLFxyXG4gICAgICAgICAgICBtb2RlbDogbWF0NC5jcmVhdGUoKSxcclxuICAgICAgICAgICAgbWVzaDogR0wuTWVzaC5jdWJlKCksXHJcbiAgICAgICAgfTtcclxuICAgIH0sIFsnc2NlbmUnXSk7XHJcblxyXG4gICAgZnVuY3Rpb24gZHJhd1JlbmRlclRhcmdldCAoaW5zdGFuY2UsIGNhbnZhcykge1xyXG4gICAgICAgIHZhciBwYW5lID0gY2FudmFzLnBhcmVudCgnLnBhbmUnKTtcclxuICAgICAgICB2YXIgaW1hZ2VEYXRhID0gcGFuZS5kYXRhKCdpbWdEYXRhJyk7XHJcbiAgICAgICAgdmFyIHN1cmZhY2UgPSBwYW5lLmRhdGEoJ3N1cmZhY2UnKTtcclxuICAgICAgICB2YXIgYnVmZmVyID0gcGFuZS5kYXRhKCdidWZmZXInKTtcclxuICAgICAgICB2YXIgZ2wgPSBpbnN0YW5jZS5ncmFwaGljcy5nbDtcclxuXHJcbiAgICAgICAgdmFyIHdpZHRoICA9IGNhbnZhcy5jbGllbnRXaWR0aCwgaGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodDtcclxuICAgICAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUIHwgZ2wuREVQVEhfQlVGRkVSX0JJVCk7XHJcbiAgICAgICAgZ2wudmlld3BvcnQoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcblxyXG4gICAgICAgIHZhciByZW5kZXIgPSBpbnN0YW5jZS5wYW5lLmdldFJlbmRlcihwYW5lKTtcclxuICAgICAgICBpZiAocmVuZGVyKSByZW5kZXIoc3VyZmFjZSk7XHJcblxyXG4gICAgICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgICAgaWYgKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgZ2wucmVhZFBpeGVscygwLCAwLCB3aWR0aCwgaGVpZ2h0LCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBidWZmZXIpO1xyXG4gICAgICAgICAgICBpbWFnZURhdGEuZGF0YS5zZXQoYnVmZmVyKTtcclxuICAgICAgICAgICAgY29udGV4dC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCAwLCAwKTtcclxuICAgICAgICAgICAgY29udGV4dC50cmFuc2xhdGUoMTAwLCAxMDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUucGx1Z2lucy5hZGQoJ3NjZW5lJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2Uuc2NlbmUgPSB7fTtcclxuICAgIH0pO1xyXG59KSgpKTtcclxuIl19
