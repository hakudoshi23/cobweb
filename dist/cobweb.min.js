!function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}e(Array.prototype,"unique",function(){for(var e=this.concat(),t=0;t<e.length;++t)for(var n=t+1;n<e.length;++n)e[t]===e[n]&&e.splice(n--,1);return e}),e(Array.prototype,"forEach",function(e){for(var t=0;t<this.length;t++)e(this[t],t,this)})}(),function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}e(HTMLElement.prototype,"addClass",function(){var e,t;for(var n in arguments)e=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[],t=arguments[n]?arguments[n].trim().replace(/\s+/g," ").split(" "):[],this.className=e.concat(t).unique().join(" ")}),e(HTMLElement.prototype,"hasClass",function(){var e,t=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[];for(var n in arguments){e=arguments[n]?arguments[n].trim().replace(/\s+/g," ").split(" "):[];for(var a=0;a<e.length;a++){var r=e[a];if(t.indexOf(r)==-1)return!1}}return!0}),e(HTMLElement.prototype,"removeClass",function(){var e,t,n=0,a=function(t){n=e.indexOf(t),n!=-1&&e.splice(n,1)};for(var r in arguments)e=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[],t=arguments[r]?arguments[r].trim().replace(/\s+/g," ").split(" "):[],t.forEach(a),this.className=e.unique().join(" ")}),e(HTMLElement.prototype,"data",function(e,t){window.__data_cache||(window.__data_cache=new WeakMap);var n=window.__data_cache.get(this)||{};return t?(n[e]=t,window.__data_cache.set(this,n),this):e?n&&n[e]:n}),e(HTMLElement.prototype,"setData",function(e){return window.__data_cache||(window.__data_cache=new WeakMap),window.__data_cache.set(this,e),this}),e(HTMLElement.prototype,"attr",function(e,t){if(void 0!==t)this.setAttribute(e,t);else{if(null!==t)return this.getAttribute(e);this.removeAttribute(e)}return this}),e(HTMLElement.prototype,"attrData",function(e,t){return this.attr("data-"+e,t)}),e(Element.prototype,"matches",Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(e){for(var t=(this.document||this.ownerDocument).querySelectorAll(e),n=t.length;--n>=0&&t.item(n)!==this;);return n>-1}),e(HTMLElement.prototype,"parent",function(e){if(!e)return this.parentElement;for(var t=this.parentElement;!t.matches(e);)t=t.parentElement;return t}),e(HTMLElement.prototype,"height",function(){if(1!=arguments.length)return this.getBoundingClientRect().height;var e=arguments[0];"number"==typeof e?this.style.height=e+"px":this.style.height=e}),e(HTMLElement.prototype,"width",function(){if(1!=arguments.length)return this.getBoundingClientRect().width;var e=arguments[0];"number"==typeof e?this.style.width=e+"px":this.style.width=e})}(),function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}e(Object,"keys",function(){return function(e){if("object"!=typeof e&&("function"!=typeof e||null===e))throw new TypeError("Object.keys called on non-object");var t,n=[];for(t in e)e.hasOwnProperty(t)&&n.push(t);return n}}()),e(Object,"clone",function(e){var t={};for(var n in e)if(e.hasOwnProperty(n)){var a=e[n];"object"==typeof a?t[n]=Object.clone(e[n]):t[n]=e[n]}return t})}(),function(){"use strict";var e=function(e){this.instance=e,this.listeners={}};e.prototype.trigger=function(){var e=arguments[0],t=this.listeners[e]||[];Array.prototype.splice.call(arguments,0,1);for(var n=0;n<t.length;n++)t[n].apply(null,arguments);this.instance.logger.debug("Event triggered: "+e),arguments.length>0&&this.instance.logger.debug(arguments)},e.prototype.on=function(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t)},e.prototype.off=function(e){delete this.listeners[e]},e.prototype.off=function(e,t){if(this.listeners[e]){var n=this.listeners[e];n.indexOf(t)>-1&&n.splice(index,1)}},window.EventHandler=e}(),function(){"use strict";var e=function(t){this.handlers=[],this.addHandler(this.level.ALL,function(t,n){e.prototype.level.DEBUG===t?console.debug(n):e.prototype.level.INFO===t?console.info(n):e.prototype.level.WARNING===t?console.warn(n):e.prototype.level.ERROR===t&&console.error(n)})};e.prototype.level={ALL:0,DEBUG:1,INFO:2,WARNING:3,ERROR:4,NONE:5},e.prototype.debug=function(t){this.log(e.prototype.level.DEBUG,t)},e.prototype.info=function(t){this.log(e.prototype.level.INFO,t)},e.prototype.warning=function(t){this.log(e.prototype.level.WARNING,t)},e.prototype.error=function(t){this.log(e.prototype.level.ERROR,t)},e.prototype.log=function(e,t){for(var n=e,a=this.handlers[n]||[];n>=0;)a.forEach(function(n){n(e,t)}),a=this.handlers[--n]||[]},e.prototype.addHandler=function(e,t){this.handlers[e]||(this.handlers[e]=[]),this.handlers[e].push(t)},e.prototype.removeHandler=function(e,t){var n=this.handlers[e];if(n){var a=n.indexOf(t);a>-1&&n.splice(a,1)}},window.Logger=e}(),function(){"use strict";var e={container:{selector:"#cobweb",className:"cb-container"}},t=function(n){if(this.options=e,this.extendOptions(this.options,n||{}),this.container=document.querySelector(this.options.container.selector),!this.container)throw new Error("Invalid container selector: '"+this.options.container.selector+"'");this.container.addClass(this.options.container.className),this.container.data("instance",this),this.logger=new Logger(this),this.events=new EventHandler(this),t.prototype.plugins.load(this)};t.prototype.extendOptions=function(e,t){for(var n in t)if(t.hasOwnProperty(n)){var a=t[n];"object"==typeof a?this.extendOptions(e[n],t[n]):e[n]=t[n]}},window.Cobweb=t}(),function(){"use strict";function e(e){for(var t in e){var n=e[t];if(n.dependant||(n.dependant=[]),n.dependencies.length>0)for(var a=0;a<n.dependencies.length;a++){var r=e[n.dependencies[a]];r.dependant||(r.dependant=[]),r.dependant.push(t)}}}function t(e,t){var a=[],r=[];for(var o in t)0===t[o].dependencies.length&&a.push(o);for(;a.length>0;){var i=a[0];if(a.splice(0,1),t[i]){var s=t[i];r.push(i);for(var p=0;p<s.dependant.length;p++){var c=s.dependant[p];n(r,t[c])&&a.push(c)}}else e.events.trigger("plugins.error.missing",i),e.logger.warning("Missing plugin '"+i+"'")}return Object.keys(t).length!==r.length&&(e.events.trigger("plugins.error.cycle"),e.logger.error("Dependency cycle found in plugins")),r}function n(e,t){for(var n=0;n<t.dependencies.length;n++)if(e.indexOf(t.dependencies[n])===-1)return!1;return!0}var a=function(){this.available={}};a.prototype.add=function(e,t,n){if(n=n||[],"string"!=typeof e)throw new Error("Parameter 1: expected string, found "+typeof e);if(!Array.isArray(n))throw new Error("Parameter 2: expected array, found "+typeof n);if("function"!=typeof t)throw new Error("Parameter 3: expected function, found "+typeof t);this.available[e]={dependencies:n,init:t}},a.prototype.load=function(n){n.plugins={},e(this.available);for(var a=t(n,this.available),r=0;r<a.length;r++){var o=a[r];this.available[o].init(n),n.events.trigger("plugins.loaded",o)}n.events.trigger("plugins.loaded.all",a)},Cobweb.prototype.plugins=new a}(),function(){"use strict";function e(e,t){var n=t.data("graphics-framebuffer"),a=t.parent(".pane").data("surface"),r=e.graphics.gl;r.bindFramebuffer(r.FRAMEBUFFER,n),r.clearColor(.4,.4,.4,1),r.enable(r.DEPTH_TEST);var o=new Shader("precision highp float;attribute vec3 a_vertex;attribute vec3 a_normal;varying vec3 v_normal;uniform mat4 u_mvp;uniform mat4 u_model;void main() {    v_normal = (u_model * vec4(a_normal,0.0)).xyz;    gl_Position = u_mvp * vec4(a_vertex,1.0);}","precision highp float;varying vec3 v_normal;uniform vec3 u_lightvector;uniform vec4 u_color;void main() {  vec3 N = normalize(v_normal);  gl_FragColor = u_color * max(0.0, dot(u_lightvector,N));}"),i=a.proj,s=a.view,p=mat4.create(),c=mat4.create(),l={u_color:[1,1,1,1],u_lightvector:vec3.normalize(vec3.create(),[1,1,1]),u_model:null,u_mvp:c};r.clear(r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT);for(var u in e.scene){var h=e.scene[u];h&&(mat4.multiply(p,s,h.model),mat4.multiply(c,i,p),l.u_model=h.model,o.uniforms(l).draw(h.mesh,h.primitive),mat4.rotateY(s,s,.01))}var d=1024,f=1024,g=new Uint8Array(d*f*4);r.readPixels(0,0,d,f,r.RGBA,r.UNSIGNED_BYTE,g);var v=t.getContext("2d");if(v){var y=v.createImageData(d,f);y.data.set(g),v.putImageData(y,0,0),v.translate(100,100)}}var t=function(t){this.instance=t,this.gl=GL.create({height:1024,width:1024}),this.gl.animate(),this.gl.ondraw=function(){var n=document.querySelectorAll("canvas");n.forEach(function(n){e(t,n)})}};t.prototype.addTarget=function(e){var t=this.gl,n=t.createRenderbuffer();t.bindRenderbuffer(t.RENDERBUFFER,n),t.renderbufferStorage(t.RENDERBUFFER,t.DEPTH_COMPONENT16,1024,1024);var a=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,a),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.RENDERBUFFER,n);var r=t.checkFramebufferStatus(t.FRAMEBUFFER);if(r!==t.FRAMEBUFFER_COMPLETE){switch(r){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:console.log("Framebuffer status error: FRAMEBUFFER_INCOMPLETE_ATTACHMENT");break;case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:console.log("Framebuffer status error: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");break;case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:console.log("Framebuffer status error: FRAMEBUFFER_INCOMPLETE_DIMENSIONS");break;case t.FRAMEBUFFER_UNSUPPORTED:console.log("Framebuffer status error: FRAMEBUFFER_UNSUPPORTED")}console.log()}else e.data("graphics-framebuffer",a)},Cobweb.prototype.plugins.add("graphics",function(e){e.graphics=new t(e),e.scene.cube={primitive:e.graphics.gl.TRIANGLES,model:mat4.create(),mesh:GL.Mesh.cube()}},["scene"])}(),function(){"use strict";Cobweb.prototype.plugins.add("pane-types",function(e){var t={availables:{},defaultType:null,add:function(e,t){this.availables[e]=t,this.defaultType||(this.defaultType=e)},remove:function(e){delete this.availables[e],this.defaultType===e&&(this.defaultType=Object.keys(this.availables)[0])},setType:function(t,n){var a=this.availables[n];a(t,e),t.attrData("pane-type",n)}};t.add("default",function(e,t){t.logger.debug("Default pane type (this does nothing)")});var n=document.querySelector(".cb-container .pane"),a=t.defaultType;a&&t.setType(n,a),e.events.on("pane.split",function(e,n){var a=e.attrData("pane-type");a&&t.setType(n,a)}),e.pane.types=t},["pane"])}(),function(){"use strict";function e(){var e=document.createElement("DIV");e.addClass("pane"),e.addEventListener("mouseover",r);var t=document.createElement("DIV");return t.addClass("pane-anchor"),t.addEventListener("mousedown",o),e.append(t),e}function t(e,t,n){var a=document.createElement("DIV"),r=e.parent(".pane-group");a[r.data("styleProperty")](n),a.addEventListener("mousedown",i),a.addClass("pane-separator"),a.data("pane1",e),a.data("pane2",t);var o="width"===r.data("styleProperty")?"ew":"ns";return a.style.cursor=o+"-resize",r.insertBefore(a,t),a}function n(e,t){var n=e.parent();if(n.hasClass(t))return n;var a=document.createElement("DIV");e.nextSibling&&e.nextSibling.data("pane1",a),e.previousSibling&&e.previousSibling.data("pane2",a),a.addClass("pane-group",t);var r="pane-group-h"===t?"width":"height";return a.setData(Object.clone(e.data())),a.style.cssText=e.style.cssText,a.data("styleProperty",r),e.attr("style",null),n.insertBefore(a,e),n.removeChild(e),a.append(e),a}function a(e,t){var n,a,r=0,o=e.querySelectorAll(":scope > .pane-separator"),i=e.querySelectorAll(":scope > .pane, :scope > .pane-group"),s=0;0!==o.length&&(s=o[0][t]()*o.length/i.length);for(var p=0;p<i.length;p++)n=i[p].data("perc-"+t),r+=n,a=n+"%",i[p].style[t]="calc("+a+" - "+s+"px)";r<100&&(n=i[i.length-1].data("perc-"+t),a=n+(100-r)+"%",i[i.length-1].style[t]="calc("+a+" - "+s+"px)")}function r(e){var t=e.target.hasClass("pane")?e.target:e.target.parent(".pane"),n=t.parent(".cb-container"),a=n.data("instance");a.pane.anchor||(a.pane.current=t)}function o(e){var t=e.target.parent(".cb-container"),n=t.data("instance");n.pane.anchor=e.target}function i(e){var t=e.target.parent(".cb-container"),n=t.data("instance");n.pane.separator=e.target,n.pane.separator.data("startX",e.pageX),n.pane.separator.data("startY",e.pageY)}function s(e){var t=document.querySelector(".cb-container"),n=t.data("instance");if(n.pane.anchor){var a=n.pane.anchor.getBoundingClientRect(),r=[a.left+a.width/2,a.top+a.height/2];r[0]-e.pageX>u?n.pane.anchor.style.backgroundColor="#000000":r[0]-e.pageX<-u?n.pane.anchor.style.backgroundColor="#FF0000":r[1]-e.pageY>u?n.pane.anchor.style.backgroundColor="#00FF00":r[1]-e.pageY<-u?n.pane.anchor.style.backgroundColor="#0000FF":n.pane.anchor.style.backgroundColor=""}if(n.pane.separator){var o=n.pane.separator,i=o.parent(),s=i.data("styleProperty"),p=i.querySelectorAll(":scope > .pane, :scope > .pane-group"),c=i.querySelectorAll(":scope > .pane-separator"),l=o.data("pane1"),h=o.data("pane2"),d=0,f=c[0][s]()*c.length/p.length+"px";if(d="height"===s?e.pageY-o.data("startY"):e.pageX-o.data("startX"),d>0&&h[s]()>100||d<0&&l[s]()>100){var g=100*d/i[s](),v=l.data("perc-"+s)+g,y=h.data("perc-"+s)-g;l.style[s]="calc("+v+"% - "+f+")",h.style[s]="calc("+y+"% - "+f+")",l.data("perc-"+s,v),h.data("perc-"+s,y),o.data("startX",e.pageX),o.data("startY",e.pageY)}}}function p(e){var t=document.querySelector(".cb-container"),n=t.data("instance");if(n.pane.anchor){n.pane.anchor.style.backgroundColor="";var a=n.pane.anchor.getBoundingClientRect(),r=[a.left+a.width/2,a.top+a.height/2];r[0]-e.pageX>u?n.pane.splitPane(n.pane.current,"h"):r[0]-e.pageX<-u?n.pane.mergePane(n.pane.current,"h"):r[1]-e.pageY>u?n.pane.mergePane(n.pane.current,"v"):r[1]-e.pageY<-u?n.pane.splitPane(n.pane.current,"v"):n.pane.anchor.style.backgroundColor="",n.pane.anchor=null}n.pane.separator&&(n.pane.separator=null)}var c={minSize:50,separator:{size:5}},l=function(t){this.instance=t,this.options=c,t.extendOptions(this.options,t.options.pane||{});var n=e();n.data("perc-height",100),n.data("perc-width",100),n.style.height="100%",n.style.width="100%",t.container.append(n),this.separator=null,this.anchor=null,this.current=null,document.addEventListener("mousemove",s),document.addEventListener("mouseup",p),t.events.on("pane.select",function(e){t.pane.current=e})};l.prototype.splitPane=function(r,o){var i="h"===o?"width":"height",s="h"===o?"height":"width";if(r[i]()>this.options.minSize){var p=n(r,"pane-group-"+o),c=e();r.nextSibling&&r.nextSibling.data("pane1",c),c.setData(Object.clone(p.data()));var l=r.data("perc-"+i);c.data("perc-"+i,l/2),r.data("perc-"+i,l/2),c.data("perc-"+s,100),r.data("perc-"+s,100),p.insertBefore(c,r.nextSibling),t(r,c,this.options.separator.size),a(p,i),this.instance.events.trigger("pane.split",r,c)}},l.prototype.mergePane=function(e,t){var n=0,r=e.parent(".pane-group");if("h"===t&&r.hasClass("pane-group-h")||"v"===t&&r.hasClass("pane-group-v")){var o="h"===t?"nextSibling":"previousSibling",i="h"===t?"width":"height";if(e[o]){var s=e[o][o];n=s.data("perc-"+i),this.instance.events.trigger("pane.merge",e,s),r.removeChild(e[o]),r.removeChild(e[o]),e[o]&&e[o].data("pane1",e);var p=r.children.length,c=e.data("perc-"+i)+n;e.data("perc-"+i,1===p?100:c),a(r,i)}}},Cobweb.prototype.plugins.add("pane",function(e){e.pane=new l(e)});var u=30}(),function(){"use strict";Cobweb.prototype.plugins.add("scene",function(e){e.scene={}})}(),function(){"use strict";Cobweb.prototype.plugins.add("surface",function(e){e.pane.types.add("surface",function(e,t){var n=document.createElement("canvas");n.style.height="100%",n.style.width="100%",n.height=1024,n.width=1024;var a={proj:mat4.create(),view:mat4.create()};mat4.perspective(a.proj,-45*DEG2RAD,n.width/n.height,.1,1e3),mat4.lookAt(a.view,[0,1,5],[0,0,0],[0,1,0]),e.data("surface",a),e.append(n),t.graphics.addTarget(n)});var t=document.querySelector(".pane");e.pane.types.setType(t,"surface")},["pane-types","graphics"])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
