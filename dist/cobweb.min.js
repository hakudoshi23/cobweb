!function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}e(Array.prototype,"unique",function(){for(var e=this.concat(),t=0;t<e.length;++t)for(var n=t+1;n<e.length;++n)e[t]===e[n]&&e.splice(n--,1);return e}),e(Array.prototype,"forEach",function(e){for(var t=0;t<this.length;t++)e(this[t],t,this)})}(),function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}function t(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}e(HTMLElement.prototype,"addClass",function(){var e,t;for(var n in arguments)e=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[],t=arguments[n]?arguments[n].trim().replace(/\s+/g," ").split(" "):[],this.className=e.concat(t).unique().join(" ")}),e(HTMLElement.prototype,"hasClass",function(){var e,t=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[];for(var n in arguments){e=arguments[n]?arguments[n].trim().replace(/\s+/g," ").split(" "):[];for(var r=0;r<e.length;r++){var o=e[r];if(t.indexOf(o)==-1)return!1}}return!0}),e(HTMLElement.prototype,"removeClass",function(){var e,t,n=0,r=function(t){n=e.indexOf(t),n!=-1&&e.splice(n,1)};for(var o in arguments)e=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[],t=arguments[o]?arguments[o].trim().replace(/\s+/g," ").split(" "):[],t.forEach(r),this.className=e.unique().join(" ")}),e(HTMLElement.prototype,"data",function(e,t){window.__data_cache||(window.__data_cache=new WeakMap);var n=window.__data_cache.get(this)||{};return void 0===t?e?n&&n[e]:n:(n[e]=t,window.__data_cache.set(this,n),this)}),e(HTMLElement.prototype,"setData",function(e){return window.__data_cache||(window.__data_cache=new WeakMap),window.__data_cache.set(this,e),this}),e(HTMLElement.prototype,"attr",function(e,t){if(void 0!==t)this.setAttribute(e,t);else{if(null!==t)return this.getAttribute(e);this.removeAttribute(e)}return this}),e(HTMLElement.prototype,"attrData",function(e,t){return this.attr("data-"+e,t)}),e(Element.prototype,"matches",Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(e){for(var t=(this.document||this.ownerDocument).querySelectorAll(e),n=t.length;--n>=0&&t.item(n)!==this;);return n>-1}),e(HTMLElement.prototype,"parent",function(e){if(!e)return this.parentElement;for(var t=this.parentElement;!t.matches(e);)t=t.parentElement;return t}),e(HTMLElement.prototype,"height",function(){if(1!=arguments.length)return this.clientHeight;var e=arguments[0];"number"==typeof e?this.style.height=e+"px":this.style.height=e}),e(HTMLElement.prototype,"width",function(){if(1!=arguments.length)return this.clientWidth;var e=arguments[0];"number"==typeof e?this.style.width=e+"px":this.style.width=e}),e(window,"guid",function(){return"GUID-"+t()+"-"+t()+"-"+t()}),e(HTMLElement.prototype,"guid",function(){var e=null,t=null;do e=window.guid(),t=document.querySelector("#"+e);while(t);return this.attr("id",e),e})}(),function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}window.extend=function(e,t){for(var n in t)if(n&&t.hasOwnProperty(n)){var r=t[n];"object"==typeof r?extend(e[n],t[n]):e[n]=t[n]}},e(Object,"clone",function(e){var t={};for(var n in e)if(e.hasOwnProperty(n)){var r=e[n];"object"==typeof r?t[n]=Object.clone(e[n]):t[n]=e[n]}return t})}(),function(){"use strict";var e=function(e,t){this.data=t||{},this.parent=e,this.children=[]};window.TreeNode=e,e.prototype.isRoot=function(){return!this.parent},e.prototype.add=function(e){var t=new this.constructor(this,e);return this.children.push(t),t},e.prototype.remove=function(e){return this.children.slice(e,1),this},e.prototype.dfs=function(e){for(var t=[],n=0;n<this.children.length;n++)(!e||e&&e(this.children[n]))&&t.push(this.children[n]),t.concat(this.children[n].dfs(e));return t},e.prototype.bfs=function(e){var t,n=[];for(t=0;t<this.children.length;t++)(!e||e&&e(this.children[t]))&&n.push(this.children[t]);for(t=0;t<this.children.length;t++)n.concat(this.children[t].bfs(e));return n},e.extend=function(t){var n=function(t,n){e.call(this,t,n)};return n.prototype=Object.create(e.prototype),n.prototype.constructor=n,extend(n.prototype,t),new n(null)}}(),function(){"use strict";var e=function(e){this.instance=e,this.listeners={}};e.prototype.trigger=function(){var e=arguments[0],t=this.listeners[e]||[];Array.prototype.splice.call(arguments,0,1),this.instance.logger.debug(e,arguments);for(var n=0;n<t.length;n++)t[n].apply(null,arguments)},e.prototype.on=function(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t)},e.prototype.off=function(e){delete this.listeners[e]},e.prototype.off=function(e,t){if(this.listeners[e]){var n=this.listeners[e];n.indexOf(t)>-1&&n.splice(index,1)}},window.EventHandler=e}(),function(){"use strict";var e=function(){},t=function(t,n){this.debug=n?console.debug.bind():e,this.info=n?console.info.bind():e,this.warn=console.warn.bind(),this.error=console.error.bind()};window.Logger=t}(),function(){"use strict";var e={container:{selector:"#cobweb",className:"cb-container"}},t=function(n){if(this.options=e,extend(this.options,n||{}),this.container=document.querySelector(this.options.container.selector),!this.container)throw new Error("Invalid container selector: '"+this.options.container.selector+"'");this.container.addClass(this.options.container.className),this.container.data("instance",this),this.logger=new Logger(this,!0),this.events=new EventHandler(this),t.prototype.modules.load(this),this.events.trigger("app.loaded")};window.Cobweb=t}(),function(){"use strict";function e(e){for(var t in e){var n=e[t];if(n.dependant||(n.dependant=[]),n.dependencies.length>0)for(var r=0;r<n.dependencies.length;r++){var o=e[n.dependencies[r]];o.dependant||(o.dependant=[]),o.dependant.push(t)}}}function t(e,t){var r=[],o=[];for(var i in t)0===t[i].dependencies.length&&r.push(i);for(;r.length>0;){var a=r[0];if(r.splice(0,1),t[a]){var s=t[a];o.push(a);for(var c=0;c<s.dependant.length;c++){var u=s.dependant[c];n(o,t[u])&&r.push(u)}}else e.events.trigger("modules.error.missing",a),e.logger.warning("Missing module '"+a+"'")}return Object.keys(t).length!==o.length&&(e.events.trigger("modules.error.cycle"),e.logger.error("Dependency cycle found in modules")),o}function n(e,t){for(var n=0;n<t.dependencies.length;n++)if(e.indexOf(t.dependencies[n])===-1)return!1;return!0}Cobweb.prototype.modules={all:{},add:function(e,t,n){n=n||[],this.all[e]={dependencies:n,init:t}},load:function(n){this.instance=n,e(this.all);for(var r=t(n,this.all),o=0;o<r.length;o++){var i=r[o];try{this.all[i].init(n),n.events.trigger("modules.loaded",i)}catch(e){n.logger.error("Loading module "+i,e),n.events.trigger("modules.error",i,e)}}n.events.trigger("modules.loaded.all",r)},print:function(e){if(e)for(var t in this.all){var n=this.all[t];e.logger.debug("Name: ",t),e.logger.debug("\tDependencies: ",n.dependencies),e.logger.debug("\tDependant: ",n.dependant)}else console.error('Error: "load" should be called before "print"')}}}(),function(){"use strict";function e(e,n){var r=t();e.append(r)}function t(){var e=document.createElement("div");return e.className="pane-header",e}Cobweb.prototype.modules.add("pane-header",function(t){t.events.on("pane.create",function(n){e(n,t)})},["pane-types"])}(),function(){"use strict";Cobweb.prototype.modules.add("pane-types",function(e){var t={all:{},add:function(e,t){this.all[e]=t},get:function(e){return this.all[e]},remove:function(e){delete this.all[e]},has:function(e){return!!this.all[e]}};e.events.on("pane.split",function(t,n){var r=t.attrData("pane-type");r&&e.pane.setType(n,r)}),e.pane.types=t,e.pane.setType=function(t,n){if(this.types.has(n)){var r=this.types.get(n);r.onPaneType(t,e);var o=t.querySelector(".pane-header");r.onCreateHeader(o,e),t.attrData("pane-type",n)}}},["pane"])}(),function(){"use strict";Cobweb.prototype.modules.add("pane",function(e){function t(t){e.events.trigger("pane.create",t)}function n(t,n){e.events.trigger("pane.split",t,n)}function r(t){e.events.trigger("pane.resize",t)}e.events.on("app.loaded",function(){e.pane.internal=new Pane({container:e.options.container.selector,separator:{size:3},callbacks:{onPaneCreate:t,onPaneSplit:n,onPaneResize:r}})}),e.pane={}})}(),function(){"use strict";Cobweb.prototype.modules.add("interaction-mode",function(e){e.surface.interaction={all:{},add:function(e,t){this.all[e]=t},get:function(e){return this.all[e]},remove:function(e){delete this.all[e]},has:function(e){return!!this.all[e]}}},["surface"])}(),function(){"use strict";function e(e,t){var r=document.createElement("canvas");r.className="surface",e.append(r);var o={proj:mat4.create(),view:mat4.create()};mat4.perspective(o.proj,-45*DEG2RAD,r.width/r.height,.1,1e3),mat4.lookAt(o.view,[0,2,4],[0,0,0],[0,1,0]),mat4.scale(o.view,o.view,[1,1.2,1]),e.data("surface",o),n(e),t.events.trigger("surface.create",r)}function t(e,t){var n=document.createElement("label");n.innerHTML="Surface Pane",e.appendChild(n)}function n(e){var t=e.querySelector("canvas"),n=t.getContext("2d"),r=e.querySelector(".pane-header"),o=r?r.height():0,i=e.width(),a=e.height()-o;e.data("buffer",new Uint8Array(i*a*4)),e.data("imgData",n.createImageData(i,a)),t.height=a,t.width=i;var s=e.data("surface");mat4.perspective(s.proj,-45*DEG2RAD,i/a,.1,1e3)}Cobweb.prototype.modules.add("surface",function(r){r.pane.types.add("surface",{onPaneType:e,onCreateHeader:t}),r.events.on("pane.resize",function(e){"surface"===e.attrData("pane-type")&&n(e)}),window.addEventListener("resize",function(e){for(var t=r.pane.container.querySelectorAll(".pane canvas"),o=0;o<t.length;o++)n(t[o].parentNode)}),r.events.on("pane.create",function(e){r.pane.setType(e,"surface")}),r.surface={}},["pane-types"])}(),function(){"use strict";Cobweb.prototype.modules.add("common-interaction",function(e){e.surface.interaction.add("common",{onMouseMove:function(e){return!0},onMouseDown:function(t){return e.logger.debug("COMMON - onMouseDown",t),!0},onMouseUp:function(t){return e.logger.debug("COMMON - onMouseUp",t),!0},onClick:function(t){return e.logger.debug("COMMON - onClick",t),!0}})},["surface-interaction"])}(),function(){"use strict";Cobweb.prototype.modules.add("object-interaction",function(e){e.surface.interaction.add("object",{onMouseMove:function(e){},onMouseDown:function(t){e.logger.debug("onMouseDown",t)},onMouseUp:function(t){e.logger.debug("onMouseUp",t)},onClick:function(t){e.logger.debug("onClick",t)}}),e.events.on("surface.create",function(t){e.surface.setInteraction(t,"object")})},["surface-interaction"])}(),function(){"use strict";function e(e,t){switch(t.type){case"mousemove":return e.onMouseMove(t);case"mousedown":return e.onMouseDown(t);case"mouseup":return e.onMouseUp(t);case"click":return e.onClick(t)}}Cobweb.prototype.modules.add("surface-interaction",function(t){function n(n){var r=t.surface.interaction.get("common"),o=e(r,n);if(o){var i=t.surface.getInteraction(n.target);e(i,n)}}t.surface.setInteraction=function(e,n){var r=t.surface.interaction;r.has(n)&&e.attrData("surface-interaction",n)},t.surface.getInteraction=function(e){var n=t.surface.interaction,r=e.attrData("surface-interaction");return n.get(r)},t.events.on("surface.create",function(e){e.onmousemove=n,e.onmousedown=n,e.onmouseup=n,e.onclick=n}),t.events.on("pane.split",function(e,t){t.attrData("surface-interaction",e.attrData("surface-interaction"))})},["interaction-mode","surface"])}(),function(){"use strict";Cobweb.prototype.modules.add("render-solid",function(e){var t=new Shader("precision highp float;attribute vec3 a_vertex;attribute vec3 a_normal;varying vec3 v_normal;uniform mat4 u_mvp;uniform mat4 u_model;void main() {    v_normal = (u_model * vec4(a_normal,0.0)).xyz;    gl_Position = u_mvp * vec4(a_vertex,1.0);}","precision highp float;varying vec3 v_normal;uniform vec3 u_lightvector;uniform vec4 u_color;void main() {  vec3 N = normalize(v_normal);  gl_FragColor = u_color * max(0.0, dot(u_lightvector,N));}"),n=mat4.create(),r=mat4.create(),o={u_color:[1,1,1,1],u_lightvector:vec3.normalize(vec3.create(),[1,2,3]),u_model:null,u_mvp:r};e.graphics.renders.add("solid",function(i){for(var a=e.scene.root.dfs(),s=0;s<a.length;s++){var c=a[s].data;mat4.multiply(n,i.view,c.model),mat4.multiply(r,i.proj,n),o.u_model=c.model,t.uniforms(o).draw(c.mesh,c.primitive)}}),e.events.on("surface.create",function(t){e.surface.setRender(t,"solid")})},["surface-render"])}(),function(){"use strict";Cobweb.prototype.modules.add("surface-render",function(e){e.surface.setRender=function(t,n){var r=e.graphics.renders;r.has(n)&&t.attrData("render",n)},e.surface.getRender=function(t){var n=e.graphics.renders,r=t.attrData("render");return n.get(r)};for(var t=document.querySelectorAll(".pane"),n=0;n<t.length;n++)if("surface"==t[n].dataset.paneType){var r=t[n].querySelector("canvas");r.dataset.render="solid"}e.events.on("pane.split",function(e,t){t.attrData("surface-render",e.attrData("surface-render"))})},["graphics-render","surface"])}(),function(){"use strict";Cobweb.prototype.modules.add("graphics-render",function(e){e.graphics.renders={all:{},add:function(e,t){this.all[e]=t},get:function(e){return this.all[e]},remove:function(e){delete this.all[e]},has:function(e){return!!this.all[e]}}},["graphics"])}(),function(){"use strict";function e(e,t){var n=t.parent(".pane"),r=n.data("imgData"),o=n.data("surface"),i=n.data("buffer"),a=e.graphics.gl,s=t.clientWidth,c=t.clientHeight;a.clear(a.COLOR_BUFFER_BIT|a.DEPTH_BUFFER_BIT),a.viewport(0,0,s,c);var u=e.surface.getRender(t);u&&u(o);var l=t.getContext("2d");l&&(a.readPixels(0,0,s,c,a.RGBA,a.UNSIGNED_BYTE,i),r.data.set(i),l.putImageData(r,0,0))}var t=function(t){this.instance=t,this.gl=GL.create({height:screen.height,width:screen.width}),this.gl.animate(),this.gl.ondraw=function(){for(var n=document.querySelectorAll("canvas"),r=0;r<n.length;r++)e(t,n[r])},this.gl.clearColor(.4,.4,.4,1),this.gl.enable(this.gl.DEPTH_TEST)};Cobweb.prototype.modules.add("graphics",function(e){e.graphics=new t(e)})}(),function(){"use strict";Cobweb.prototype.modules.add("scene",function(e){e.scene={root:TreeNode.extend({})};var t=mat4.create();mat4.rotateY(t,t,.8),e.scene.root.add({type:"object",primitive:e.graphics.gl.TRIANGLES,mesh:GL.Mesh.cube(),model:t})},["graphics"])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5LmpzIiwiaHRtbC5qcyIsIm9iai5qcyIsInRyZWUuanMiLCJldmVudHMuanMiLCJsb2dnZXIuanMiLCJjb2J3ZWIuanMiLCJtb2R1bGVzLmpzIiwicGFuZS9wYW5lLWhlYWRlci5qcyIsInBhbmUvcGFuZS10eXBlcy5qcyIsInBhbmUvcGFuZXMuanMiLCJwYW5lL3N1cmZhY2UvaW50ZXJhY3Rpb24tbW9kZXMuanMiLCJwYW5lL3N1cmZhY2Uvc3VyZmFjZS5qcyIsInBhbmUvc3VyZmFjZS9pbnRlcmFjdGlvbi9jb21tb24taW50ZXJhY3Rpb24uanMiLCJwYW5lL3N1cmZhY2UvaW50ZXJhY3Rpb24vb2JqZWN0LWludGVyYWN0aW9uLmpzIiwicGFuZS9zdXJmYWNlL2ludGVyYWN0aW9uL3N1cmZhY2UtaW50ZXJhY3Rpb24uanMiLCJwYW5lL3N1cmZhY2UvcmVuZGVyL3JlbmRlci1zb2xpZC5qcyIsInBhbmUvc3VyZmFjZS9yZW5kZXIvc3VyZmFjZS1yZW5kZXIuanMiLCJncmFwaGljLXJlbmRlci5qcyIsImdyYXBoaWMuanMiLCJzY2VuZS5qcyJdLCJuYW1lcyI6WyJzYWZlRXh0ZW5kIiwicHJvdG90eXBlIiwicHJvcGVydHkiLCJ2YWx1ZSIsIkFycmF5IiwiYSIsInRoaXMiLCJjb25jYXQiLCJpIiwibGVuZ3RoIiwiaiIsInNwbGljZSIsImNhbGxiYWNrIiwiczQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsIkhUTUxFbGVtZW50Iiwib2xkQ2xhc3NOYW1lcyIsIm5ld0NsYXNzTmFtZXMiLCJhcmd1bWVudHMiLCJjbGFzc05hbWUiLCJ0cmltIiwicmVwbGFjZSIsInNwbGl0IiwidW5pcXVlIiwiam9pbiIsInF1ZXJ5Q2xhc3NOYW1lcyIsImN1cnJlbnRDbGFzc05hbWVzIiwiaW5kZXgiLCJuYW1lIiwiaW5kZXhPZiIsInJlbW92ZUNsYXNzTmFtZXMiLCJyZW1vdmVFYWNoIiwiZm9yRWFjaCIsImF0dHIiLCJ3aW5kb3ciLCJfX2RhdGFfY2FjaGUiLCJXZWFrTWFwIiwiZWxBdHRycyIsImdldCIsInVuZGVmaW5lZCIsInNldCIsImRhdGEiLCJzZXRBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJFbGVtZW50IiwibWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwicyIsIm1hdGNoZXMiLCJkb2N1bWVudCIsIm93bmVyRG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaXRlbSIsInF1ZXJ5IiwicGFyZW50RWxlbWVudCIsImN1cnJlbnQiLCJjbGllbnRIZWlnaHQiLCJzdHlsZSIsImhlaWdodCIsImNsaWVudFdpZHRoIiwid2lkdGgiLCJndWlkIiwib3ZlcmxhcCIsInF1ZXJ5U2VsZWN0b3IiLCJleHRlbmQiLCJkZWZhdWx0cyIsInByb3BlcnRpZXMiLCJoYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsIm9iaiIsIm5ld09iaiIsImNsb25lIiwiVHJlZU5vZGUiLCJwYXJlbnQiLCJjaGlsZHJlbiIsImlzUm9vdCIsImFkZCIsImNoaWxkIiwiY29uc3RydWN0b3IiLCJwdXNoIiwicmVtb3ZlIiwic2xpY2UiLCJkZnMiLCJjaGVjayIsIm91dCIsImJmcyIsIl9UcmVlTm9kZSIsImNhbGwiLCJjcmVhdGUiLCJFdmVudEhhbmRsZXIiLCJpbnN0YW5jZSIsImxpc3RlbmVycyIsInRyaWdnZXIiLCJsb2dnZXIiLCJkZWJ1ZyIsImFwcGx5Iiwib24iLCJvZmYiLCJhcnJheSIsImVtcHR5RnVuY3Rpb24iLCJMb2dnZXIiLCJpc0RlYnVnIiwiY29uc29sZSIsImJpbmQiLCJpbmZvIiwid2FybiIsImVycm9yIiwiZGVmYXVsdE9wdGlvbnMiLCJjb250YWluZXIiLCJzZWxlY3RvciIsIkNvYndlYiIsIm9wdGlvbnMiLCJFcnJvciIsImFkZENsYXNzIiwiZXZlbnRzIiwibW9kdWxlcyIsImxvYWQiLCJhZGRSZXZlcnNlRGVwZW5kZW5jaWVzIiwibW9kdWxlIiwiZGVwZW5kYW50IiwiZGVwZW5kZW5jaWVzIiwiZGVwUGx1Z2luIiwidG9wb2xvZ2ljYWxTb3J0IiwiY2FuZGlkYXRlcyIsInNvcnRlZE5hbWVzIiwibmV4dE5hbWUiLCJkZXBOYW1lIiwiYWxsRGVwZW5kZW5jaWVzTWV0Iiwid2FybmluZyIsImtleXMiLCJsb2FkZWRVbnRpbE5vdyIsImFsbCIsImluaXQiLCJleCIsInByaW50Iiwib25DcmVhdGVDYWxsYmFjayIsInBhbmUiLCJoZWFkZXIiLCJjcmVhdGVIZWFkZXIiLCJhcHBlbmQiLCJkaXYiLCJjcmVhdGVFbGVtZW50IiwicGFuZVR5cGVzIiwiY2FsbGJhY2tzIiwiaGFzIiwib2xkUGFuZSIsIm5ld1BhbmUiLCJvbGRUeXBlIiwiYXR0ckRhdGEiLCJzZXRUeXBlIiwidHlwZXMiLCJ0eXBlQ2FsbGJhY2tzIiwib25QYW5lVHlwZSIsInBhbmVIZWFkZXIiLCJvbkNyZWF0ZUhlYWRlciIsIm9uUGFuZUNyZWF0ZSIsIm9uUGFuZVNwbGl0Iiwib3JpZ2luIiwib25QYW5lUmVzaXplIiwiaW50ZXJuYWwiLCJQYW5lIiwic2VwYXJhdG9yIiwic2l6ZSIsInN1cmZhY2UiLCJpbnRlcmFjdGlvbiIsIm9uU3VyZmFjZVBhbmVUeXBlIiwiY2FudmFzIiwicHJvaiIsIm1hdDQiLCJ2aWV3IiwicGVyc3BlY3RpdmUiLCJERUcyUkFEIiwibG9va0F0Iiwic2NhbGUiLCJ1cGRhdGVDYW52YXNTaXplIiwib25DcmVhdGVTdXJmYWNlSGVhZGVyIiwibGFiZWwiLCJpbm5lckhUTUwiLCJhcHBlbmRDaGlsZCIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwiaGVhZGVySGVpZ2h0IiwiVWludDhBcnJheSIsImNyZWF0ZUltYWdlRGF0YSIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInN1cmZhY2VzIiwicGFyZW50Tm9kZSIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZURvd24iLCJvbk1vdXNlVXAiLCJvbkNsaWNrIiwic2V0SW50ZXJhY3Rpb24iLCJydW5DYWxsYmFjayIsInR5cGUiLCJvblN1cmZhY2VFdmVudCIsImNvbW1vbiIsImtlZXBSdW5uaW5nIiwiZ2V0SW50ZXJhY3Rpb24iLCJ0YXJnZXQiLCJpbnRlcmFjdGlvbnMiLCJvbm1vdXNlbW92ZSIsIm9ubW91c2Vkb3duIiwib25tb3VzZXVwIiwib25jbGljayIsInNoYWRlciIsIlNoYWRlciIsInRlbXAiLCJtdnAiLCJ1bmlmb3JtcyIsInVfY29sb3IiLCJ1X2xpZ2h0dmVjdG9yIiwidmVjMyIsIm5vcm1hbGl6ZSIsInVfbW9kZWwiLCJ1X212cCIsImdyYXBoaWNzIiwicmVuZGVycyIsIm9ianMiLCJzY2VuZSIsInJvb3QiLCJtdWx0aXBseSIsIm1vZGVsIiwiZHJhdyIsIm1lc2giLCJwcmltaXRpdmUiLCJzZXRSZW5kZXIiLCJnZXRSZW5kZXIiLCJwYW5lcyIsImRhdGFzZXQiLCJwYW5lVHlwZSIsInJlbmRlciIsImRyYXdSZW5kZXJUYXJnZXQiLCJpbWFnZURhdGEiLCJidWZmZXIiLCJnbCIsImNsZWFyIiwiQ09MT1JfQlVGRkVSX0JJVCIsIkRFUFRIX0JVRkZFUl9CSVQiLCJ2aWV3cG9ydCIsInJlYWRQaXhlbHMiLCJSR0JBIiwiVU5TSUdORURfQllURSIsInB1dEltYWdlRGF0YSIsIkdyYXBoaWNzIiwiR0wiLCJzY3JlZW4iLCJhbmltYXRlIiwib25kcmF3IiwicmVuZGVyVGFyZ2V0cyIsImNsZWFyQ29sb3IiLCJlbmFibGUiLCJERVBUSF9URVNUIiwibWF0Iiwicm90YXRlWSIsIlRSSUFOR0xFUyIsIk1lc2giLCJjdWJlIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUNBLFlBZUEsU0FBQUEsR0FBQUMsRUFBQUMsRUFBQUMsR0FDQUYsRUFBQUMsS0FBQUQsRUFBQUMsR0FBQUMsR0FkQUgsRUFBQUksTUFBQUgsVUFBQSxTQUFBLFdBRUEsSUFBQSxHQURBSSxHQUFBQyxLQUFBQyxTQUNBQyxFQUFBLEVBQUFBLEVBQUFILEVBQUFJ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R0FBQVcsS0FBQUMsT0FDQW5DLE1BQUErQixNQUVBIiwiZmlsZSI6ImNvYndlYi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoKGZ1bmN0aW9uKCl7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgc2FmZUV4dGVuZChBcnJheS5wcm90b3R5cGUsICd1bmlxdWUnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgYSA9IHRoaXMuY29uY2F0KCk7XHJcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyArK2kpXHJcbiAgICAgICAgICAgIGZvcih2YXIgaiA9IGkgKyAxOyBqIDwgYS5sZW5ndGg7ICsrailcclxuICAgICAgICAgICAgICAgIGlmKGFbaV0gPT09IGFbal0pIGEuc3BsaWNlKGotLSwgMSk7XHJcbiAgICAgICAgcmV0dXJuIGE7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEFycmF5LnByb3RvdHlwZSwgJ2ZvckVhY2gnLCBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgY2FsbGJhY2sodGhpc1tpXSwgaSwgdGhpcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYWZlRXh0ZW5kKHByb3RvdHlwZSwgcHJvcGVydHksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYoIXByb3RvdHlwZVtwcm9wZXJ0eV0pIHByb3RvdHlwZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24oKXtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ2FkZENsYXNzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvbGRDbGFzc05hbWVzLCBuZXdDbGFzc05hbWVzO1xyXG4gICAgICAgIGZvcih2YXIgaSBpbiBhcmd1bWVudHMpe1xyXG4gICAgICAgICAgICBvbGRDbGFzc05hbWVzID0gIXRoaXMuY2xhc3NOYW1lID8gW10gOiB0aGlzLmNsYXNzTmFtZS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIG5ld0NsYXNzTmFtZXMgPSAhYXJndW1lbnRzW2ldID8gW10gOiBhcmd1bWVudHNbaV0udHJpbSgpLnJlcGxhY2UoL1xccysvZywgJyAnKS5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IG9sZENsYXNzTmFtZXMuY29uY2F0KG5ld0NsYXNzTmFtZXMpLnVuaXF1ZSgpLmpvaW4oJyAnKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ2hhc0NsYXNzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBxdWVyeUNsYXNzTmFtZXMsIGN1cnJlbnRDbGFzc05hbWVzID0gIXRoaXMuY2xhc3NOYW1lID8gW10gOiB0aGlzLmNsYXNzTmFtZS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgZm9yKHZhciBpIGluIGFyZ3VtZW50cyl7XHJcbiAgICAgICAgICAgIHF1ZXJ5Q2xhc3NOYW1lcyA9ICFhcmd1bWVudHNbaV0gPyBbXSA6IGFyZ3VtZW50c1tpXS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBxdWVyeUNsYXNzTmFtZXMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHF1ZXJ5Q2xhc3NOYW1lc1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENsYXNzTmFtZXMuaW5kZXhPZihuYW1lKSA9PSAtMSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ3JlbW92ZUNsYXNzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpbmRleCA9IDAsIGN1cnJlbnRDbGFzc05hbWVzLCByZW1vdmVDbGFzc05hbWVzO1xyXG4gICAgICAgIHZhciByZW1vdmVFYWNoID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgaW5kZXggPSBjdXJyZW50Q2xhc3NOYW1lcy5pbmRleE9mKG5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggIT0gLTEpXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Q2xhc3NOYW1lcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yKHZhciBpIGluIGFyZ3VtZW50cyl7XHJcbiAgICAgICAgICAgIGN1cnJlbnRDbGFzc05hbWVzID0gIXRoaXMuY2xhc3NOYW1lID8gW10gOiB0aGlzLmNsYXNzTmFtZS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzTmFtZXMgPSAhYXJndW1lbnRzW2ldID8gW10gOiBhcmd1bWVudHNbaV0udHJpbSgpLnJlcGxhY2UoL1xccysvZywgJyAnKS5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICByZW1vdmVDbGFzc05hbWVzLmZvckVhY2gocmVtb3ZlRWFjaCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gY3VycmVudENsYXNzTmFtZXMudW5pcXVlKCkuam9pbignICcpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnZGF0YScsIGZ1bmN0aW9uIChhdHRyLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICghd2luZG93Ll9fZGF0YV9jYWNoZSkgd2luZG93Ll9fZGF0YV9jYWNoZSA9IG5ldyBXZWFrTWFwKCk7XHJcbiAgICAgICAgdmFyIGVsQXR0cnMgPSB3aW5kb3cuX19kYXRhX2NhY2hlLmdldCh0aGlzKSB8fCB7fTtcclxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBlbEF0dHJzW2F0dHJdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHdpbmRvdy5fX2RhdGFfY2FjaGUuc2V0KHRoaXMsIGVsQXR0cnMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChhdHRyKSByZXR1cm4gZWxBdHRycyAmJiBlbEF0dHJzW2F0dHJdO1xyXG4gICAgICAgICAgICBlbHNlIHJldHVybiBlbEF0dHJzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnc2V0RGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgaWYgKCF3aW5kb3cuX19kYXRhX2NhY2hlKSB3aW5kb3cuX19kYXRhX2NhY2hlID0gbmV3IFdlYWtNYXAoKTtcclxuICAgICAgICB3aW5kb3cuX19kYXRhX2NhY2hlLnNldCh0aGlzLCBkYXRhKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnYXR0cicsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XHJcbiAgICAgICAgZWxzZSBpZiAodmFsdWUgPT09IG51bGwpXHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc2FmZUV4dGVuZChIVE1MRWxlbWVudC5wcm90b3R5cGUsICdhdHRyRGF0YScsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2RhdGEtJyArIG5hbWUsIHZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoRWxlbWVudC5wcm90b3R5cGUsICdtYXRjaGVzJyxcclxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzU2VsZWN0b3IgfHxcclxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcclxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fFxyXG4gICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm9NYXRjaGVzU2VsZWN0b3IgfHxcclxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcclxuICAgICAgICBmdW5jdGlvbihzKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRjaGVzID0gKHRoaXMuZG9jdW1lbnQgfHwgdGhpcy5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHMpLFxyXG4gICAgICAgICAgICAgICAgaSA9IG1hdGNoZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB3aGlsZSAoLS1pID49IDAgJiYgbWF0Y2hlcy5pdGVtKGkpICE9PSB0aGlzKSB7fVxyXG4gICAgICAgICAgICByZXR1cm4gaSA+IC0xO1xyXG4gICAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgc2FmZUV4dGVuZChIVE1MRWxlbWVudC5wcm90b3R5cGUsICdwYXJlbnQnLCBmdW5jdGlvbiAocXVlcnkpIHtcclxuICAgICAgICBpZiAoIXF1ZXJ5KSByZXR1cm4gdGhpcy5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgIHdoaWxlICghY3VycmVudC5tYXRjaGVzKHF1ZXJ5KSlcclxuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50RWxlbWVudDtcclxuICAgICAgICByZXR1cm4gY3VycmVudDtcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnaGVpZ2h0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUuaGVpZ2h0ID0gdmFsdWUgKyAncHgnO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0eWxlLmhlaWdodCA9IHZhbHVlO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRIZWlnaHQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ3dpZHRoJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUud2lkdGggPSB2YWx1ZSArICdweCc7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUud2lkdGggPSB2YWx1ZTtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50V2lkdGg7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKHdpbmRvdywgJ2d1aWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICdHVUlELScgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArIHM0KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ2d1aWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGd1aWQgPSBudWxsLCBvdmVybGFwID0gbnVsbDtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIGd1aWQgPSB3aW5kb3cuZ3VpZCgpO1xyXG4gICAgICAgICAgICBvdmVybGFwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyBndWlkKTtcclxuICAgICAgICB9IHdoaWxlKG92ZXJsYXApO1xyXG4gICAgICAgIHRoaXMuYXR0cignaWQnLCBndWlkKTtcclxuICAgICAgICByZXR1cm4gZ3VpZDtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhZmVFeHRlbmQocHJvdG90eXBlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcclxuICAgICAgICBpZighcHJvdG90eXBlW3Byb3BlcnR5XSkgcHJvdG90eXBlW3Byb3BlcnR5XSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHM0KCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKCgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwKVxyXG4gICAgICAgICAgICAudG9TdHJpbmcoMTYpLnN1YnN0cmluZygxKTtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24oKXtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB3aW5kb3cuZXh0ZW5kID0gZnVuY3Rpb24gKGRlZmF1bHRzLCBwcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gcHJvcGVydGllcylcclxuICAgICAgICAgICAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBwcm9wZXJ0aWVzW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKVxyXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZChkZWZhdWx0c1twcm9wZXJ0eV0sIHByb3BlcnRpZXNbcHJvcGVydHldKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0c1twcm9wZXJ0eV0gPSBwcm9wZXJ0aWVzW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKE9iamVjdCwgJ2Nsb25lJywgZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIHZhciBuZXdPYmogPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBvYmopXHJcbiAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBvYmpbcHJvcGVydHldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3T2JqW3Byb3BlcnR5XSA9IE9iamVjdC5jbG9uZShvYmpbcHJvcGVydHldKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBuZXdPYmpbcHJvcGVydHldID0gb2JqW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXdPYmo7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYWZlRXh0ZW5kKHByb3RvdHlwZSwgcHJvcGVydHksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYoIXByb3RvdHlwZVtwcm9wZXJ0eV0pIHByb3RvdHlwZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBUcmVlTm9kZSA9IGZ1bmN0aW9uIChwYXJlbnQsIGRhdGEpIHtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhIHx8IHt9O1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcclxuICAgIH07XHJcblxyXG4gICAgd2luZG93LlRyZWVOb2RlID0gVHJlZU5vZGU7XHJcblxyXG4gICAgVHJlZU5vZGUucHJvdG90eXBlLmlzUm9vdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMucGFyZW50O1xyXG4gICAgfTtcclxuXHJcbiAgICBUcmVlTm9kZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICB2YXIgY2hpbGQgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLCBkYXRhKTtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xyXG4gICAgICAgIHJldHVybiBjaGlsZDtcclxuICAgIH07XHJcblxyXG4gICAgVHJlZU5vZGUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4uc2xpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICBUcmVlTm9kZS5wcm90b3R5cGUuZGZzID0gZnVuY3Rpb24gKGNoZWNrKSB7XHJcbiAgICAgICAgdmFyIG91dCA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoIWNoZWNrIHx8IChjaGVjayAmJiBjaGVjayh0aGlzLmNoaWxkcmVuW2ldKSkpXHJcbiAgICAgICAgICAgICAgICBvdXQucHVzaCh0aGlzLmNoaWxkcmVuW2ldKTtcclxuICAgICAgICAgICAgb3V0LmNvbmNhdCh0aGlzLmNoaWxkcmVuW2ldLmRmcyhjaGVjaykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfTtcclxuXHJcbiAgICBUcmVlTm9kZS5wcm90b3R5cGUuYmZzID0gZnVuY3Rpb24gKGNoZWNrKSB7XHJcbiAgICAgICAgdmFyIG91dCA9IFtdLCBpO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICBpZiAoIWNoZWNrIHx8IChjaGVjayAmJiBjaGVjayh0aGlzLmNoaWxkcmVuW2ldKSkpXHJcbiAgICAgICAgICAgICAgICBvdXQucHVzaCh0aGlzLmNoaWxkcmVuW2ldKTtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgb3V0LmNvbmNhdCh0aGlzLmNoaWxkcmVuW2ldLmJmcyhjaGVjaykpO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9O1xyXG5cclxuICAgIFRyZWVOb2RlLmV4dGVuZCA9IGZ1bmN0aW9uIChkZWZhdWx0cykge1xyXG4gICAgICAgIHZhciBfVHJlZU5vZGUgPSBmdW5jdGlvbiAocGFyZW50LCBkYXRhKSB7XHJcbiAgICAgICAgICAgIFRyZWVOb2RlLmNhbGwodGhpcywgcGFyZW50LCBkYXRhKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIF9UcmVlTm9kZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFRyZWVOb2RlLnByb3RvdHlwZSk7XHJcbiAgICAgICAgX1RyZWVOb2RlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IF9UcmVlTm9kZTtcclxuICAgICAgICBleHRlbmQoX1RyZWVOb2RlLnByb3RvdHlwZSwgZGVmYXVsdHMpO1xyXG4gICAgICAgIHJldHVybiBuZXcgX1RyZWVOb2RlKG51bGwpO1xyXG4gICAgfTtcclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIEV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xyXG4gICAgfTtcclxuXHJcbiAgICBFdmVudEhhbmRsZXIucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgbmFtZSA9IGFyZ3VtZW50c1swXTtcclxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNbbmFtZV0gfHwgW107XHJcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGFyZ3VtZW50cywgMCwgMSk7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZS5sb2dnZXIuZGVidWcobmFtZSwgYXJndW1lbnRzKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG5cclxuICAgIEV2ZW50SGFuZGxlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICghdGhpcy5saXN0ZW5lcnNbbmFtZV0pIHRoaXMubGlzdGVuZXJzW25hbWVdID0gW107XHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbbmFtZV0ucHVzaChjYWxsYmFjayk7XHJcbiAgICB9O1xyXG5cclxuICAgIEV2ZW50SGFuZGxlci5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmxpc3RlbmVyc1tuYW1lXTtcclxuICAgIH07XHJcblxyXG4gICAgRXZlbnRIYW5kbGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICh0aGlzLmxpc3RlbmVyc1tuYW1lXSkge1xyXG4gICAgICAgICAgICB2YXIgYXJyYXkgPSB0aGlzLmxpc3RlbmVyc1tuYW1lXTtcclxuICAgICAgICAgICAgaWYgKGFycmF5LmluZGV4T2YoY2FsbGJhY2spID4gLTEpIGFycmF5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB3aW5kb3cuRXZlbnRIYW5kbGVyID0gRXZlbnRIYW5kbGVyO1xyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbigpe1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gKCkge307XHJcblxyXG4gICAgdmFyIExvZ2dlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgaXNEZWJ1Zykge1xyXG4gICAgICAgIHRoaXMuZGVidWcgPSBpc0RlYnVnID8gY29uc29sZS5kZWJ1Zy5iaW5kKCkgOiBlbXB0eUZ1bmN0aW9uO1xyXG5cclxuICAgICAgICB0aGlzLmluZm8gPSBpc0RlYnVnID8gY29uc29sZS5pbmZvLmJpbmQoKSA6IGVtcHR5RnVuY3Rpb247XHJcblxyXG4gICAgICAgIHRoaXMud2FybiA9IGNvbnNvbGUud2Fybi5iaW5kKCk7XHJcblxyXG4gICAgICAgIHRoaXMuZXJyb3IgPSBjb25zb2xlLmVycm9yLmJpbmQoKTtcclxuICAgIH07XHJcblxyXG4gICAgd2luZG93LkxvZ2dlciA9IExvZ2dlcjtcclxufSkoKSk7XHJcbiIsIihmdW5jdGlvbigpe1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICAgICAgICBjb250YWluZXI6IHtcclxuICAgICAgICAgICAgc2VsZWN0b3I6ICcjY29id2ViJyxcclxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnY2ItY29udGFpbmVyJ1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdmFyIENvYndlYiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XHJcbiAgICAgICAgZXh0ZW5kKHRoaXMub3B0aW9ucywgb3B0aW9ucyB8fCB7fSk7XHJcblxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLm9wdGlvbnMuY29udGFpbmVyLnNlbGVjdG9yKTtcclxuICAgICAgICBpZiAoIXRoaXMuY29udGFpbmVyKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29udGFpbmVyIHNlbGVjdG9yOiBcXCcnICtcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5jb250YWluZXIuc2VsZWN0b3IgKyAnXFwnJyk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmNvbnRhaW5lci5jbGFzc05hbWUpO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmRhdGEoJ2luc3RhbmNlJywgdGhpcyk7XHJcblxyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbmV3IExvZ2dlcih0aGlzLCB0cnVlKTtcclxuICAgICAgICB0aGlzLmV2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXIodGhpcyk7XHJcbiAgICAgICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzLmxvYWQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5ldmVudHMudHJpZ2dlcignYXBwLmxvYWRlZCcpO1xyXG4gICAgfTtcclxuXHJcbiAgICB3aW5kb3cuQ29id2ViID0gQ29id2ViO1xyXG59KCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMgPSB7XHJcbiAgICAgICAgYWxsOiB7fSxcclxuICAgICAgICBhZGQ6IGZ1bmN0aW9uIChuYW1lLCBpbml0LCBkZXBlbmRlbmNpZXMpIHtcclxuICAgICAgICAgICAgZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzIHx8IFtdO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hbGxbbmFtZV0gPSB7XHJcbiAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXM6IGRlcGVuZGVuY2llcyxcclxuICAgICAgICAgICAgICAgIGluaXQ6IGluaXRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxvYWQ6IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlID0gaW5zdGFuY2U7XHJcbiAgICAgICAgICAgIGFkZFJldmVyc2VEZXBlbmRlbmNpZXModGhpcy5hbGwpO1xyXG4gICAgICAgICAgICB2YXIgc29ydGVkTmFtZXMgPSB0b3BvbG9naWNhbFNvcnQoaW5zdGFuY2UsIHRoaXMuYWxsKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3J0ZWROYW1lcy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gc29ydGVkTmFtZXNbaV07XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsW25hbWVdLmluaXQoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLmV2ZW50cy50cmlnZ2VyKCdtb2R1bGVzLmxvYWRlZCcsIG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZXJyb3IoJ0xvYWRpbmcgbW9kdWxlICcgKyBuYW1lLCBleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuZXZlbnRzLnRyaWdnZXIoJ21vZHVsZXMuZXJyb3InLCBuYW1lLCBleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5zdGFuY2UuZXZlbnRzLnRyaWdnZXIoJ21vZHVsZXMubG9hZGVkLmFsbCcsIHNvcnRlZE5hbWVzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHByaW50OiBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMuYWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZHVsZSA9IHRoaXMuYWxsW25hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLmxvZ2dlci5kZWJ1ZygnTmFtZTogJywgbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UubG9nZ2VyLmRlYnVnKCdcXHREZXBlbmRlbmNpZXM6ICcsIG1vZHVsZS5kZXBlbmRlbmNpZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLmxvZ2dlci5kZWJ1ZygnXFx0RGVwZW5kYW50OiAnLCBtb2R1bGUuZGVwZW5kYW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOiBcImxvYWRcIiBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZSBcInByaW50XCInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkUmV2ZXJzZURlcGVuZGVuY2llcyAobW9kdWxlcykge1xyXG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gbW9kdWxlcykge1xyXG4gICAgICAgICAgICB2YXIgbW9kdWxlID0gbW9kdWxlc1tuYW1lXTtcclxuICAgICAgICAgICAgaWYgKCFtb2R1bGUuZGVwZW5kYW50KSBtb2R1bGUuZGVwZW5kYW50ID0gW107XHJcbiAgICAgICAgICAgIGlmIChtb2R1bGUuZGVwZW5kZW5jaWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlLmRlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXBQbHVnaW4gPSBtb2R1bGVzW21vZHVsZS5kZXBlbmRlbmNpZXNbaV1dO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZGVwUGx1Z2luLmRlcGVuZGFudCkgZGVwUGx1Z2luLmRlcGVuZGFudCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlcFBsdWdpbi5kZXBlbmRhbnQucHVzaChuYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0b3BvbG9naWNhbFNvcnQgKGluc3RhbmNlLCBtb2R1bGVzKSB7XHJcbiAgICAgICAgdmFyIGNhbmRpZGF0ZXMgPSBbXSwgc29ydGVkTmFtZXMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBuYW1lIGluIG1vZHVsZXMpXHJcbiAgICAgICAgICAgIGlmIChtb2R1bGVzW25hbWVdLmRlcGVuZGVuY2llcy5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICBjYW5kaWRhdGVzLnB1c2gobmFtZSk7XHJcbiAgICAgICAgd2hpbGUgKGNhbmRpZGF0ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgbmV4dE5hbWUgPSBjYW5kaWRhdGVzWzBdO1xyXG4gICAgICAgICAgICBjYW5kaWRhdGVzLnNwbGljZSgwLCAxKTtcclxuICAgICAgICAgICAgaWYgKG1vZHVsZXNbbmV4dE5hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9kdWxlID0gbW9kdWxlc1tuZXh0TmFtZV07XHJcbiAgICAgICAgICAgICAgICBzb3J0ZWROYW1lcy5wdXNoKG5leHROYW1lKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlLmRlcGVuZGFudC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXBOYW1lID0gbW9kdWxlLmRlcGVuZGFudFtpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWxsRGVwZW5kZW5jaWVzTWV0KHNvcnRlZE5hbWVzLCBtb2R1bGVzW2RlcE5hbWVdKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlcy5wdXNoKGRlcE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuZXZlbnRzLnRyaWdnZXIoJ21vZHVsZXMuZXJyb3IubWlzc2luZycsIG5leHROYW1lKTtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmxvZ2dlci53YXJuaW5nKCdNaXNzaW5nIG1vZHVsZSBcXCcnICsgbmV4dE5hbWUgKyAnXFwnJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKG1vZHVsZXMpLmxlbmd0aCAhPT0gc29ydGVkTmFtZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmV2ZW50cy50cmlnZ2VyKCdtb2R1bGVzLmVycm9yLmN5Y2xlJyk7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmxvZ2dlci5lcnJvcignRGVwZW5kZW5jeSBjeWNsZSBmb3VuZCBpbiBtb2R1bGVzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzb3J0ZWROYW1lcztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhbGxEZXBlbmRlbmNpZXNNZXQgKGxvYWRlZFVudGlsTm93LCBtb2R1bGUpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5kZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIGlmIChsb2FkZWRVbnRpbE5vdy5pbmRleE9mKG1vZHVsZS5kZXBlbmRlbmNpZXNbaV0pID09PSAtMSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzLmFkZCgncGFuZS1oZWFkZXInLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBpbnN0YW5jZS5ldmVudHMub24oJ3BhbmUuY3JlYXRlJywgZnVuY3Rpb24gKHBhbmUpIHtcclxuICAgICAgICAgICAgb25DcmVhdGVDYWxsYmFjayhwYW5lLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBbJ3BhbmUtdHlwZXMnXSk7XHJcblxyXG4gICAgZnVuY3Rpb24gb25DcmVhdGVDYWxsYmFjayAocGFuZSwgaW5zdGFuY2UpIHtcclxuICAgICAgICB2YXIgaGVhZGVyID0gY3JlYXRlSGVhZGVyKCk7XHJcbiAgICAgICAgcGFuZS5hcHBlbmQoaGVhZGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjcmVhdGVIZWFkZXIgKCkge1xyXG4gICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBkaXYuY2xhc3NOYW1lID0gJ3BhbmUtaGVhZGVyJztcclxuICAgICAgICByZXR1cm4gZGl2O1xyXG4gICAgfVxyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzLmFkZCgncGFuZS10eXBlcycsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIHZhciBwYW5lVHlwZXMgPSB7XHJcbiAgICAgICAgICAgIGFsbDoge30sXHJcbiAgICAgICAgICAgIGFkZDogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hbGxbbmFtZV0gPSBjYWxsYmFja3M7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFsbFtuYW1lXTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuYWxsW25hbWVdO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBoYXM6IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gISF0aGlzLmFsbFtuYW1lXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmV2ZW50cy5vbigncGFuZS5zcGxpdCcsIGZ1bmN0aW9uIChvbGRQYW5lLCBuZXdQYW5lKSB7XHJcbiAgICAgICAgICAgIHZhciBvbGRUeXBlID0gb2xkUGFuZS5hdHRyRGF0YSgncGFuZS10eXBlJyk7XHJcbiAgICAgICAgICAgIGlmIChvbGRUeXBlKSBpbnN0YW5jZS5wYW5lLnNldFR5cGUobmV3UGFuZSwgb2xkVHlwZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLnBhbmUudHlwZXMgPSBwYW5lVHlwZXM7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLnBhbmUuc2V0VHlwZSA9IGZ1bmN0aW9uIChwYW5lLCBuYW1lKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnR5cGVzLmhhcyhuYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHR5cGVDYWxsYmFja3MgPSB0aGlzLnR5cGVzLmdldChuYW1lKTtcclxuICAgICAgICAgICAgICAgIHR5cGVDYWxsYmFja3Mub25QYW5lVHlwZShwYW5lLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFuZUhlYWRlciA9IHBhbmUucXVlcnlTZWxlY3RvcignLnBhbmUtaGVhZGVyJyk7XHJcbiAgICAgICAgICAgICAgICB0eXBlQ2FsbGJhY2tzLm9uQ3JlYXRlSGVhZGVyKHBhbmVIZWFkZXIsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIHBhbmUuYXR0ckRhdGEoJ3BhbmUtdHlwZScsIG5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0sIFsncGFuZSddKTtcclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUubW9kdWxlcy5hZGQoJ3BhbmUnLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBpbnN0YW5jZS5ldmVudHMub24oJ2FwcC5sb2FkZWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnBhbmUuaW50ZXJuYWwgPSBuZXcgUGFuZSh7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXI6IGluc3RhbmNlLm9wdGlvbnMuY29udGFpbmVyLnNlbGVjdG9yLFxyXG4gICAgICAgICAgICAgICAgc2VwYXJhdG9yOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogM1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uUGFuZUNyZWF0ZTogb25QYW5lQ3JlYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIG9uUGFuZVNwbGl0OiBvblBhbmVTcGxpdCxcclxuICAgICAgICAgICAgICAgICAgICBvblBhbmVSZXNpemU6IG9uUGFuZVJlc2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICAvL29uUGFuZU1lcmdlOiBvblBhbmVNZXJnZSxcclxuICAgICAgICAgICAgICAgICAgICAvL29uUGFuZURlc3Ryb3k6IG9uUGFuZURlc3Ryb3ksXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5wYW5lID0ge307XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9uUGFuZUNyZWF0ZSAocGFuZSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5ldmVudHMudHJpZ2dlcigncGFuZS5jcmVhdGUnLCBwYW5lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9uUGFuZVNwbGl0IChvcmlnaW4sIG5ld1BhbmUpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UuZXZlbnRzLnRyaWdnZXIoJ3BhbmUuc3BsaXQnLCBvcmlnaW4sIG5ld1BhbmUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb25QYW5lUmVzaXplIChwYW5lKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmV2ZW50cy50cmlnZ2VyKCdwYW5lLnJlc2l6ZScsIHBhbmUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb25QYW5lTWVyZ2UgKG1lcmdlciwgdG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5kZWJ1Zygnb25QYW5lTWVyZ2UnLCBtZXJnZXIsIHRvUmVtb3ZlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9uUGFuZURlc3Ryb3kgKHBhbmUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5kZWJ1Zygnb25QYW5lRGVzdHJveScsIHBhbmUpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzLmFkZCgnaW50ZXJhY3Rpb24tbW9kZScsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGluc3RhbmNlLnN1cmZhY2UuaW50ZXJhY3Rpb24gPSB7XHJcbiAgICAgICAgICAgIGFsbDoge30sXHJcbiAgICAgICAgICAgIGFkZDogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hbGxbbmFtZV0gPSBjYWxsYmFja3M7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFsbFtuYW1lXTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuYWxsW25hbWVdO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBoYXM6IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gISF0aGlzLmFsbFtuYW1lXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9LCBbJ3N1cmZhY2UnXSk7XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMuYWRkKCdzdXJmYWNlJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UucGFuZS50eXBlcy5hZGQoJ3N1cmZhY2UnLCB7XHJcbiAgICAgICAgICAgIG9uUGFuZVR5cGU6IG9uU3VyZmFjZVBhbmVUeXBlLFxyXG4gICAgICAgICAgICBvbkNyZWF0ZUhlYWRlcjogb25DcmVhdGVTdXJmYWNlSGVhZGVyXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmV2ZW50cy5vbigncGFuZS5yZXNpemUnLCBmdW5jdGlvbiAocGFuZSkge1xyXG4gICAgICAgICAgICBpZiAocGFuZS5hdHRyRGF0YSgncGFuZS10eXBlJykgPT09ICdzdXJmYWNlJylcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUNhbnZhc1NpemUocGFuZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgdmFyIHN1cmZhY2VzID0gaW5zdGFuY2UucGFuZS5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnBhbmUgY2FudmFzJyk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3VyZmFjZXMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVDYW52YXNTaXplKHN1cmZhY2VzW2ldLnBhcmVudE5vZGUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5ldmVudHMub24oJ3BhbmUuY3JlYXRlJywgZnVuY3Rpb24gKHBhbmUpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UucGFuZS5zZXRUeXBlKHBhbmUsICdzdXJmYWNlJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLnN1cmZhY2UgPSB7fTtcclxuICAgIH0sIFsncGFuZS10eXBlcyddKTtcclxuXHJcbiAgICBmdW5jdGlvbiBvblN1cmZhY2VQYW5lVHlwZSAocGFuZSwgaW5zdGFuY2UpIHtcclxuICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgICAgY2FudmFzLmNsYXNzTmFtZSA9ICdzdXJmYWNlJztcclxuICAgICAgICBwYW5lLmFwcGVuZChjYW52YXMpO1xyXG5cclxuICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgcHJvajogbWF0NC5jcmVhdGUoKSxcclxuICAgICAgICAgICAgdmlldzogbWF0NC5jcmVhdGUoKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbWF0NC5wZXJzcGVjdGl2ZShkYXRhLnByb2osIC00NSAqIERFRzJSQUQsXHJcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCAvIGNhbnZhcy5oZWlnaHQsIDAuMSwgMTAwMCk7XHJcbiAgICAgICAgbWF0NC5sb29rQXQoZGF0YS52aWV3LCBbMCwyLDRdLCBbMCwwLDBdLCBbMCwxLDBdKTtcclxuICAgICAgICBtYXQ0LnNjYWxlKGRhdGEudmlldywgZGF0YS52aWV3LCBbMSwxLjIsMV0pO1xyXG4gICAgICAgIHBhbmUuZGF0YSgnc3VyZmFjZScsIGRhdGEpO1xyXG4gICAgICAgIHVwZGF0ZUNhbnZhc1NpemUocGFuZSk7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmV2ZW50cy50cmlnZ2VyKCdzdXJmYWNlLmNyZWF0ZScsIGNhbnZhcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gb25DcmVhdGVTdXJmYWNlSGVhZGVyIChoZWFkZXIsIGluc3RhbmNlKSB7XHJcbiAgICAgICAgdmFyIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgICAgICBsYWJlbC5pbm5lckhUTUwgPSAnU3VyZmFjZSBQYW5lJztcclxuICAgICAgICBoZWFkZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZUNhbnZhc1NpemUgKHBhbmUpIHtcclxuICAgICAgICB2YXIgY2FudmFzID0gcGFuZS5xdWVyeVNlbGVjdG9yKCdjYW52YXMnKTtcclxuICAgICAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG5cclxuICAgICAgICB2YXIgaGVhZGVyID0gcGFuZS5xdWVyeVNlbGVjdG9yKCcucGFuZS1oZWFkZXInKTtcclxuICAgICAgICB2YXIgaGVhZGVySGVpZ2h0ID0gaGVhZGVyID8gaGVhZGVyLmhlaWdodCgpIDogMDtcclxuXHJcbiAgICAgICAgdmFyIHdpZHRoID0gcGFuZS53aWR0aCgpLCBoZWlnaHQgPSBwYW5lLmhlaWdodCgpIC0gaGVhZGVySGVpZ2h0O1xyXG4gICAgICAgIHBhbmUuZGF0YSgnYnVmZmVyJywgbmV3IFVpbnQ4QXJyYXkod2lkdGggKiBoZWlnaHQgKiA0KSk7XHJcbiAgICAgICAgcGFuZS5kYXRhKCdpbWdEYXRhJywgY29udGV4dC5jcmVhdGVJbWFnZURhdGEod2lkdGgsIGhlaWdodCkpO1xyXG5cclxuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xyXG5cclxuICAgICAgICB2YXIgZGF0YSA9IHBhbmUuZGF0YSgnc3VyZmFjZScpO1xyXG4gICAgICAgIG1hdDQucGVyc3BlY3RpdmUoZGF0YS5wcm9qLCAtNDUgKiBERUcyUkFELCB3aWR0aCAvIGhlaWdodCwgMC4xLCAxMDAwKTtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUubW9kdWxlcy5hZGQoJ2NvbW1vbi1pbnRlcmFjdGlvbicsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGluc3RhbmNlLnN1cmZhY2UuaW50ZXJhY3Rpb24uYWRkKCdjb21tb24nLCB7XHJcbiAgICAgICAgICAgIG9uTW91c2VNb3ZlOiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbk1vdXNlRG93bjogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZGVidWcoJ0NPTU1PTiAtIG9uTW91c2VEb3duJywgZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uTW91c2VVcDogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZGVidWcoJ0NPTU1PTiAtIG9uTW91c2VVcCcsIGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmxvZ2dlci5kZWJ1ZygnQ09NTU9OIC0gb25DbGljaycsIGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBbJ3N1cmZhY2UtaW50ZXJhY3Rpb24nXSk7XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMuYWRkKCdvYmplY3QtaW50ZXJhY3Rpb24nLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBpbnN0YW5jZS5zdXJmYWNlLmludGVyYWN0aW9uLmFkZCgnb2JqZWN0Jywge1xyXG4gICAgICAgICAgICBvbk1vdXNlTW92ZTogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uTW91c2VEb3duOiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmxvZ2dlci5kZWJ1Zygnb25Nb3VzZURvd24nLCBldmVudCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uTW91c2VVcDogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZGVidWcoJ29uTW91c2VVcCcsIGV2ZW50KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZGVidWcoJ29uQ2xpY2snLCBldmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UuZXZlbnRzLm9uKCdzdXJmYWNlLmNyZWF0ZScsIGZ1bmN0aW9uIChzdXJmYWNlKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnN1cmZhY2Uuc2V0SW50ZXJhY3Rpb24oc3VyZmFjZSwgJ29iamVjdCcpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0sIFsnc3VyZmFjZS1pbnRlcmFjdGlvbiddKTtcclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUubW9kdWxlcy5hZGQoJ3N1cmZhY2UtaW50ZXJhY3Rpb24nLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBpbnN0YW5jZS5zdXJmYWNlLnNldEludGVyYWN0aW9uID0gZnVuY3Rpb24gKHN1cmZhY2UsIG5hbWUpIHtcclxuICAgICAgICAgICAgdmFyIGludGVyYWN0aW9ucyA9IGluc3RhbmNlLnN1cmZhY2UuaW50ZXJhY3Rpb247XHJcbiAgICAgICAgICAgIGlmIChpbnRlcmFjdGlvbnMuaGFzKG5hbWUpKVxyXG4gICAgICAgICAgICAgICAgc3VyZmFjZS5hdHRyRGF0YSgnc3VyZmFjZS1pbnRlcmFjdGlvbicsIG5hbWUpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGluc3RhbmNlLnN1cmZhY2UuZ2V0SW50ZXJhY3Rpb24gPSBmdW5jdGlvbiAoc3VyZmFjZSkge1xyXG4gICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb25zID0gaW5zdGFuY2Uuc3VyZmFjZS5pbnRlcmFjdGlvbjtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSBzdXJmYWNlLmF0dHJEYXRhKCdzdXJmYWNlLWludGVyYWN0aW9uJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnRlcmFjdGlvbnMuZ2V0KG5hbWUpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmV2ZW50cy5vbignc3VyZmFjZS5jcmVhdGUnLCBmdW5jdGlvbiAoc3VyZmFjZSkge1xyXG4gICAgICAgICAgICBzdXJmYWNlLm9ubW91c2Vtb3ZlID0gb25TdXJmYWNlRXZlbnQ7XHJcbiAgICAgICAgICAgIHN1cmZhY2Uub25tb3VzZWRvd24gPSBvblN1cmZhY2VFdmVudDtcclxuICAgICAgICAgICAgc3VyZmFjZS5vbm1vdXNldXAgPSBvblN1cmZhY2VFdmVudDtcclxuICAgICAgICAgICAgc3VyZmFjZS5vbmNsaWNrID0gb25TdXJmYWNlRXZlbnQ7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9uU3VyZmFjZUV2ZW50IChldmVudCkge1xyXG4gICAgICAgICAgICB2YXIgY29tbW9uID0gaW5zdGFuY2Uuc3VyZmFjZS5pbnRlcmFjdGlvbi5nZXQoJ2NvbW1vbicpO1xyXG4gICAgICAgICAgICB2YXIga2VlcFJ1bm5pbmcgPSBydW5DYWxsYmFjayhjb21tb24sIGV2ZW50KTtcclxuICAgICAgICAgICAgaWYgKGtlZXBSdW5uaW5nKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2tzID0gaW5zdGFuY2Uuc3VyZmFjZS5nZXRJbnRlcmFjdGlvbihldmVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgcnVuQ2FsbGJhY2soY2FsbGJhY2tzLCBldmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmV2ZW50cy5vbigncGFuZS5zcGxpdCcsIGZ1bmN0aW9uIChvbGRQYW5lLCBuZXdQYW5lKSB7XHJcbiAgICAgICAgICAgIG5ld1BhbmUuYXR0ckRhdGEoJ3N1cmZhY2UtaW50ZXJhY3Rpb24nLCBvbGRQYW5lLmF0dHJEYXRhKCdzdXJmYWNlLWludGVyYWN0aW9uJykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgWydpbnRlcmFjdGlvbi1tb2RlJywgJ3N1cmZhY2UnXSk7XHJcblxyXG4gICAgZnVuY3Rpb24gcnVuQ2FsbGJhY2sgKGNhbGxiYWNrcywgZXZlbnQpIHtcclxuICAgICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnbW91c2Vtb3ZlJzogcmV0dXJuIGNhbGxiYWNrcy5vbk1vdXNlTW92ZShldmVudCk7XHJcbiAgICAgICAgICAgIGNhc2UgJ21vdXNlZG93bic6IHJldHVybiBjYWxsYmFja3Mub25Nb3VzZURvd24oZXZlbnQpO1xyXG4gICAgICAgICAgICBjYXNlICdtb3VzZXVwJzogcmV0dXJuIGNhbGxiYWNrcy5vbk1vdXNlVXAoZXZlbnQpO1xyXG4gICAgICAgICAgICBjYXNlICdjbGljayc6IHJldHVybiBjYWxsYmFja3Mub25DbGljayhldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzLmFkZCgncmVuZGVyLXNvbGlkJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgdmFyIHNoYWRlciA9IG5ldyBTaGFkZXIoXHJcbiAgICAgICAgICAgICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7JyArXHJcbiAgICAgICAgICAgICdhdHRyaWJ1dGUgdmVjMyBhX3ZlcnRleDsnICtcclxuICAgICAgICAgICAgJ2F0dHJpYnV0ZSB2ZWMzIGFfbm9ybWFsOycgK1xyXG4gICAgICAgICAgICAndmFyeWluZyB2ZWMzIHZfbm9ybWFsOycgK1xyXG4gICAgICAgICAgICAndW5pZm9ybSBtYXQ0IHVfbXZwOycgK1xyXG4gICAgICAgICAgICAndW5pZm9ybSBtYXQ0IHVfbW9kZWw7JyArXHJcbiAgICAgICAgICAgICd2b2lkIG1haW4oKSB7JyArXHJcbiAgICAgICAgICAgICcgICAgdl9ub3JtYWwgPSAodV9tb2RlbCAqIHZlYzQoYV9ub3JtYWwsMC4wKSkueHl6OycgK1xyXG4gICAgICAgICAgICAnICAgIGdsX1Bvc2l0aW9uID0gdV9tdnAgKiB2ZWM0KGFfdmVydGV4LDEuMCk7JyArXHJcbiAgICAgICAgICAgICd9JyxcclxuICAgICAgICAgICAgJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDsnICtcclxuICAgICAgICAgICAgJ3ZhcnlpbmcgdmVjMyB2X25vcm1hbDsnICtcclxuICAgICAgICAgICAgJ3VuaWZvcm0gdmVjMyB1X2xpZ2h0dmVjdG9yOycgK1xyXG4gICAgICAgICAgICAndW5pZm9ybSB2ZWM0IHVfY29sb3I7JyArXHJcbiAgICAgICAgICAgICd2b2lkIG1haW4oKSB7JyArXHJcbiAgICAgICAgICAgICcgIHZlYzMgTiA9IG5vcm1hbGl6ZSh2X25vcm1hbCk7JyArXHJcbiAgICAgICAgICAgICcgIGdsX0ZyYWdDb2xvciA9IHVfY29sb3IgKiBtYXgoMC4wLCBkb3QodV9saWdodHZlY3RvcixOKSk7JyArXHJcbiAgICAgICAgICAgICd9J1xyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHZhciB0ZW1wID0gbWF0NC5jcmVhdGUoKTtcclxuICAgICAgICB2YXIgbXZwID0gbWF0NC5jcmVhdGUoKTtcclxuXHJcbiAgICAgICAgdmFyIHVuaWZvcm1zID0ge1xyXG4gICAgICAgICAgICB1X2NvbG9yOiBbMSwgMSwgMSwgMV0sXHJcbiAgICAgICAgICAgIHVfbGlnaHR2ZWN0b3I6IHZlYzMubm9ybWFsaXplKHZlYzMuY3JlYXRlKCksIFsxLCAyLCAzXSksXHJcbiAgICAgICAgICAgIHVfbW9kZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHVfbXZwOiBtdnBcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5ncmFwaGljcy5yZW5kZXJzLmFkZCgnc29saWQnLCBmdW5jdGlvbiAoc3VyZmFjZSkge1xyXG4gICAgICAgICAgICB2YXIgb2JqcyA9IGluc3RhbmNlLnNjZW5lLnJvb3QuZGZzKCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2Jqcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IG9ianNbaV0uZGF0YTtcclxuICAgIFx0XHRcdG1hdDQubXVsdGlwbHkodGVtcCwgc3VyZmFjZS52aWV3LCBvYmoubW9kZWwpO1xyXG4gICAgXHRcdFx0bWF0NC5tdWx0aXBseShtdnAsIHN1cmZhY2UucHJvaiwgdGVtcCk7XHJcblxyXG4gICAgXHRcdFx0dW5pZm9ybXMudV9tb2RlbCA9IG9iai5tb2RlbDtcclxuICAgIFx0XHRcdHNoYWRlci51bmlmb3Jtcyh1bmlmb3JtcykuZHJhdyhvYmoubWVzaCwgb2JqLnByaW1pdGl2ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UuZXZlbnRzLm9uKCdzdXJmYWNlLmNyZWF0ZScsIGZ1bmN0aW9uIChzdXJmYWNlKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnN1cmZhY2Uuc2V0UmVuZGVyKHN1cmZhY2UsICdzb2xpZCcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgWydzdXJmYWNlLXJlbmRlciddKTtcclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUubW9kdWxlcy5hZGQoJ3N1cmZhY2UtcmVuZGVyJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2Uuc3VyZmFjZS5zZXRSZW5kZXIgPSBmdW5jdGlvbiAoc3VyZmFjZSwgbmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgcmVuZGVycyA9IGluc3RhbmNlLmdyYXBoaWNzLnJlbmRlcnM7XHJcbiAgICAgICAgICAgIGlmIChyZW5kZXJzLmhhcyhuYW1lKSlcclxuICAgICAgICAgICAgICAgIHN1cmZhY2UuYXR0ckRhdGEoJ3JlbmRlcicsIG5hbWUpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGluc3RhbmNlLnN1cmZhY2UuZ2V0UmVuZGVyID0gZnVuY3Rpb24gKHN1cmZhY2UpIHtcclxuICAgICAgICAgICAgdmFyIHJlbmRlcnMgPSBpbnN0YW5jZS5ncmFwaGljcy5yZW5kZXJzO1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9IHN1cmZhY2UuYXR0ckRhdGEoJ3JlbmRlcicpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVuZGVycy5nZXQobmFtZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHBhbmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBhbmUnKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChwYW5lc1tpXS5kYXRhc2V0LnBhbmVUeXBlID09ICdzdXJmYWNlJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNhbnZhcyA9IHBhbmVzW2ldLnF1ZXJ5U2VsZWN0b3IoJ2NhbnZhcycpO1xyXG4gICAgICAgICAgICAgICAgY2FudmFzLmRhdGFzZXQucmVuZGVyID0gJ3NvbGlkJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5zdGFuY2UuZXZlbnRzLm9uKCdwYW5lLnNwbGl0JywgZnVuY3Rpb24gKG9sZFBhbmUsIG5ld1BhbmUpIHtcclxuICAgICAgICAgICAgbmV3UGFuZS5hdHRyRGF0YSgnc3VyZmFjZS1yZW5kZXInLCBvbGRQYW5lLmF0dHJEYXRhKCdzdXJmYWNlLXJlbmRlcicpKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sIFsnZ3JhcGhpY3MtcmVuZGVyJywgJ3N1cmZhY2UnXSk7XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMuYWRkKCdncmFwaGljcy1yZW5kZXInLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBpbnN0YW5jZS5ncmFwaGljcy5yZW5kZXJzID0ge1xyXG4gICAgICAgICAgICBhbGw6IHt9LFxyXG4gICAgICAgICAgICBhZGQ6IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hbGxbbmFtZV0gPSBjYWxsYmFjaztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWxsW25hbWVdO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5hbGxbbmFtZV07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGhhczogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhIXRoaXMuYWxsW25hbWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0sIFsnZ3JhcGhpY3MnXSk7XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgR3JhcGhpY3MgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICB0aGlzLmluc3RhbmNlID0gaW5zdGFuY2U7XHJcbiAgICAgICAgdGhpcy5nbCA9IEdMLmNyZWF0ZSh7XHJcbiAgICAgICAgICAgIGhlaWdodDogc2NyZWVuLmhlaWdodCxcclxuICAgICAgICAgICAgd2lkdGg6IHNjcmVlbi53aWR0aFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZ2wuYW5pbWF0ZSgpO1xyXG4gICAgICAgIHRoaXMuZ2wub25kcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVuZGVyVGFyZ2V0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2NhbnZhcycpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlbmRlclRhcmdldHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICBkcmF3UmVuZGVyVGFyZ2V0KGluc3RhbmNlLCByZW5kZXJUYXJnZXRzW2ldKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZ2wuY2xlYXJDb2xvcigwLjQsIDAuNCwgMC40LCAxKTtcclxuICAgICAgICB0aGlzLmdsLmVuYWJsZSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xyXG4gICAgfTtcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMuYWRkKCdncmFwaGljcycsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGluc3RhbmNlLmdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKGluc3RhbmNlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIGRyYXdSZW5kZXJUYXJnZXQgKGluc3RhbmNlLCBjYW52YXMpIHtcclxuICAgICAgICB2YXIgcGFuZSA9IGNhbnZhcy5wYXJlbnQoJy5wYW5lJyk7XHJcbiAgICAgICAgdmFyIGltYWdlRGF0YSA9IHBhbmUuZGF0YSgnaW1nRGF0YScpO1xyXG4gICAgICAgIHZhciBzdXJmYWNlID0gcGFuZS5kYXRhKCdzdXJmYWNlJyk7XHJcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHBhbmUuZGF0YSgnYnVmZmVyJyk7XHJcbiAgICAgICAgdmFyIGdsID0gaW5zdGFuY2UuZ3JhcGhpY3MuZ2w7XHJcblxyXG4gICAgICAgIHZhciB3aWR0aCAgPSBjYW52YXMuY2xpZW50V2lkdGgsIGhlaWdodCA9IGNhbnZhcy5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCB8IGdsLkRFUFRIX0JVRkZFUl9CSVQpO1xyXG4gICAgICAgIGdsLnZpZXdwb3J0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG5cclxuICAgICAgICB2YXIgcmVuZGVyID0gaW5zdGFuY2Uuc3VyZmFjZS5nZXRSZW5kZXIoY2FudmFzKTtcclxuICAgICAgICBpZiAocmVuZGVyKSByZW5kZXIoc3VyZmFjZSk7XHJcblxyXG4gICAgICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgICAgaWYgKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgZ2wucmVhZFBpeGVscygwLCAwLCB3aWR0aCwgaGVpZ2h0LCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBidWZmZXIpO1xyXG4gICAgICAgICAgICBpbWFnZURhdGEuZGF0YS5zZXQoYnVmZmVyKTtcclxuICAgICAgICAgICAgY29udGV4dC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMuYWRkKCdzY2VuZScsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGluc3RhbmNlLnNjZW5lID0ge1xyXG4gICAgICAgICAgICByb290OiBUcmVlTm9kZS5leHRlbmQoe30pXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIG1hdCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAgICAgICAgbWF0NC5yb3RhdGVZKG1hdCwgbWF0LCAwLjgpO1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5zY2VuZS5yb290LmFkZCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxyXG4gICAgICAgICAgICBwcmltaXRpdmU6IGluc3RhbmNlLmdyYXBoaWNzLmdsLlRSSUFOR0xFUyxcclxuICAgICAgICAgICAgbWVzaDogR0wuTWVzaC5jdWJlKCksXHJcbiAgICAgICAgICAgIG1vZGVsOiBtYXQsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBbJ2dyYXBoaWNzJ10pO1xyXG59KSgpKTtcclxuIl19
