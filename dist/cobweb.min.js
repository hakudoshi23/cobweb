!function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}e(Array.prototype,"unique",function(){for(var e=this.concat(),t=0;t<e.length;++t)for(var n=t+1;n<e.length;++n)e[t]===e[n]&&e.splice(n--,1);return e}),e(Array.prototype,"forEach",function(e){for(var t=0;t<this.length;t++)e(this[t],t,this)})}(),function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}function t(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}e(HTMLElement.prototype,"addClass",function(){var e,t;for(var n in arguments)e=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[],t=arguments[n]?arguments[n].trim().replace(/\s+/g," ").split(" "):[],this.className=e.concat(t).unique().join(" ")}),e(HTMLElement.prototype,"hasClass",function(){var e,t=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[];for(var n in arguments){e=arguments[n]?arguments[n].trim().replace(/\s+/g," ").split(" "):[];for(var r=0;r<e.length;r++){var o=e[r];if(t.indexOf(o)==-1)return!1}}return!0}),e(HTMLElement.prototype,"removeClass",function(){var e,t,n=0,r=function(t){n=e.indexOf(t),n!=-1&&e.splice(n,1)};for(var o in arguments)e=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[],t=arguments[o]?arguments[o].trim().replace(/\s+/g," ").split(" "):[],t.forEach(r),this.className=e.unique().join(" ")}),e(HTMLElement.prototype,"data",function(e,t){window.__data_cache||(window.__data_cache=new WeakMap);var n=window.__data_cache.get(this)||{};return void 0===t?e?n&&n[e]:n:(n[e]=t,window.__data_cache.set(this,n),this)}),e(HTMLElement.prototype,"setData",function(e){return window.__data_cache||(window.__data_cache=new WeakMap),window.__data_cache.set(this,e),this}),e(HTMLElement.prototype,"attr",function(e,t){if(void 0!==t)this.setAttribute(e,t);else{if(null!==t)return this.getAttribute(e);this.removeAttribute(e)}return this}),e(HTMLElement.prototype,"attrData",function(e,t){return this.attr("data-"+e,t)}),e(Element.prototype,"matches",Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(e){for(var t=(this.document||this.ownerDocument).querySelectorAll(e),n=t.length;--n>=0&&t.item(n)!==this;);return n>-1}),e(HTMLElement.prototype,"parent",function(e){if(!e)return this.parentElement;for(var t=this.parentElement;!t.matches(e);)t=t.parentElement;return t}),e(HTMLElement.prototype,"height",function(){if(1!=arguments.length)return this.clientHeight;var e=arguments[0];"number"==typeof e?this.style.height=e+"px":this.style.height=e}),e(HTMLElement.prototype,"width",function(){if(1!=arguments.length)return this.clientWidth;var e=arguments[0];"number"==typeof e?this.style.width=e+"px":this.style.width=e}),e(window,"guid",function(){return"GUID-"+t()+"-"+t()+"-"+t()}),e(HTMLElement.prototype,"guid",function(){var e=null,t=null;do e=window.guid(),t=document.querySelector("#"+e);while(t);return this.attr("id",e),e})}(),function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}window.extend=function(e,t){for(var n in t)if(n&&t.hasOwnProperty(n)){var r=t[n];"object"==typeof r?extend(e[n],t[n]):e[n]=t[n]}},e(Object,"clone",function(e){var t={};for(var n in e)if(e.hasOwnProperty(n)){var r=e[n];"object"==typeof r?t[n]=Object.clone(e[n]):t[n]=e[n]}return t})}(),function(){"use strict";var e=function(e,t){this.data=t||{},this.parent=e,this.children=[]};window.TreeNode=e,e.prototype.isRoot=function(){return!this.parent},e.prototype.add=function(e){var t=new this.constructor(this,e);return this.children.push(t),t},e.prototype.remove=function(e){return this.children.slice(e,1),this},e.prototype.dfs=function(e){for(var t=[],n=0;n<this.children.length;n++)(!e||e&&e(this.children[n]))&&t.push(this.children[n]),t.concat(this.children[n].dfs(e));return t},e.prototype.bfs=function(e){var t,n=[];for(t=0;t<this.children.length;t++)(!e||e&&e(this.children[t]))&&n.push(this.children[t]);for(t=0;t<this.children.length;t++)n.concat(this.children[t].bfs(e));return n},e.extend=function(t){var n=function(t,n){e.call(this,t,n)};return n.prototype=Object.create(e.prototype),n.prototype.constructor=n,extend(n.prototype,t),new n(null)}}(),function(){"use strict";var e=function(e){this.instance=e,this.listeners={}};e.prototype.trigger=function(){var e=arguments[0],t=this.listeners[e]||[];Array.prototype.splice.call(arguments,0,1);for(var n=0;n<t.length;n++)t[n].apply(null,arguments);this.instance.logger.debug(e,arguments)},e.prototype.on=function(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t)},e.prototype.off=function(e){delete this.listeners[e]},e.prototype.off=function(e,t){if(this.listeners[e]){var n=this.listeners[e];n.indexOf(t)>-1&&n.splice(index,1)}},window.EventHandler=e}(),function(){"use strict";var e=function(){},t=function(t,n){this.debug=n?console.debug.bind():e,this.info=n?console.info.bind():e,this.warn=console.warn.bind(),this.error=console.error.bind()};window.Logger=t}(),function(){"use strict";var e={container:{selector:"#cobweb",className:"cb-container"}},t=function(n){if(this.options=e,extend(this.options,n||{}),this.container=document.querySelector(this.options.container.selector),!this.container)throw new Error("Invalid container selector: '"+this.options.container.selector+"'");this.container.addClass(this.options.container.className),this.container.data("instance",this),this.logger=new Logger(this,!0),this.events=new EventHandler(this),t.prototype.modules.load(this)};window.Cobweb=t}(),function(){"use strict";function e(e){for(var t in e){var n=e[t];if(n.dependant||(n.dependant=[]),n.dependencies.length>0)for(var r=0;r<n.dependencies.length;r++){var o=e[n.dependencies[r]];o.dependant||(o.dependant=[]),o.dependant.push(t)}}}function t(e,t){var r=[],o=[];for(var i in t)0===t[i].dependencies.length&&r.push(i);for(;r.length>0;){var a=r[0];if(r.splice(0,1),t[a]){var s=t[a];o.push(a);for(var c=0;c<s.dependant.length;c++){var l=s.dependant[c];n(o,t[l])&&r.push(l)}}else e.events.trigger("modules.error.missing",a),e.logger.warning("Missing module '"+a+"'")}return Object.keys(t).length!==o.length&&(e.events.trigger("modules.error.cycle"),e.logger.error("Dependency cycle found in modules")),o}function n(e,t){for(var n=0;n<t.dependencies.length;n++)if(e.indexOf(t.dependencies[n])===-1)return!1;return!0}Cobweb.prototype.modules={all:{},add:function(e,t,n){n=n||[],this.all[e]={dependencies:n,init:t}},load:function(n){this.instance=n,e(this.all);for(var r=t(n,this.all),o=0;o<r.length;o++){var i=r[o];try{this.all[i].init(n),n.events.trigger("modules.loaded",i)}catch(e){n.logger.error("Loading module "+i,e),n.events.trigger("modules.error",i,e)}}n.events.trigger("modules.loaded.all",r)},print:function(e){if(e)for(var t in this.all){var n=this.all[t];e.logger.debug("Name: ",t),e.logger.debug("\tDependencies: ",n.dependencies),e.logger.debug("\tDependant: ",n.dependant)}else console.error('Error: "load" should be called before "print"')}}}(),function(){"use strict";function e(e,n){var r=t();e.append(r)}function t(){var e=document.createElement("div");return e.className="pane-header",e}Cobweb.prototype.modules.add("pane-header",function(t){t.events.on("pane.create",function(n){e(n,t)});for(var n=t.pane.container.querySelectorAll(".pane"),r=0;r<n.length;r++)e(n[r],t)},["pane-types"])}(),function(){"use strict";Cobweb.prototype.modules.add("pane-types",function(e){var t={all:{},add:function(e,t){this.all[e]=t},get:function(e){return this.all[e]},remove:function(e){delete this.all[e]},has:function(e){return!!this.all[e]}};e.events.on("pane.split",function(t,n){var r=t.attrData("pane-type");r&&e.pane.setType(n,r)}),e.pane.types=t,e.pane.setType=function(t,n){if(this.types.has(n)){var r=this.types.get(n);r.onPaneType(t,e);var o=t.querySelector(".pane-header");r.onCreateHeader(o,e),t.attrData("pane-type",n)}}},["pane"])}(),function(){"use strict";Cobweb.prototype.modules.add("pane",function(e){function t(t){e.events.trigger("pane.create",t)}function n(t,n){e.events.trigger("pane.split",t,n)}function r(t){e.events.trigger("pane.resize",t)}e.pane=new Pane({container:e.options.container.selector,separator:{size:3},callbacks:{onPaneCreate:t,onPaneSplit:n,onPaneResize:r}})})}(),function(){"use strict";function e(e,t){var r=document.createElement("canvas");e.append(r);var o={proj:mat4.create(),view:mat4.create()};mat4.perspective(o.proj,-45*DEG2RAD,r.width/r.height,.1,1e3),mat4.lookAt(o.view,[0,2,4],[0,0,0],[0,1,0]),mat4.scale(o.view,o.view,[1,1.2,1]),e.data("surface",o),n(e)}function t(e,t){var n=document.createElement("label");n.innerHTML="Surface Pane",e.appendChild(n)}function n(e){var t=e.querySelector("canvas"),n=t.getContext("2d"),r=e.querySelector(".pane-header"),o=r?r.height():0,i=e.width(),a=e.height()-o;e.data("buffer",new Uint8Array(i*a*4)),e.data("imgData",n.createImageData(i,a)),t.height=a,t.width=i;var s=e.data("surface");mat4.perspective(s.proj,-45*DEG2RAD,i/a,.1,1e3)}Cobweb.prototype.modules.add("surface",function(r){r.pane.types.add("surface",{onPaneType:e,onCreateHeader:t}),r.events.on("pane.resize",function(e){"surface"===e.attrData("pane-type")&&n(e)}),window.addEventListener("resize",function(e){for(var t=r.pane.container.querySelectorAll(".pane canvas"),o=0;o<t.length;o++)n(t[o].parentNode)});var o=document.querySelector(".pane");r.pane.setType(o,"surface"),r.pane.setRender(o,"solid")},["pane-types","surface-render"])}(),function(){"use strict";Cobweb.prototype.modules.add("object-interaction",function(e){e.interaction.add("object",{onMouseDown:function(t){e.logger.debug("onMouseDown",t)},onMouseUp:function(t){e.logger.debug("onMouseUp",t)},onMouseMove:function(t){e.logger.debug("onMouseMove",t)}})},["surface-render"])}(),function(){"use strict";Cobweb.prototype.modules.add("surface-interaction",function(e){e.pane.setInteraction=function(t,n){var r=e.interaction;r.has(n)&&t.attrData("surface-interaction",n)},e.pane.getInteraction=function(t){var n=e.interaction,r=t.attrData("surface-interaction");return n.get(r)},e.events.on("pane.split",function(e,t){t.attrData("surface-interaction",e.attrData("surface-interaction"))})},["interaction-mode"])}(),function(){"use strict";Cobweb.prototype.modules.add("render-solid",function(e){var t=new Shader("precision highp float;attribute vec3 a_vertex;attribute vec3 a_normal;varying vec3 v_normal;uniform mat4 u_mvp;uniform mat4 u_model;void main() {    v_normal = (u_model * vec4(a_normal,0.0)).xyz;    gl_Position = u_mvp * vec4(a_vertex,1.0);}","precision highp float;varying vec3 v_normal;uniform vec3 u_lightvector;uniform vec4 u_color;void main() {  vec3 N = normalize(v_normal);  gl_FragColor = u_color * max(0.0, dot(u_lightvector,N));}"),n=mat4.create(),r=mat4.create(),o={u_color:[1,1,1,1],u_lightvector:vec3.normalize(vec3.create(),[1,2,3]),u_model:null,u_mvp:r};e.graphics.renders.add("solid",function(i){for(var a=e.scene.root.dfs(),s=0;s<a.length;s++){var c=a[s].data;mat4.multiply(n,i.view,c.model),mat4.multiply(r,i.proj,n),o.u_model=c.model,t.uniforms(o).draw(c.mesh,c.primitive)}})},["graphics-render"])}(),function(){"use strict";Cobweb.prototype.modules.add("surface-render",function(e){e.pane.setRender=function(t,n){var r=e.graphics.renders;r.has(n)&&t.attrData("surface-render",n)},e.pane.getRender=function(t){var n=e.graphics.renders,r=t.attrData("surface-render");return n.get(r)},e.events.on("pane.split",function(e,t){t.attrData("surface-render",e.attrData("surface-render"))})},["graphics-render"])}(),function(){"use strict";Cobweb.prototype.modules.add("graphics-render",function(e){e.graphics.renders={all:{},add:function(e,t){this.all[e]=t},get:function(e){return this.all[e]},remove:function(e){delete this.all[e]},has:function(e){return!!this.all[e]}}},["graphics"])}(),function(){"use strict";function e(e,t){var n=t.parent(".pane"),r=n.data("imgData"),o=n.data("surface"),i=n.data("buffer"),a=e.graphics.gl,s=t.clientWidth,c=t.clientHeight;a.clear(a.COLOR_BUFFER_BIT|a.DEPTH_BUFFER_BIT),a.viewport(0,0,s,c);var l=e.pane.getRender(n);l&&l(o);var u=t.getContext("2d");u&&(a.readPixels(0,0,s,c,a.RGBA,a.UNSIGNED_BYTE,i),r.data.set(i),u.putImageData(r,0,0))}var t=function(t){this.instance=t,this.gl=GL.create({height:screen.height,width:screen.width}),this.gl.animate(),this.gl.ondraw=function(){for(var n=document.querySelectorAll("canvas"),r=0;r<n.length;r++)e(t,n[r])},this.gl.clearColor(.4,.4,.4,1),this.gl.enable(this.gl.DEPTH_TEST)};Cobweb.prototype.modules.add("graphics",function(e){e.graphics=new t(e)})}(),function(){"use strict";Cobweb.prototype.modules.add("interaction-mode",function(e){var t={all:{},add:function(e,t){this.all[e]=t},get:function(e){return this.all[e]},remove:function(e){delete this.all[e]},has:function(e){return!!this.all[e]}};e.interaction=t})}(),function(){"use strict";Cobweb.prototype.modules.add("scene",function(e){e.scene={root:TreeNode.extend({})};var t=mat4.create();mat4.rotateY(t,t,.8),e.scene.root.add({type:"object",primitive:e.graphics.gl.TRIANGLES,mesh:GL.Mesh.cube(),model:t})},["graphics"])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5LmpzIiwiaHRtbC5qcyIsIm9iai5qcyIsInRyZWUuanMiLCJldmVudHMuanMiLCJsb2dnZXIuanMiLCJjb2J3ZWIuanMiLCJtb2R1bGVzLmpzIiwicGFuZS9wYW5lLWhlYWRlci5qcyIsInBhbmUvcGFuZS10eXBlcy5qcyIsInBhbmUvcGFuZXMuanMiLCJwYW5lL3N1cmZhY2Uvc3VyZmFjZS5qcyIsInBhbmUvc3VyZmFjZS9pbnRlcmFjdGlvbi9vYmplY3QtaW50ZXJhY3Rpb24uanMiLCJwYW5lL3N1cmZhY2UvaW50ZXJhY3Rpb24vc3VyZmFjZS1pbnRlcmFjdGlvbi5qcyIsInBhbmUvc3VyZmFjZS9yZW5kZXIvcmVuZGVyLXNvbGlkLmpzIiwicGFuZS9zdXJmYWNlL3JlbmRlci9zdXJmYWNlLXJlbmRlci5qcyIsImdyYXBoaWMtcmVuZGVyLmpzIiwiZ3JhcGhpYy5qcyIsImludGVyYWN0aW9uLW1vZGVzLmpzIiwic2NlbmUuanMiXSwibmFtZXMiOlsic2FmZUV4dGVuZCIsInByb3RvdHlwZSIsInByb3BlcnR5IiwidmFsdWUiLCJBcnJheSIsImEiLCJ0aGlzIiwiY29uY2F0IiwiaSIsImxlbmd0aCIsImoiLCJzcGxpY2UiLCJjYWxsYmFjayIsInM0IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJIVE1MRWxlbWVudCIsIm9sZENsYXNzTmFtZXMiLCJuZXdDbGFzc05hbWVzIiwiYXJndW1lbnRzIiwiY2xhc3NOYW1lIiwidHJpbSIsInJlcGxhY2UiLCJzcGxpdCIsInVuaXF1ZSIsImpvaW4iLCJxdWVyeUNsYXNzTmFtZXMiLCJjdXJyZW50Q2xhc3NOYW1lcyIsImluZGV4IiwibmFtZSIsImluZGV4T2YiLCJyZW1vdmVDbGFzc05hbWVzIiwicmVtb3ZlRWFjaCIsImZvckVhY2giLCJhdHRyIiwid2luZG93IiwiX19kYXRhX2NhY2hlIiwiV2Vha01hcCIsImVsQXR0cnMiLCJnZXQiLCJ1bmRlZmluZWQiLCJzZXQiLCJkYXRhIiwic2V0QXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiRWxlbWVudCIsIm1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsInMiLCJtYXRjaGVzIiwiZG9jdW1lbnQiLCJvd25lckRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsIml0ZW0iLCJxdWVyeSIsInBhcmVudEVsZW1lbnQiLCJjdXJyZW50IiwiY2xpZW50SGVpZ2h0Iiwic3R5bGUiLCJoZWlnaHQiLCJjbGllbnRXaWR0aCIsIndpZHRoIiwiZ3VpZCIsIm92ZXJsYXAiLCJxdWVyeVNlbGVjdG9yIiwiZXh0ZW5kIiwiZGVmYXVsdHMiLCJwcm9wZXJ0aWVzIiwiaGFzT3duUHJvcGVydHkiLCJPYmplY3QiLCJvYmoiLCJuZXdPYmoiLCJjbG9uZSIsIlRyZWVOb2RlIiwicGFyZW50IiwiY2hpbGRyZW4iLCJpc1Jvb3QiLCJhZGQiLCJjaGlsZCIsImNvbnN0cnVjdG9yIiwicHVzaCIsInJlbW92ZSIsInNsaWNlIiwiZGZzIiwiY2hlY2siLCJvdXQiLCJiZnMiLCJfVHJlZU5vZGUiLCJjYWxsIiwiY3JlYXRlIiwiRXZlbnRIYW5kbGVyIiwiaW5zdGFuY2UiLCJsaXN0ZW5lcnMiLCJ0cmlnZ2VyIiwiYXBwbHkiLCJsb2dnZXIiLCJkZWJ1ZyIsIm9uIiwib2ZmIiwiYXJyYXkiLCJlbXB0eUZ1bmN0aW9uIiwiTG9nZ2VyIiwiaXNEZWJ1ZyIsImNvbnNvbGUiLCJiaW5kIiwiaW5mbyIsIndhcm4iLCJlcnJvciIsImRlZmF1bHRPcHRpb25zIiwiY29udGFpbmVyIiwic2VsZWN0b3IiLCJDb2J3ZWIiLCJvcHRpb25zIiwiRXJyb3IiLCJhZGRDbGFzcyIsImV2ZW50cyIsIm1vZHVsZXMiLCJsb2FkIiwiYWRkUmV2ZXJzZURlcGVuZGVuY2llcyIsIm1vZHVsZSIsImRlcGVuZGFudCIsImRlcGVuZGVuY2llcyIsImRlcFBsdWdpbiIsInRvcG9sb2dpY2FsU29ydCIsImNhbmRpZGF0ZXMiLCJzb3J0ZWROYW1lcyIsIm5leHROYW1lIiwiZGVwTmFtZSIsImFsbERlcGVuZGVuY2llc01ldCIsIndhcm5pbmciLCJrZXlzIiwibG9hZGVkVW50aWxOb3ciLCJhbGwiLCJpbml0IiwiZXgiLCJwcmludCIsIm9uQ3JlYXRlQ2FsbGJhY2siLCJwYW5lIiwiaGVhZGVyIiwiY3JlYXRlSGVhZGVyIiwiYXBwZW5kIiwiZGl2IiwiY3JlYXRlRWxlbWVudCIsInBhbmVzIiwicGFuZVR5cGVzIiwiY2FsbGJhY2tzIiwiaGFzIiwib2xkUGFuZSIsIm5ld1BhbmUiLCJvbGRUeXBlIiwiYXR0ckRhdGEiLCJzZXRUeXBlIiwidHlwZXMiLCJ0eXBlQ2FsbGJhY2tzIiwib25QYW5lVHlwZSIsInBhbmVIZWFkZXIiLCJvbkNyZWF0ZUhlYWRlciIsIm9uUGFuZUNyZWF0ZSIsIm9uUGFuZVNwbGl0Iiwib3JpZ2luIiwib25QYW5lUmVzaXplIiwiUGFuZSIsInNlcGFyYXRvciIsInNpemUiLCJvblN1cmZhY2VQYW5lVHlwZSIsImNhbnZhcyIsInByb2oiLCJtYXQ0IiwidmlldyIsInBlcnNwZWN0aXZlIiwiREVHMlJBRCIsImxvb2tBdCIsInNjYWxlIiwidXBkYXRlQ2FudmFzU2l6ZSIsIm9uQ3JlYXRlU3VyZmFjZUhlYWRlciIsImxhYmVsIiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsImhlYWRlckhlaWdodCIsIlVpbnQ4QXJyYXkiLCJjcmVhdGVJbWFnZURhdGEiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJzdXJmYWNlcyIsInBhcmVudE5vZGUiLCJyb290Iiwic2V0UmVuZGVyIiwiaW50ZXJhY3Rpb24iLCJvbk1vdXNlRG93biIsIm9uTW91c2VVcCIsIm9uTW91c2VNb3ZlIiwic2V0SW50ZXJhY3Rpb24iLCJpbnRlcmFjdGlvbnMiLCJnZXRJbnRlcmFjdGlvbiIsInNoYWRlciIsIlNoYWRlciIsInRlbXAiLCJtdnAiLCJ1bmlmb3JtcyIsInVfY29sb3IiLCJ1X2xpZ2h0dmVjdG9yIiwidmVjMyIsIm5vcm1hbGl6ZSIsInVfbW9kZWwiLCJ1X212cCIsImdyYXBoaWNzIiwicmVuZGVycyIsInN1cmZhY2UiLCJvYmpzIiwic2NlbmUiLCJtdWx0aXBseSIsIm1vZGVsIiwiZHJhdyIsIm1lc2giLCJwcmltaXRpdmUiLCJnZXRSZW5kZXIiLCJkcmF3UmVuZGVyVGFyZ2V0IiwiaW1hZ2VEYXRhIiwiYnVmZmVyIiwiZ2wiLCJjbGVhciIsIkNPTE9SX0JVRkZFUl9CSVQiLCJERVBUSF9CVUZGRVJfQklUIiwidmlld3BvcnQiLCJyZW5kZXIiLCJyZWFkUGl4ZWxzIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJwdXRJbWFnZURhdGEiLCJHcmFwaGljcyIsIkdMIiwic2NyZWVuIiwiYW5pbWF0ZSIsIm9uZHJhdyIsInJlbmRlclRhcmdldHMiLCJjbGVhckNvbG9yIiwiZW5hYmxlIiwiREVQVEhfVEVTVCIsImludGVyYWN0aW9uTW9kZXMiLCJtYXQiLCJyb3RhdGVZIiwidHlwZSIsIlRSSUFOR0xFUyIsIk1lc2giLCJjdWJlIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUNBLFlBZUEsU0FBQUEsR0FBQUMsRUFBQUMsRUFBQUMsR0FDQUYsRUFBQUMsS0FBQUQsRUFBQUMsR0FBQUMsR0FkQUgsRUFBQUksTUFBQUgsVUFBQSxTQUFBLFdBRUEsSUFBQSxHQURBSSxHQUFBQyxLQUFBQyxTQUNBQyxFQUFBLEVBQUFBLEVBQUFILEVBQUFJLFNBQUFELEVBQ0EsSUFBQSxHQUFBRSxHQUFBRixFQUFBLEVBQUFFLEVBQUFMLEVBQUFJLFNBQUFDLEVBQ0FMLEVBQUFHLEtBQUFILEVBQUFLLElBQUFMLEVBQUFNLE9BQUFELElBQUEsRUFDQSxPQUFBTCxLQUdBTCxFQUFBSSxNQUFBSCxVQUFBLFVBQUEsU0FBQVcsR0FDQSxJQUFBLEdBQUFKLEdBQUEsRUFBQUEsRUFBQUYsS0FBQUcsT0FBQUQsSUFD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dkMsSUFBQSxtQkFBQSxTQUFBYyxHQUNBLEdBQUFxSixJQUNBNUcsT0FDQXZELElBQUEsU0FBQXBELEVBQUF3SCxHQUNBbEosS0FBQXFJLElBQUEzRyxHQUFBd0gsR0FFQTlHLElBQUEsU0FBQVYsR0FDQSxNQUFBMUIsTUFBQXFJLElBQUEzRyxJQUVBd0QsT0FBQSxTQUFBeEQsU0FDQTFCLE1BQUFxSSxJQUFBM0csSUFFQXlILElBQUEsU0FBQXpILEdBQ0EsUUFBQTFCLEtBQUFxSSxJQUFBM0csSUFJQWtFLEdBQUFrRyxZQUFBbUQsT0NwQkEsV0FDQSxZQUVBakksUUFBQXJILFVBQUEwSCxRQUFBdkMsSUFBQSxRQUFBLFNBQUFjLEdBQ0FBLEVBQUF3SCxPQUNBeEIsS0FBQWxILFNBQUFSLFdBR0EsSUFBQWdMLEdBQUExRSxLQUFBOUUsUUFDQThFLE1BQUEyRSxRQUFBRCxFQUFBQSxFQUFBLElBRUF0SixFQUFBd0gsTUFBQXhCLEtBQUE5RyxLQUNBc0ssS0FBQSxTQUNBM0IsVUFBQTdILEVBQUFvSCxTQUFBYyxHQUFBdUIsVUFDQTdCLEtBQUFpQixHQUFBYSxLQUFBQyxPQUNBakMsTUFBQTRCLE1BRUEiLCJmaWxlIjoiY29id2ViLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIigoZnVuY3Rpb24oKXtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEFycmF5LnByb3RvdHlwZSwgJ3VuaXF1ZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBhID0gdGhpcy5jb25jYXQoKTtcclxuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7ICsraSlcclxuICAgICAgICAgICAgZm9yKHZhciBqID0gaSArIDE7IGogPCBhLmxlbmd0aDsgKytqKVxyXG4gICAgICAgICAgICAgICAgaWYoYVtpXSA9PT0gYVtqXSkgYS5zcGxpY2Uoai0tLCAxKTtcclxuICAgICAgICByZXR1cm4gYTtcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoQXJyYXkucHJvdG90eXBlLCAnZm9yRWFjaCcsIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICBjYWxsYmFjayh0aGlzW2ldLCBpLCB0aGlzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhZmVFeHRlbmQocHJvdG90eXBlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcclxuICAgICAgICBpZighcHJvdG90eXBlW3Byb3BlcnR5XSkgcHJvdG90eXBlW3Byb3BlcnR5XSA9IHZhbHVlO1xyXG4gICAgfVxyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbigpe1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnYWRkQ2xhc3MnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG9sZENsYXNzTmFtZXMsIG5ld0NsYXNzTmFtZXM7XHJcbiAgICAgICAgZm9yKHZhciBpIGluIGFyZ3VtZW50cyl7XHJcbiAgICAgICAgICAgIG9sZENsYXNzTmFtZXMgPSAhdGhpcy5jbGFzc05hbWUgPyBbXSA6IHRoaXMuY2xhc3NOYW1lLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csICcgJykuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgbmV3Q2xhc3NOYW1lcyA9ICFhcmd1bWVudHNbaV0gPyBbXSA6IGFyZ3VtZW50c1tpXS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gb2xkQ2xhc3NOYW1lcy5jb25jYXQobmV3Q2xhc3NOYW1lcykudW5pcXVlKCkuam9pbignICcpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnaGFzQ2xhc3MnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHF1ZXJ5Q2xhc3NOYW1lcywgY3VycmVudENsYXNzTmFtZXMgPSAhdGhpcy5jbGFzc05hbWUgPyBbXSA6IHRoaXMuY2xhc3NOYW1lLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csICcgJykuc3BsaXQoJyAnKTtcclxuICAgICAgICBmb3IodmFyIGkgaW4gYXJndW1lbnRzKXtcclxuICAgICAgICAgICAgcXVlcnlDbGFzc05hbWVzID0gIWFyZ3VtZW50c1tpXSA/IFtdIDogYXJndW1lbnRzW2ldLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csICcgJykuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHF1ZXJ5Q2xhc3NOYW1lcy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gcXVlcnlDbGFzc05hbWVzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q2xhc3NOYW1lcy5pbmRleE9mKG5hbWUpID09IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAncmVtb3ZlQ2xhc3MnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gMCwgY3VycmVudENsYXNzTmFtZXMsIHJlbW92ZUNsYXNzTmFtZXM7XHJcbiAgICAgICAgdmFyIHJlbW92ZUVhY2ggPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICBpbmRleCA9IGN1cnJlbnRDbGFzc05hbWVzLmluZGV4T2YobmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCAhPSAtMSlcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRDbGFzc05hbWVzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IodmFyIGkgaW4gYXJndW1lbnRzKXtcclxuICAgICAgICAgICAgY3VycmVudENsYXNzTmFtZXMgPSAhdGhpcy5jbGFzc05hbWUgPyBbXSA6IHRoaXMuY2xhc3NOYW1lLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csICcgJykuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgcmVtb3ZlQ2xhc3NOYW1lcyA9ICFhcmd1bWVudHNbaV0gPyBbXSA6IGFyZ3VtZW50c1tpXS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzTmFtZXMuZm9yRWFjaChyZW1vdmVFYWNoKTtcclxuICAgICAgICAgICAgdGhpcy5jbGFzc05hbWUgPSBjdXJyZW50Q2xhc3NOYW1lcy51bmlxdWUoKS5qb2luKCcgJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgc2FmZUV4dGVuZChIVE1MRWxlbWVudC5wcm90b3R5cGUsICdkYXRhJywgZnVuY3Rpb24gKGF0dHIsIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCF3aW5kb3cuX19kYXRhX2NhY2hlKSB3aW5kb3cuX19kYXRhX2NhY2hlID0gbmV3IFdlYWtNYXAoKTtcclxuICAgICAgICB2YXIgZWxBdHRycyA9IHdpbmRvdy5fX2RhdGFfY2FjaGUuZ2V0KHRoaXMpIHx8IHt9O1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGVsQXR0cnNbYXR0cl0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgd2luZG93Ll9fZGF0YV9jYWNoZS5zZXQodGhpcywgZWxBdHRycyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGF0dHIpIHJldHVybiBlbEF0dHJzICYmIGVsQXR0cnNbYXR0cl07XHJcbiAgICAgICAgICAgIGVsc2UgcmV0dXJuIGVsQXR0cnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc2FmZUV4dGVuZChIVE1MRWxlbWVudC5wcm90b3R5cGUsICdzZXREYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBpZiAoIXdpbmRvdy5fX2RhdGFfY2FjaGUpIHdpbmRvdy5fX2RhdGFfY2FjaGUgPSBuZXcgV2Vha01hcCgpO1xyXG4gICAgICAgIHdpbmRvdy5fX2RhdGFfY2FjaGUuc2V0KHRoaXMsIGRhdGEpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc2FmZUV4dGVuZChIVE1MRWxlbWVudC5wcm90b3R5cGUsICdhdHRyJywgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcclxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gbnVsbClcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ2F0dHJEYXRhJywgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0cignZGF0YS0nICsgbmFtZSwgdmFsdWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc2FmZUV4dGVuZChFbGVtZW50LnByb3RvdHlwZSwgJ21hdGNoZXMnLFxyXG4gICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXNTZWxlY3RvciB8fFxyXG4gICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm1vek1hdGNoZXNTZWxlY3RvciB8fFxyXG4gICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8XHJcbiAgICAgICAgRWxlbWVudC5wcm90b3R5cGUub01hdGNoZXNTZWxlY3RvciB8fFxyXG4gICAgICAgIEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxyXG4gICAgICAgIGZ1bmN0aW9uKHMpIHtcclxuICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSAodGhpcy5kb2N1bWVudCB8fCB0aGlzLm93bmVyRG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwocyksXHJcbiAgICAgICAgICAgICAgICBpID0gbWF0Y2hlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHdoaWxlICgtLWkgPj0gMCAmJiBtYXRjaGVzLml0ZW0oaSkgIT09IHRoaXMpIHt9XHJcbiAgICAgICAgICAgIHJldHVybiBpID4gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ3BhcmVudCcsIGZ1bmN0aW9uIChxdWVyeSkge1xyXG4gICAgICAgIGlmICghcXVlcnkpIHJldHVybiB0aGlzLnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgd2hpbGUgKCFjdXJyZW50Lm1hdGNoZXMocXVlcnkpKVxyXG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50O1xyXG4gICAgfSk7XHJcblxyXG4gICAgc2FmZUV4dGVuZChIVE1MRWxlbWVudC5wcm90b3R5cGUsICdoZWlnaHQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHNbMF07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHlsZS5oZWlnaHQgPSB2YWx1ZSArICdweCc7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUuaGVpZ2h0ID0gdmFsdWU7XHJcbiAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsaWVudEhlaWdodDtcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnd2lkdGgnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHNbMF07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHlsZS53aWR0aCA9IHZhbHVlICsgJ3B4JztcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHlsZS53aWR0aCA9IHZhbHVlO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRXaWR0aDtcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQod2luZG93LCAnZ3VpZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJ0dVSUQtJyArIHM0KCkgKyAnLScgKyBzNCgpICsgJy0nICsgczQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnZ3VpZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZ3VpZCA9IG51bGwsIG92ZXJsYXAgPSBudWxsO1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgZ3VpZCA9IHdpbmRvdy5ndWlkKCk7XHJcbiAgICAgICAgICAgIG92ZXJsYXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIGd1aWQpO1xyXG4gICAgICAgIH0gd2hpbGUob3ZlcmxhcCk7XHJcbiAgICAgICAgdGhpcy5hdHRyKCdpZCcsIGd1aWQpO1xyXG4gICAgICAgIHJldHVybiBndWlkO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gc2FmZUV4dGVuZChwcm90b3R5cGUsIHByb3BlcnR5LCB2YWx1ZSkge1xyXG4gICAgICAgIGlmKCFwcm90b3R5cGVbcHJvcGVydHldKSBwcm90b3R5cGVbcHJvcGVydHldID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gczQoKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApXHJcbiAgICAgICAgICAgIC50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpO1xyXG4gICAgfVxyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbigpe1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHdpbmRvdy5leHRlbmQgPSBmdW5jdGlvbiAoZGVmYXVsdHMsIHByb3BlcnRpZXMpIHtcclxuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBwcm9wZXJ0aWVzKVxyXG4gICAgICAgICAgICBpZiAocHJvcGVydHkgJiYgcHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHByb3BlcnRpZXNbcHJvcGVydHldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpXHJcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKGRlZmF1bHRzW3Byb3BlcnR5XSwgcHJvcGVydGllc1twcm9wZXJ0eV0pO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzW3Byb3BlcnR5XSA9IHByb3BlcnRpZXNbcHJvcGVydHldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHNhZmVFeHRlbmQoT2JqZWN0LCAnY2xvbmUnLCBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgdmFyIG5ld09iaiA9IHt9O1xyXG4gICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIG9iailcclxuICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IG9ialtwcm9wZXJ0eV07XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JylcclxuICAgICAgICAgICAgICAgICAgICBuZXdPYmpbcHJvcGVydHldID0gT2JqZWN0LmNsb25lKG9ialtwcm9wZXJ0eV0pO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIG5ld09ialtwcm9wZXJ0eV0gPSBvYmpbcHJvcGVydHldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ld09iajtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhZmVFeHRlbmQocHJvdG90eXBlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcclxuICAgICAgICBpZighcHJvdG90eXBlW3Byb3BlcnR5XSkgcHJvdG90eXBlW3Byb3BlcnR5XSA9IHZhbHVlO1xyXG4gICAgfVxyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFRyZWVOb2RlID0gZnVuY3Rpb24gKHBhcmVudCwgZGF0YSkge1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGEgfHwge307XHJcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xyXG4gICAgfTtcclxuXHJcbiAgICB3aW5kb3cuVHJlZU5vZGUgPSBUcmVlTm9kZTtcclxuXHJcbiAgICBUcmVlTm9kZS5wcm90b3R5cGUuaXNSb290ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5wYXJlbnQ7XHJcbiAgICB9O1xyXG5cclxuICAgIFRyZWVOb2RlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHZhciBjaGlsZCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMsIGRhdGEpO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XHJcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xyXG4gICAgfTtcclxuXHJcbiAgICBUcmVlTm9kZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5zbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIFRyZWVOb2RlLnByb3RvdHlwZS5kZnMgPSBmdW5jdGlvbiAoY2hlY2spIHtcclxuICAgICAgICB2YXIgb3V0ID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICghY2hlY2sgfHwgKGNoZWNrICYmIGNoZWNrKHRoaXMuY2hpbGRyZW5baV0pKSlcclxuICAgICAgICAgICAgICAgIG91dC5wdXNoKHRoaXMuY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICBvdXQuY29uY2F0KHRoaXMuY2hpbGRyZW5baV0uZGZzKGNoZWNrKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9O1xyXG5cclxuICAgIFRyZWVOb2RlLnByb3RvdHlwZS5iZnMgPSBmdW5jdGlvbiAoY2hlY2spIHtcclxuICAgICAgICB2YXIgb3V0ID0gW10sIGk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIGlmICghY2hlY2sgfHwgKGNoZWNrICYmIGNoZWNrKHRoaXMuY2hpbGRyZW5baV0pKSlcclxuICAgICAgICAgICAgICAgIG91dC5wdXNoKHRoaXMuY2hpbGRyZW5baV0pO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICBvdXQuY29uY2F0KHRoaXMuY2hpbGRyZW5baV0uYmZzKGNoZWNrKSk7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH07XHJcblxyXG4gICAgVHJlZU5vZGUuZXh0ZW5kID0gZnVuY3Rpb24gKGRlZmF1bHRzKSB7XHJcbiAgICAgICAgdmFyIF9UcmVlTm9kZSA9IGZ1bmN0aW9uIChwYXJlbnQsIGRhdGEpIHtcclxuICAgICAgICAgICAgVHJlZU5vZGUuY2FsbCh0aGlzLCBwYXJlbnQsIGRhdGEpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgX1RyZWVOb2RlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoVHJlZU5vZGUucHJvdG90eXBlKTtcclxuICAgICAgICBfVHJlZU5vZGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gX1RyZWVOb2RlO1xyXG4gICAgICAgIGV4dGVuZChfVHJlZU5vZGUucHJvdG90eXBlLCBkZWZhdWx0cyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBfVHJlZU5vZGUobnVsbCk7XHJcbiAgICB9O1xyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgRXZlbnRIYW5kbGVyID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlO1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0ge307XHJcbiAgICB9O1xyXG5cclxuICAgIEV2ZW50SGFuZGxlci5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBuYW1lID0gYXJndW1lbnRzWzBdO1xyXG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVyc1tuYW1lXSB8fCBbXTtcclxuICAgICAgICBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoYXJndW1lbnRzLCAwLCAxKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZS5sb2dnZXIuZGVidWcobmFtZSwgYXJndW1lbnRzKTtcclxuICAgIH07XHJcblxyXG4gICAgRXZlbnRIYW5kbGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKG5hbWUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmxpc3RlbmVyc1tuYW1lXSkgdGhpcy5saXN0ZW5lcnNbbmFtZV0gPSBbXTtcclxuICAgICAgICB0aGlzLmxpc3RlbmVyc1tuYW1lXS5wdXNoKGNhbGxiYWNrKTtcclxuICAgIH07XHJcblxyXG4gICAgRXZlbnRIYW5kbGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMubGlzdGVuZXJzW25hbWVdO1xyXG4gICAgfTtcclxuXHJcbiAgICBFdmVudEhhbmRsZXIucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uKG5hbWUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubGlzdGVuZXJzW25hbWVdKSB7XHJcbiAgICAgICAgICAgIHZhciBhcnJheSA9IHRoaXMubGlzdGVuZXJzW25hbWVdO1xyXG4gICAgICAgICAgICBpZiAoYXJyYXkuaW5kZXhPZihjYWxsYmFjaykgPiAtMSkgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHdpbmRvdy5FdmVudEhhbmRsZXIgPSBFdmVudEhhbmRsZXI7XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uKCl7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiAoKSB7fTtcclxuXHJcbiAgICB2YXIgTG9nZ2VyID0gZnVuY3Rpb24gKGluc3RhbmNlLCBpc0RlYnVnKSB7XHJcbiAgICAgICAgdGhpcy5kZWJ1ZyA9IGlzRGVidWcgPyBjb25zb2xlLmRlYnVnLmJpbmQoKSA6IGVtcHR5RnVuY3Rpb247XHJcblxyXG4gICAgICAgIHRoaXMuaW5mbyA9IGlzRGVidWcgPyBjb25zb2xlLmluZm8uYmluZCgpIDogZW1wdHlGdW5jdGlvbjtcclxuXHJcbiAgICAgICAgdGhpcy53YXJuID0gY29uc29sZS53YXJuLmJpbmQoKTtcclxuXHJcbiAgICAgICAgdGhpcy5lcnJvciA9IGNvbnNvbGUuZXJyb3IuYmluZCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB3aW5kb3cuTG9nZ2VyID0gTG9nZ2VyO1xyXG59KSgpKTtcclxuIiwiKGZ1bmN0aW9uKCl7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xyXG4gICAgICAgIGNvbnRhaW5lcjoge1xyXG4gICAgICAgICAgICBzZWxlY3RvcjogJyNjb2J3ZWInLFxyXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdjYi1jb250YWluZXInXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgQ29id2ViID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcclxuICAgICAgICBleHRlbmQodGhpcy5vcHRpb25zLCBvcHRpb25zIHx8IHt9KTtcclxuXHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMub3B0aW9ucy5jb250YWluZXIuc2VsZWN0b3IpO1xyXG4gICAgICAgIGlmICghdGhpcy5jb250YWluZXIpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb250YWluZXIgc2VsZWN0b3I6IFxcJycgK1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmNvbnRhaW5lci5zZWxlY3RvciArICdcXCcnKTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuY29udGFpbmVyLmNsYXNzTmFtZSk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuZGF0YSgnaW5zdGFuY2UnLCB0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBuZXcgTG9nZ2VyKHRoaXMsIHRydWUpO1xyXG4gICAgICAgIHRoaXMuZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcih0aGlzKTtcclxuICAgICAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMubG9hZCh0aGlzKTtcclxuICAgIH07XHJcblxyXG4gICAgd2luZG93LkNvYndlYiA9IENvYndlYjtcclxufSgpKTtcclxuIiwiKChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzID0ge1xyXG4gICAgICAgIGFsbDoge30sXHJcbiAgICAgICAgYWRkOiBmdW5jdGlvbiAobmFtZSwgaW5pdCwgZGVwZW5kZW5jaWVzKSB7XHJcbiAgICAgICAgICAgIGRlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcyB8fCBbXTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYWxsW25hbWVdID0ge1xyXG4gICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzOiBkZXBlbmRlbmNpZXMsXHJcbiAgICAgICAgICAgICAgICBpbml0OiBpbml0XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsb2FkOiBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlO1xyXG4gICAgICAgICAgICBhZGRSZXZlcnNlRGVwZW5kZW5jaWVzKHRoaXMuYWxsKTtcclxuICAgICAgICAgICAgdmFyIHNvcnRlZE5hbWVzID0gdG9wb2xvZ2ljYWxTb3J0KGluc3RhbmNlLCB0aGlzLmFsbCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc29ydGVkTmFtZXMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHNvcnRlZE5hbWVzW2ldO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFsbFtuYW1lXS5pbml0KGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5ldmVudHMudHJpZ2dlcignbW9kdWxlcy5sb2FkZWQnLCBuYW1lKTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UubG9nZ2VyLmVycm9yKCdMb2FkaW5nIG1vZHVsZSAnICsgbmFtZSwgZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLmV2ZW50cy50cmlnZ2VyKCdtb2R1bGVzLmVycm9yJywgbmFtZSwgZXgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmV2ZW50cy50cmlnZ2VyKCdtb2R1bGVzLmxvYWRlZC5hbGwnLCBzb3J0ZWROYW1lcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwcmludDogZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLmFsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2R1bGUgPSB0aGlzLmFsbFtuYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZGVidWcoJ05hbWU6ICcsIG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLmxvZ2dlci5kZWJ1ZygnXFx0RGVwZW5kZW5jaWVzOiAnLCBtb2R1bGUuZGVwZW5kZW5jaWVzKTtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZGVidWcoJ1xcdERlcGVuZGFudDogJywgbW9kdWxlLmRlcGVuZGFudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvcjogXCJsb2FkXCIgc2hvdWxkIGJlIGNhbGxlZCBiZWZvcmUgXCJwcmludFwiJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGFkZFJldmVyc2VEZXBlbmRlbmNpZXMgKG1vZHVsZXMpIHtcclxuICAgICAgICBmb3IgKHZhciBuYW1lIGluIG1vZHVsZXMpIHtcclxuICAgICAgICAgICAgdmFyIG1vZHVsZSA9IG1vZHVsZXNbbmFtZV07XHJcbiAgICAgICAgICAgIGlmICghbW9kdWxlLmRlcGVuZGFudCkgbW9kdWxlLmRlcGVuZGFudCA9IFtdO1xyXG4gICAgICAgICAgICBpZiAobW9kdWxlLmRlcGVuZGVuY2llcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5kZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVwUGx1Z2luID0gbW9kdWxlc1ttb2R1bGUuZGVwZW5kZW5jaWVzW2ldXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWRlcFBsdWdpbi5kZXBlbmRhbnQpIGRlcFBsdWdpbi5kZXBlbmRhbnQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBkZXBQbHVnaW4uZGVwZW5kYW50LnB1c2gobmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdG9wb2xvZ2ljYWxTb3J0IChpbnN0YW5jZSwgbW9kdWxlcykge1xyXG4gICAgICAgIHZhciBjYW5kaWRhdGVzID0gW10sIHNvcnRlZE5hbWVzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBtb2R1bGVzKVxyXG4gICAgICAgICAgICBpZiAobW9kdWxlc1tuYW1lXS5kZXBlbmRlbmNpZXMubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgY2FuZGlkYXRlcy5wdXNoKG5hbWUpO1xyXG4gICAgICAgIHdoaWxlIChjYW5kaWRhdGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIG5leHROYW1lID0gY2FuZGlkYXRlc1swXTtcclxuICAgICAgICAgICAgY2FuZGlkYXRlcy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgICAgIGlmIChtb2R1bGVzW25leHROYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vZHVsZSA9IG1vZHVsZXNbbmV4dE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgc29ydGVkTmFtZXMucHVzaChuZXh0TmFtZSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5kZXBlbmRhbnQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVwTmFtZSA9IG1vZHVsZS5kZXBlbmRhbnRbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbERlcGVuZGVuY2llc01ldChzb3J0ZWROYW1lcywgbW9kdWxlc1tkZXBOYW1lXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZXMucHVzaChkZXBOYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmV2ZW50cy50cmlnZ2VyKCdtb2R1bGVzLmVycm9yLm1pc3NpbmcnLCBuZXh0TmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIud2FybmluZygnTWlzc2luZyBtb2R1bGUgXFwnJyArIG5leHROYW1lICsgJ1xcJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhtb2R1bGVzKS5sZW5ndGggIT09IHNvcnRlZE5hbWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5ldmVudHMudHJpZ2dlcignbW9kdWxlcy5lcnJvci5jeWNsZScpO1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZXJyb3IoJ0RlcGVuZGVuY3kgY3ljbGUgZm91bmQgaW4gbW9kdWxlcycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc29ydGVkTmFtZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWxsRGVwZW5kZW5jaWVzTWV0IChsb2FkZWRVbnRpbE5vdywgbW9kdWxlKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUuZGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICBpZiAobG9hZGVkVW50aWxOb3cuaW5kZXhPZihtb2R1bGUuZGVwZW5kZW5jaWVzW2ldKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUubW9kdWxlcy5hZGQoJ3BhbmUtaGVhZGVyJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UuZXZlbnRzLm9uKCdwYW5lLmNyZWF0ZScsIGZ1bmN0aW9uIChwYW5lKSB7XHJcbiAgICAgICAgICAgIG9uQ3JlYXRlQ2FsbGJhY2socGFuZSwgaW5zdGFuY2UpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgcGFuZXMgPSBpbnN0YW5jZS5wYW5lLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcucGFuZScpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFuZXMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIG9uQ3JlYXRlQ2FsbGJhY2socGFuZXNbaV0sIGluc3RhbmNlKTtcclxuICAgIH0sIFsncGFuZS10eXBlcyddKTtcclxuXHJcbiAgICBmdW5jdGlvbiBvbkNyZWF0ZUNhbGxiYWNrIChwYW5lLCBpbnN0YW5jZSkge1xyXG4gICAgICAgIHZhciBoZWFkZXIgPSBjcmVhdGVIZWFkZXIoKTtcclxuICAgICAgICBwYW5lLmFwcGVuZChoZWFkZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZUhlYWRlciAoKSB7XHJcbiAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGRpdi5jbGFzc05hbWUgPSAncGFuZS1oZWFkZXInO1xyXG4gICAgICAgIHJldHVybiBkaXY7XHJcbiAgICB9XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMuYWRkKCdwYW5lLXR5cGVzJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgdmFyIHBhbmVUeXBlcyA9IHtcclxuICAgICAgICAgICAgYWxsOiB7fSxcclxuICAgICAgICAgICAgYWRkOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFsbFtuYW1lXSA9IGNhbGxiYWNrcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWxsW25hbWVdO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5hbGxbbmFtZV07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGhhczogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhIXRoaXMuYWxsW25hbWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UuZXZlbnRzLm9uKCdwYW5lLnNwbGl0JywgZnVuY3Rpb24gKG9sZFBhbmUsIG5ld1BhbmUpIHtcclxuICAgICAgICAgICAgdmFyIG9sZFR5cGUgPSBvbGRQYW5lLmF0dHJEYXRhKCdwYW5lLXR5cGUnKTtcclxuICAgICAgICAgICAgaWYgKG9sZFR5cGUpIGluc3RhbmNlLnBhbmUuc2V0VHlwZShuZXdQYW5lLCBvbGRUeXBlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UucGFuZS50eXBlcyA9IHBhbmVUeXBlcztcclxuXHJcbiAgICAgICAgaW5zdGFuY2UucGFuZS5zZXRUeXBlID0gZnVuY3Rpb24gKHBhbmUsIG5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudHlwZXMuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdHlwZUNhbGxiYWNrcyA9IHRoaXMudHlwZXMuZ2V0KG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgdHlwZUNhbGxiYWNrcy5vblBhbmVUeXBlKHBhbmUsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIHZhciBwYW5lSGVhZGVyID0gcGFuZS5xdWVyeVNlbGVjdG9yKCcucGFuZS1oZWFkZXInKTtcclxuICAgICAgICAgICAgICAgIHR5cGVDYWxsYmFja3Mub25DcmVhdGVIZWFkZXIocGFuZUhlYWRlciwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgcGFuZS5hdHRyRGF0YSgncGFuZS10eXBlJywgbmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSwgWydwYW5lJ10pO1xyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzLmFkZCgncGFuZScsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGluc3RhbmNlLnBhbmUgPSBuZXcgUGFuZSh7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lcjogaW5zdGFuY2Uub3B0aW9ucy5jb250YWluZXIuc2VsZWN0b3IsXHJcbiAgICAgICAgICAgIHNlcGFyYXRvcjoge1xyXG4gICAgICAgICAgICAgICAgc2l6ZTogM1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjYWxsYmFja3M6IHtcclxuICAgICAgICAgICAgICAgIG9uUGFuZUNyZWF0ZTogb25QYW5lQ3JlYXRlLFxyXG4gICAgICAgICAgICAgICAgb25QYW5lU3BsaXQ6IG9uUGFuZVNwbGl0LFxyXG4gICAgICAgICAgICAgICAgb25QYW5lUmVzaXplOiBvblBhbmVSZXNpemUsXHJcbiAgICAgICAgICAgICAgICAvL29uUGFuZU1lcmdlOiBvblBhbmVNZXJnZSxcclxuICAgICAgICAgICAgICAgIC8vb25QYW5lRGVzdHJveTogb25QYW5lRGVzdHJveSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBvblBhbmVDcmVhdGUgKHBhbmUpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UuZXZlbnRzLnRyaWdnZXIoJ3BhbmUuY3JlYXRlJywgcGFuZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBvblBhbmVTcGxpdCAob3JpZ2luLCBuZXdQYW5lKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmV2ZW50cy50cmlnZ2VyKCdwYW5lLnNwbGl0Jywgb3JpZ2luLCBuZXdQYW5lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9uUGFuZVJlc2l6ZSAocGFuZSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5ldmVudHMudHJpZ2dlcigncGFuZS5yZXNpemUnLCBwYW5lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9uUGFuZU1lcmdlIChtZXJnZXIsIHRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ29uUGFuZU1lcmdlJywgbWVyZ2VyLCB0b1JlbW92ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBvblBhbmVEZXN0cm95IChwYW5lKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ29uUGFuZURlc3Ryb3knLCBwYW5lKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUubW9kdWxlcy5hZGQoJ3N1cmZhY2UnLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBpbnN0YW5jZS5wYW5lLnR5cGVzLmFkZCgnc3VyZmFjZScsIHtcclxuICAgICAgICAgICAgb25QYW5lVHlwZTogb25TdXJmYWNlUGFuZVR5cGUsXHJcbiAgICAgICAgICAgIG9uQ3JlYXRlSGVhZGVyOiBvbkNyZWF0ZVN1cmZhY2VIZWFkZXJcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UuZXZlbnRzLm9uKCdwYW5lLnJlc2l6ZScsIGZ1bmN0aW9uIChwYW5lKSB7XHJcbiAgICAgICAgICAgIGlmIChwYW5lLmF0dHJEYXRhKCdwYW5lLXR5cGUnKSA9PT0gJ3N1cmZhY2UnKVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlQ2FudmFzU2l6ZShwYW5lKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICB2YXIgc3VyZmFjZXMgPSBpbnN0YW5jZS5wYW5lLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcucGFuZSBjYW52YXMnKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdXJmYWNlcy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUNhbnZhc1NpemUoc3VyZmFjZXNbaV0ucGFyZW50Tm9kZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHZhciByb290ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhbmUnKTtcclxuICAgICAgICBpbnN0YW5jZS5wYW5lLnNldFR5cGUocm9vdCwgJ3N1cmZhY2UnKTtcclxuICAgICAgICBpbnN0YW5jZS5wYW5lLnNldFJlbmRlcihyb290LCAnc29saWQnKTtcclxuICAgIH0sIFsncGFuZS10eXBlcycsICdzdXJmYWNlLXJlbmRlciddKTtcclxuXHJcbiAgICBmdW5jdGlvbiBvblN1cmZhY2VQYW5lVHlwZSAocGFuZSwgaW5zdGFuY2UpIHtcclxuICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgICAgcGFuZS5hcHBlbmQoY2FudmFzKTtcclxuXHJcbiAgICAgICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICAgICAgIHByb2o6IG1hdDQuY3JlYXRlKCksXHJcbiAgICAgICAgICAgIHZpZXc6IG1hdDQuY3JlYXRlKClcclxuICAgICAgICB9O1xyXG4gICAgICAgIG1hdDQucGVyc3BlY3RpdmUoZGF0YS5wcm9qLCAtNDUgKiBERUcyUkFELFxyXG4gICAgICAgICAgICBjYW52YXMud2lkdGggLyBjYW52YXMuaGVpZ2h0LCAwLjEsIDEwMDApO1xyXG4gICAgICAgIG1hdDQubG9va0F0KGRhdGEudmlldywgWzAsMiw0XSwgWzAsMCwwXSwgWzAsMSwwXSk7XHJcbiAgICAgICAgbWF0NC5zY2FsZShkYXRhLnZpZXcsIGRhdGEudmlldywgWzEsMS4yLDFdKTtcclxuICAgICAgICBwYW5lLmRhdGEoJ3N1cmZhY2UnLCBkYXRhKTtcclxuICAgICAgICB1cGRhdGVDYW52YXNTaXplKHBhbmUpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG9uQ3JlYXRlU3VyZmFjZUhlYWRlciAoaGVhZGVyLCBpbnN0YW5jZSkge1xyXG4gICAgICAgIHZhciBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XHJcbiAgICAgICAgbGFiZWwuaW5uZXJIVE1MID0gJ1N1cmZhY2UgUGFuZSc7XHJcbiAgICAgICAgaGVhZGVyLmFwcGVuZENoaWxkKGxhYmVsKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1cGRhdGVDYW52YXNTaXplIChwYW5lKSB7XHJcbiAgICAgICAgdmFyIGNhbnZhcyA9IHBhbmUucXVlcnlTZWxlY3RvcignY2FudmFzJyk7XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcbiAgICAgICAgdmFyIGhlYWRlciA9IHBhbmUucXVlcnlTZWxlY3RvcignLnBhbmUtaGVhZGVyJyk7XHJcbiAgICAgICAgdmFyIGhlYWRlckhlaWdodCA9IGhlYWRlciA/IGhlYWRlci5oZWlnaHQoKSA6IDA7XHJcblxyXG4gICAgICAgIHZhciB3aWR0aCA9IHBhbmUud2lkdGgoKSwgaGVpZ2h0ID0gcGFuZS5oZWlnaHQoKSAtIGhlYWRlckhlaWdodDtcclxuICAgICAgICBwYW5lLmRhdGEoJ2J1ZmZlcicsIG5ldyBVaW50OEFycmF5KHdpZHRoICogaGVpZ2h0ICogNCkpO1xyXG4gICAgICAgIHBhbmUuZGF0YSgnaW1nRGF0YScsIGNvbnRleHQuY3JlYXRlSW1hZ2VEYXRhKHdpZHRoLCBoZWlnaHQpKTtcclxuXHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcclxuXHJcbiAgICAgICAgdmFyIGRhdGEgPSBwYW5lLmRhdGEoJ3N1cmZhY2UnKTtcclxuICAgICAgICBtYXQ0LnBlcnNwZWN0aXZlKGRhdGEucHJvaiwgLTQ1ICogREVHMlJBRCwgd2lkdGggLyBoZWlnaHQsIDAuMSwgMTAwMCk7XHJcbiAgICB9XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMuYWRkKCdvYmplY3QtaW50ZXJhY3Rpb24nLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UuaW50ZXJhY3Rpb24uYWRkKCdvYmplY3QnLCB7XHJcbiAgICAgICAgICAgIG9uTW91c2VEb3duOiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmxvZ2dlci5kZWJ1Zygnb25Nb3VzZURvd24nLCBldmVudCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uTW91c2VVcDogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZGVidWcoJ29uTW91c2VVcCcsIGV2ZW50KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25Nb3VzZU1vdmU6IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UubG9nZ2VyLmRlYnVnKCdvbk1vdXNlTW92ZScsIGV2ZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0sIFsnc3VyZmFjZS1yZW5kZXInXSk7XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMuYWRkKCdzdXJmYWNlLWludGVyYWN0aW9uJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UucGFuZS5zZXRJbnRlcmFjdGlvbiA9IGZ1bmN0aW9uIChwYW5lLCBuYW1lKSB7XHJcbiAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbnMgPSBpbnN0YW5jZS5pbnRlcmFjdGlvbjtcclxuICAgICAgICAgICAgaWYgKGludGVyYWN0aW9ucy5oYXMobmFtZSkpXHJcbiAgICAgICAgICAgICAgICBwYW5lLmF0dHJEYXRhKCdzdXJmYWNlLWludGVyYWN0aW9uJywgbmFtZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UucGFuZS5nZXRJbnRlcmFjdGlvbiA9IGZ1bmN0aW9uIChwYW5lKSB7XHJcbiAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbnMgPSBpbnN0YW5jZS5pbnRlcmFjdGlvbjtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSBwYW5lLmF0dHJEYXRhKCdzdXJmYWNlLWludGVyYWN0aW9uJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnRlcmFjdGlvbnMuZ2V0KG5hbWUpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmV2ZW50cy5vbigncGFuZS5zcGxpdCcsIGZ1bmN0aW9uIChvbGRQYW5lLCBuZXdQYW5lKSB7XHJcbiAgICAgICAgICAgIG5ld1BhbmUuYXR0ckRhdGEoJ3N1cmZhY2UtaW50ZXJhY3Rpb24nLCBvbGRQYW5lLmF0dHJEYXRhKCdzdXJmYWNlLWludGVyYWN0aW9uJykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgWydpbnRlcmFjdGlvbi1tb2RlJ10pO1xyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzLmFkZCgncmVuZGVyLXNvbGlkJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgdmFyIHNoYWRlciA9IG5ldyBTaGFkZXIoXHJcbiAgICAgICAgICAgICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7JyArXHJcbiAgICAgICAgICAgICdhdHRyaWJ1dGUgdmVjMyBhX3ZlcnRleDsnICtcclxuICAgICAgICAgICAgJ2F0dHJpYnV0ZSB2ZWMzIGFfbm9ybWFsOycgK1xyXG4gICAgICAgICAgICAndmFyeWluZyB2ZWMzIHZfbm9ybWFsOycgK1xyXG4gICAgICAgICAgICAndW5pZm9ybSBtYXQ0IHVfbXZwOycgK1xyXG4gICAgICAgICAgICAndW5pZm9ybSBtYXQ0IHVfbW9kZWw7JyArXHJcbiAgICAgICAgICAgICd2b2lkIG1haW4oKSB7JyArXHJcbiAgICAgICAgICAgICcgICAgdl9ub3JtYWwgPSAodV9tb2RlbCAqIHZlYzQoYV9ub3JtYWwsMC4wKSkueHl6OycgK1xyXG4gICAgICAgICAgICAnICAgIGdsX1Bvc2l0aW9uID0gdV9tdnAgKiB2ZWM0KGFfdmVydGV4LDEuMCk7JyArXHJcbiAgICAgICAgICAgICd9JyxcclxuICAgICAgICAgICAgJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDsnICtcclxuICAgICAgICAgICAgJ3ZhcnlpbmcgdmVjMyB2X25vcm1hbDsnICtcclxuICAgICAgICAgICAgJ3VuaWZvcm0gdmVjMyB1X2xpZ2h0dmVjdG9yOycgK1xyXG4gICAgICAgICAgICAndW5pZm9ybSB2ZWM0IHVfY29sb3I7JyArXHJcbiAgICAgICAgICAgICd2b2lkIG1haW4oKSB7JyArXHJcbiAgICAgICAgICAgICcgIHZlYzMgTiA9IG5vcm1hbGl6ZSh2X25vcm1hbCk7JyArXHJcbiAgICAgICAgICAgICcgIGdsX0ZyYWdDb2xvciA9IHVfY29sb3IgKiBtYXgoMC4wLCBkb3QodV9saWdodHZlY3RvcixOKSk7JyArXHJcbiAgICAgICAgICAgICd9J1xyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHZhciB0ZW1wID0gbWF0NC5jcmVhdGUoKTtcclxuICAgICAgICB2YXIgbXZwID0gbWF0NC5jcmVhdGUoKTtcclxuXHJcbiAgICAgICAgdmFyIHVuaWZvcm1zID0ge1xyXG4gICAgICAgICAgICB1X2NvbG9yOiBbMSwgMSwgMSwgMV0sXHJcbiAgICAgICAgICAgIHVfbGlnaHR2ZWN0b3I6IHZlYzMubm9ybWFsaXplKHZlYzMuY3JlYXRlKCksIFsxLCAyLCAzXSksXHJcbiAgICAgICAgICAgIHVfbW9kZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHVfbXZwOiBtdnBcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5ncmFwaGljcy5yZW5kZXJzLmFkZCgnc29saWQnLCBmdW5jdGlvbiAoc3VyZmFjZSkge1xyXG4gICAgICAgICAgICB2YXIgb2JqcyA9IGluc3RhbmNlLnNjZW5lLnJvb3QuZGZzKCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2Jqcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IG9ianNbaV0uZGF0YTtcclxuICAgIFx0XHRcdG1hdDQubXVsdGlwbHkodGVtcCwgc3VyZmFjZS52aWV3LCBvYmoubW9kZWwpO1xyXG4gICAgXHRcdFx0bWF0NC5tdWx0aXBseShtdnAsIHN1cmZhY2UucHJvaiwgdGVtcCk7XHJcblxyXG4gICAgXHRcdFx0dW5pZm9ybXMudV9tb2RlbCA9IG9iai5tb2RlbDtcclxuICAgIFx0XHRcdHNoYWRlci51bmlmb3Jtcyh1bmlmb3JtcykuZHJhdyhvYmoubWVzaCwgb2JqLnByaW1pdGl2ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9LCBbJ2dyYXBoaWNzLXJlbmRlciddKTtcclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUubW9kdWxlcy5hZGQoJ3N1cmZhY2UtcmVuZGVyJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UucGFuZS5zZXRSZW5kZXIgPSBmdW5jdGlvbiAocGFuZSwgbmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgcmVuZGVycyA9IGluc3RhbmNlLmdyYXBoaWNzLnJlbmRlcnM7XHJcbiAgICAgICAgICAgIGlmIChyZW5kZXJzLmhhcyhuYW1lKSlcclxuICAgICAgICAgICAgICAgIHBhbmUuYXR0ckRhdGEoJ3N1cmZhY2UtcmVuZGVyJywgbmFtZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UucGFuZS5nZXRSZW5kZXIgPSBmdW5jdGlvbiAocGFuZSkge1xyXG4gICAgICAgICAgICB2YXIgcmVuZGVycyA9IGluc3RhbmNlLmdyYXBoaWNzLnJlbmRlcnM7XHJcbiAgICAgICAgICAgIHZhciBuYW1lID0gcGFuZS5hdHRyRGF0YSgnc3VyZmFjZS1yZW5kZXInKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcnMuZ2V0KG5hbWUpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmV2ZW50cy5vbigncGFuZS5zcGxpdCcsIGZ1bmN0aW9uIChvbGRQYW5lLCBuZXdQYW5lKSB7XHJcbiAgICAgICAgICAgIG5ld1BhbmUuYXR0ckRhdGEoJ3N1cmZhY2UtcmVuZGVyJywgb2xkUGFuZS5hdHRyRGF0YSgnc3VyZmFjZS1yZW5kZXInKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBbJ2dyYXBoaWNzLXJlbmRlciddKTtcclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUubW9kdWxlcy5hZGQoJ2dyYXBoaWNzLXJlbmRlcicsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGluc3RhbmNlLmdyYXBoaWNzLnJlbmRlcnMgPSB7XHJcbiAgICAgICAgICAgIGFsbDoge30sXHJcbiAgICAgICAgICAgIGFkZDogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFsbFtuYW1lXSA9IGNhbGxiYWNrO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hbGxbbmFtZV07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFsbFtuYW1lXTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaGFzOiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5hbGxbbmFtZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSwgWydncmFwaGljcyddKTtcclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBHcmFwaGljcyA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgICAgICB0aGlzLmdsID0gR0wuY3JlYXRlKHtcclxuICAgICAgICAgICAgaGVpZ2h0OiBzY3JlZW4uaGVpZ2h0LFxyXG4gICAgICAgICAgICB3aWR0aDogc2NyZWVuLndpZHRoXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5nbC5hbmltYXRlKCk7XHJcbiAgICAgICAgdGhpcy5nbC5vbmRyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZW5kZXJUYXJnZXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnY2FudmFzJyk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVuZGVyVGFyZ2V0cy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgIGRyYXdSZW5kZXJUYXJnZXQoaW5zdGFuY2UsIHJlbmRlclRhcmdldHNbaV0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5nbC5jbGVhckNvbG9yKDAuNCwgMC40LCAwLjQsIDEpO1xyXG4gICAgICAgIHRoaXMuZ2wuZW5hYmxlKHRoaXMuZ2wuREVQVEhfVEVTVCk7XHJcbiAgICB9O1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUubW9kdWxlcy5hZGQoJ2dyYXBoaWNzJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UuZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3MoaW5zdGFuY2UpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gZHJhd1JlbmRlclRhcmdldCAoaW5zdGFuY2UsIGNhbnZhcykge1xyXG4gICAgICAgIHZhciBwYW5lID0gY2FudmFzLnBhcmVudCgnLnBhbmUnKTtcclxuICAgICAgICB2YXIgaW1hZ2VEYXRhID0gcGFuZS5kYXRhKCdpbWdEYXRhJyk7XHJcbiAgICAgICAgdmFyIHN1cmZhY2UgPSBwYW5lLmRhdGEoJ3N1cmZhY2UnKTtcclxuICAgICAgICB2YXIgYnVmZmVyID0gcGFuZS5kYXRhKCdidWZmZXInKTtcclxuICAgICAgICB2YXIgZ2wgPSBpbnN0YW5jZS5ncmFwaGljcy5nbDtcclxuXHJcbiAgICAgICAgdmFyIHdpZHRoICA9IGNhbnZhcy5jbGllbnRXaWR0aCwgaGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodDtcclxuICAgICAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUIHwgZ2wuREVQVEhfQlVGRkVSX0JJVCk7XHJcbiAgICAgICAgZ2wudmlld3BvcnQoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcblxyXG4gICAgICAgIHZhciByZW5kZXIgPSBpbnN0YW5jZS5wYW5lLmdldFJlbmRlcihwYW5lKTtcclxuICAgICAgICBpZiAocmVuZGVyKSByZW5kZXIoc3VyZmFjZSk7XHJcblxyXG4gICAgICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgICAgaWYgKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgZ2wucmVhZFBpeGVscygwLCAwLCB3aWR0aCwgaGVpZ2h0LCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBidWZmZXIpO1xyXG4gICAgICAgICAgICBpbWFnZURhdGEuZGF0YS5zZXQoYnVmZmVyKTtcclxuICAgICAgICAgICAgY29udGV4dC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMuYWRkKCdpbnRlcmFjdGlvbi1tb2RlJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgdmFyIGludGVyYWN0aW9uTW9kZXMgPSB7XHJcbiAgICAgICAgICAgIGFsbDoge30sXHJcbiAgICAgICAgICAgIGFkZDogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hbGxbbmFtZV0gPSBjYWxsYmFja3M7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFsbFtuYW1lXTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuYWxsW25hbWVdO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBoYXM6IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gISF0aGlzLmFsbFtuYW1lXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmludGVyYWN0aW9uID0gaW50ZXJhY3Rpb25Nb2RlcztcclxuICAgIH0pO1xyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzLmFkZCgnc2NlbmUnLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBpbnN0YW5jZS5zY2VuZSA9IHtcclxuICAgICAgICAgICAgcm9vdDogVHJlZU5vZGUuZXh0ZW5kKHt9KVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBtYXQgPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICAgIG1hdDQucm90YXRlWShtYXQsIG1hdCwgMC44KTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2Uuc2NlbmUucm9vdC5hZGQoe1xyXG4gICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcclxuICAgICAgICAgICAgcHJpbWl0aXZlOiBpbnN0YW5jZS5ncmFwaGljcy5nbC5UUklBTkdMRVMsXHJcbiAgICAgICAgICAgIG1lc2g6IEdMLk1lc2guY3ViZSgpLFxyXG4gICAgICAgICAgICBtb2RlbDogbWF0LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgWydncmFwaGljcyddKTtcclxufSkoKSk7XHJcbiJdfQ==
