!function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}e(Array.prototype,"unique",function(){for(var e=this.concat(),t=0;t<e.length;++t)for(var n=t+1;n<e.length;++n)e[t]===e[n]&&e.splice(n--,1);return e}),e(Array.prototype,"forEach",function(e){for(var t=0;t<this.length;t++)e(this[t],t,this)})}(),function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}function t(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}e(HTMLElement.prototype,"addClass",function(){var e,t;for(var n in arguments)e=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[],t=arguments[n]?arguments[n].trim().replace(/\s+/g," ").split(" "):[],this.className=e.concat(t).unique().join(" ")}),e(HTMLElement.prototype,"hasClass",function(){var e,t=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[];for(var n in arguments){e=arguments[n]?arguments[n].trim().replace(/\s+/g," ").split(" "):[];for(var r=0;r<e.length;r++){var i=e[r];if(t.indexOf(i)==-1)return!1}}return!0}),e(HTMLElement.prototype,"removeClass",function(){var e,t,n=0,r=function(t){n=e.indexOf(t),n!=-1&&e.splice(n,1)};for(var i in arguments)e=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[],t=arguments[i]?arguments[i].trim().replace(/\s+/g," ").split(" "):[],t.forEach(r),this.className=e.unique().join(" ")}),e(HTMLElement.prototype,"data",function(e,t){window.__data_cache||(window.__data_cache=new WeakMap);var n=window.__data_cache.get(this)||{};return void 0===t?e?n&&n[e]:n:(n[e]=t,window.__data_cache.set(this,n),this)}),e(HTMLElement.prototype,"setData",function(e){return window.__data_cache||(window.__data_cache=new WeakMap),window.__data_cache.set(this,e),this}),e(HTMLElement.prototype,"attr",function(e,t){if(void 0!==t)this.setAttribute(e,t);else{if(null!==t)return this.getAttribute(e);this.removeAttribute(e)}return this}),e(HTMLElement.prototype,"attrData",function(e,t){return this.attr("data-"+e,t)}),e(Element.prototype,"matches",Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(e){for(var t=(this.document||this.ownerDocument).querySelectorAll(e),n=t.length;--n>=0&&t.item(n)!==this;);return n>-1}),e(HTMLElement.prototype,"parent",function(e){if(!e)return this.parentElement;for(var t=this.parentElement;!t.matches(e);)t=t.parentElement;return t}),e(HTMLElement.prototype,"height",function(){if(1!=arguments.length)return this.clientHeight;var e=arguments[0];"number"==typeof e?this.style.height=e+"px":this.style.height=e}),e(HTMLElement.prototype,"width",function(){if(1!=arguments.length)return this.clientWidth;var e=arguments[0];"number"==typeof e?this.style.width=e+"px":this.style.width=e}),e(window,"guid",function(){return"GUID-"+t()+"-"+t()+"-"+t()}),e(HTMLElement.prototype,"guid",function(){var e=null,t=null;do e=window.guid(),t=document.querySelector("#"+e);while(t);return this.attr("id",e),e})}(),function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}window.extend=function(e,t){for(var n in t)if(n&&t.hasOwnProperty(n)){var r=t[n];"object"==typeof r?extend(e[n],t[n]):e[n]=t[n]}},e(Object,"clone",function(e){var t={};for(var n in e)if(e.hasOwnProperty(n)){var r=e[n];"object"==typeof r?t[n]=Object.clone(e[n]):t[n]=e[n]}return t})}(),function(){"use strict";var e=function(e,t){this.data=t||{},this.parent=e,this.children=[]};window.TreeNode=e,e.prototype.isRoot=function(){return!this.parent},e.prototype.add=function(e){var t=new this.constructor(this,e);return this.children.push(t),t},e.prototype.remove=function(e){return this.children.slice(e,1),this},e.prototype.dfs=function(e){for(var t=[],n=0;n<this.children.length;n++)(!e||e&&e(this.children[n]))&&t.push(this.children[n]),t.concat(this.children[n].dfs(e));return t},e.prototype.bfs=function(e){var t,n=[];for(t=0;t<this.children.length;t++)(!e||e&&e(this.children[t]))&&n.push(this.children[t]);for(t=0;t<this.children.length;t++)n.concat(this.children[t].bfs(e));return n},e.extend=function(t){var n=function(t,n){e.call(this,t,n)};return n.prototype=Object.create(e.prototype),n.prototype.constructor=n,extend(n.prototype,t),new n(null)}}(),function(){"use strict";var e=function(e){this.instance=e,this.listeners={}};e.prototype.trigger=function(){var e=arguments[0],t=this.listeners[e]||[];Array.prototype.splice.call(arguments,0,1);for(var n=0;n<t.length;n++)t[n].apply(null,arguments);this.instance.logger.debug(e,arguments)},e.prototype.on=function(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t)},e.prototype.off=function(e){delete this.listeners[e]},e.prototype.off=function(e,t){if(this.listeners[e]){var n=this.listeners[e];n.indexOf(t)>-1&&n.splice(index,1)}},window.EventHandler=e}(),function(){"use strict";var e=function(){},t=function(t,n){this.debug=n?console.debug.bind():e,this.info=n?console.info.bind():e,this.warn=console.warn.bind(),this.error=console.error.bind()};window.Logger=t}(),function(){"use strict";var e={container:{selector:"#cobweb",className:"cb-container"}},t=function(n){if(this.options=e,extend(this.options,n||{}),this.container=document.querySelector(this.options.container.selector),!this.container)throw new Error("Invalid container selector: '"+this.options.container.selector+"'");this.container.addClass(this.options.container.className),this.container.data("instance",this),this.logger=new Logger(this,!0),this.events=new EventHandler(this),t.prototype.modules.load(this)};window.Cobweb=t}(),function(){"use strict";function e(e){for(var t in e){var n=e[t];if(n.dependant||(n.dependant=[]),n.dependencies.length>0)for(var r=0;r<n.dependencies.length;r++){var i=e[n.dependencies[r]];i.dependant||(i.dependant=[]),i.dependant.push(t)}}}function t(e,t){var r=[],i=[];for(var o in t)0===t[o].dependencies.length&&r.push(o);for(;r.length>0;){var a=r[0];if(r.splice(0,1),t[a]){var s=t[a];i.push(a);for(var c=0;c<s.dependant.length;c++){var l=s.dependant[c];n(i,t[l])&&r.push(l)}}else e.events.trigger("modules.error.missing",a),e.logger.warning("Missing module '"+a+"'")}return Object.keys(t).length!==i.length&&(e.events.trigger("modules.error.cycle"),e.logger.error("Dependency cycle found in modules")),i}function n(e,t){for(var n=0;n<t.dependencies.length;n++)if(e.indexOf(t.dependencies[n])===-1)return!1;return!0}Cobweb.prototype.modules={all:{},add:function(e,t,n){n=n||[],this.all[e]={dependencies:n,init:t}},load:function(n){e(this.all);for(var r=t(n,this.all),i=0;i<r.length;i++){var o=r[i];try{this.all[o].init(n),n.events.trigger("modules.loaded",o)}catch(e){n.logger.error("Loading module "+o,e),n.events.trigger("modules.error",o,e)}}n.events.trigger("modules.loaded.all",r)}}}(),function(){"use strict";Cobweb.prototype.modules.add("pane-types",function(e){var t={all:{},add:function(e,t){this.all[e]=t},get:function(e){return this.all[e]},remove:function(e){delete this.all[e]},has:function(e){return!!this.all[e]}};t.add("default",function(e,t){t.logger.debug("Default pane type (this does nothing)")}),e.events.on("pane.split",function(t,n){var r=t.attrData("pane-type");r&&e.pane.setType(n,r)}),e.pane.types=t,e.pane.setType=function(t,n){this.types.has(n)&&(this.types.get(n)(t,e),t.attrData("pane-type",n))}},["pane"])}(),function(){"use strict";Cobweb.prototype.modules.add("pane",function(e){function t(t,n){e.events.trigger("pane.split",t,n)}function n(t){e.events.trigger("pane.resize",t)}e.pane=new Pane({container:e.options.container.selector,separator:{size:3},callbacks:{onPaneSplit:t,onPaneResize:n}})})}(),function(){"use strict";function e(e){var t=e.querySelector("canvas"),n=t.getContext("2d"),r=e.width(),i=e.height();e.data("buffer",new Uint8Array(r*i*4)),e.data("imgData",n.createImageData(r,i)),t.height=i,t.width=r;var o=e.data("surface");mat4.perspective(o.proj,-45*DEG2RAD,r/i,.1,1e3)}Cobweb.prototype.modules.add("surface",function(t){t.pane.types.add("surface",function(t,n){var r=document.createElement("canvas");t.append(r);var i={proj:mat4.create(),view:mat4.create()};mat4.perspective(i.proj,-45*DEG2RAD,r.width/r.height,.1,1e3),mat4.lookAt(i.view,[0,2,4],[0,0,0],[0,1,0]),mat4.scale(i.view,i.view,[1,1.2,1]),t.data("surface",i),e(t)}),t.events.on("pane.resize",function(t){"surface"===t.attrData("pane-type")&&e(t)});var n=document.querySelector(".pane");t.pane.setType(n,"surface"),t.pane.setRender(n,"solid")},["pane-types","surface-render"])}(),function(){"use strict";Cobweb.prototype.modules.add("render-solid",function(e){var t=new Shader("precision highp float;attribute vec3 a_vertex;attribute vec3 a_normal;varying vec3 v_normal;uniform mat4 u_mvp;uniform mat4 u_model;void main() {    v_normal = (u_model * vec4(a_normal,0.0)).xyz;    gl_Position = u_mvp * vec4(a_vertex,1.0);}","precision highp float;varying vec3 v_normal;uniform vec3 u_lightvector;uniform vec4 u_color;void main() {  vec3 N = normalize(v_normal);  gl_FragColor = u_color * max(0.0, dot(u_lightvector,N));}"),n=mat4.create(),r=mat4.create(),i={u_color:[1,1,1,1],u_lightvector:vec3.normalize(vec3.create(),[1,2,3]),u_model:null,u_mvp:r};e.graphics.renders.add("solid",function(o){for(var a=e.scene.root.dfs(),s=0;s<a.length;s++){var c=a[s].data;mat4.multiply(n,o.view,c.model),mat4.multiply(r,o.proj,n),i.u_model=c.model,t.uniforms(i).draw(c.mesh,c.primitive)}})},["graphics-render"])}(),function(){"use strict";Cobweb.prototype.modules.add("surface-render",function(e){e.pane.setRender=function(t,n){var r=e.graphics.renders;r.has(n)&&t.attrData("surface-render",n)},e.pane.getRender=function(t){var n=e.graphics.renders,r=t.attrData("surface-render");return n.get(r)},e.events.on("pane.split",function(e,t){t.attrData("surface-render",e.attrData("surface-render"))})},["graphics-render"])}(),function(){"use strict";Cobweb.prototype.modules.add("object-interaction",function(e){e.interaction.add("object",{onMouseDown:function(t){e.logger.debug("onMouseDown",t)},onMouseUp:function(t){e.logger.debug("onMouseUp",t)},onMouseMove:function(t){e.logger.debug("onMouseMove",t)}})},["surface-render"])}(),function(){"use strict";Cobweb.prototype.modules.add("surface-interaction",function(e){e.pane.setInteraction=function(t,n){var r=e.interaction;r.has(n)&&t.attrData("surface-interaction",n)},e.pane.getInteraction=function(t){var n=e.interaction,r=t.attrData("surface-interaction");return n.get(r)},e.events.on("pane.split",function(e,t){t.attrData("surface-interaction",e.attrData("surface-interaction"))})},["interaction-mode"])}(),function(){"use strict";Cobweb.prototype.modules.add("graphics-render",function(e){e.graphics.renders={all:{},add:function(e,t){this.all[e]=t},get:function(e){return this.all[e]},remove:function(e){delete this.all[e]},has:function(e){return!!this.all[e]}}},["graphics"])}(),function(){"use strict";function e(e,t){var n=t.parent(".pane"),r=n.data("imgData"),i=n.data("surface"),o=n.data("buffer"),a=e.graphics.gl,s=t.clientWidth,c=t.clientHeight;a.clear(a.COLOR_BUFFER_BIT|a.DEPTH_BUFFER_BIT),a.viewport(0,0,s,c);var l=e.pane.getRender(n);l&&l(i);var u=t.getContext("2d");u&&(a.readPixels(0,0,s,c,a.RGBA,a.UNSIGNED_BYTE,o),r.data.set(o),u.putImageData(r,0,0))}var t=function(t){this.instance=t,this.gl=GL.create({height:screen.height,width:screen.width}),this.gl.animate(),this.gl.ondraw=function(){for(var n=document.querySelectorAll("canvas"),r=0;r<n.length;r++)e(t,n[r])},this.gl.clearColor(.4,.4,.4,1),this.gl.enable(this.gl.DEPTH_TEST)};Cobweb.prototype.modules.add("graphics",function(e){e.graphics=new t(e)})}(),function(){"use strict";Cobweb.prototype.modules.add("interaction-mode",function(e){var t={all:{},add:function(e,t){this.all[e]=t},get:function(e){return this.all[e]},remove:function(e){delete this.all[e]},has:function(e){return!!this.all[e]}};e.interaction=t})}(),function(){"use strict";Cobweb.prototype.modules.add("scene",function(e){e.scene={root:TreeNode.extend({})};var t=mat4.create();mat4.rotateY(t,t,.8),e.scene.root.add({type:"object",primitive:e.graphics.gl.TRIANGLES,mesh:GL.Mesh.cube(),model:t})},["graphics"])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5LmpzIiwiaHRtbC5qcyIsIm9iai5qcyIsInRyZWUuanMiLCJldmVudHMuanMiLCJsb2dnZXIuanMiLCJjb2J3ZWIuanMiLCJtb2R1bGVzLmpzIiwicGFuZS9wYW5lLXR5cGVzLmpzIiwicGFuZS9wYW5lcy5qcyIsInBhbmUvc3VyZmFjZS9zdXJmYWNlLmpzIiwicGFuZS9zdXJmYWNlL3JlbmRlci9yZW5kZXItc29saWQuanMiLCJwYW5lL3N1cmZhY2UvcmVuZGVyL3N1cmZhY2UtcmVuZGVyLmpzIiwicGFuZS9zdXJmYWNlL2ludGVyYWN0aW9uL29iamVjdC1pbnRlcmFjdGlvbi5qcyIsInBhbmUvc3VyZmFjZS9pbnRlcmFjdGlvbi9zdXJmYWNlLWludGVyYWN0aW9uLmpzIiwiZ3JhcGhpYy1yZW5kZXIuanMiLCJncmFwaGljLmpzIiwiaW50ZXJhY3Rpb24tbW9kZXMuanMiLCJzY2VuZS5qcyJdLCJuYW1lcyI6WyJzYWZlRXh0ZW5kIiwicHJvdG90eXBlIiwicHJvcGVydHkiLCJ2YWx1ZSIsIkFycmF5IiwiYSIsInRoaXMiLCJjb25jYXQiLCJpIiwibGVuZ3RoIiwiaiIsInNwbGljZSIsImNhbGxiYWNrIiwiczQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsIkhUTUxFbGVtZW50Iiwib2xkQ2xhc3NOYW1lcyIsIm5ld0NsYXNzTmFtZXMiLCJhcmd1bWVudHMiLCJjbGFzc05hbWUiLCJ0cmltIiwicmVwbGFjZSIsInNwbGl0IiwidW5pcXVlIiwiam9pbiIsInF1ZXJ5Q2xhc3NOYW1lcyIsImN1cnJlbnRDbGFzc05hbWVzIiwiaW5kZXgiLCJuYW1lIiwiaW5kZXhPZiIsInJlbW92ZUNsYXNzTmFtZXMiLCJyZW1vdmVFYWNoIiwiZm9yRWFjaCIsImF0dHIiLCJ3aW5kb3ciLCJfX2RhdGFfY2FjaGUiLCJXZWFrTWFwIiwiZWxBdHRycyIsImdldCIsInVuZGVmaW5lZCIsInNldCIsImRhdGEiLCJzZXRBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJFbGVtZW50IiwibWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwicyIsIm1hdGNoZXMiLCJkb2N1bWVudCIsIm93bmVyRG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaXRlbSIsInF1ZXJ5IiwicGFyZW50RWxlbWVudCIsImN1cnJlbnQiLCJjbGllbnRIZWlnaHQiLCJzdHlsZSIsImhlaWdodCIsImNsaWVudFdpZHRoIiwid2lkdGgiLCJndWlkIiwib3ZlcmxhcCIsInF1ZXJ5U2VsZWN0b3IiLCJleHRlbmQiLCJkZWZhdWx0cyIsInByb3BlcnRpZXMiLCJoYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsIm9iaiIsIm5ld09iaiIsImNsb25lIiwiVHJlZU5vZGUiLCJwYXJlbnQiLCJjaGlsZHJlbiIsImlzUm9vdCIsImFkZCIsImNoaWxkIiwiY29uc3RydWN0b3IiLCJwdXNoIiwicmVtb3ZlIiwic2xpY2UiLCJkZnMiLCJjaGVjayIsIm91dCIsImJmcyIsIl9UcmVlTm9kZSIsImNhbGwiLCJjcmVhdGUiLCJFdmVudEhhbmRsZXIiLCJpbnN0YW5jZSIsImxpc3RlbmVycyIsInRyaWdnZXIiLCJhcHBseSIsImxvZ2dlciIsImRlYnVnIiwib24iLCJvZmYiLCJhcnJheSIsImVtcHR5RnVuY3Rpb24iLCJMb2dnZXIiLCJpc0RlYnVnIiwiY29uc29sZSIsImJpbmQiLCJpbmZvIiwid2FybiIsImVycm9yIiwiZGVmYXVsdE9wdGlvbnMiLCJjb250YWluZXIiLCJzZWxlY3RvciIsIkNvYndlYiIsIm9wdGlvbnMiLCJFcnJvciIsImFkZENsYXNzIiwiZXZlbnRzIiwibW9kdWxlcyIsImxvYWQiLCJhZGRSZXZlcnNlRGVwZW5kZW5jaWVzIiwibW9kdWxlIiwiZGVwZW5kYW50IiwiZGVwZW5kZW5jaWVzIiwiZGVwUGx1Z2luIiwidG9wb2xvZ2ljYWxTb3J0IiwiY2FuZGlkYXRlcyIsInNvcnRlZE5hbWVzIiwibmV4dE5hbWUiLCJkZXBOYW1lIiwiYWxsRGVwZW5kZW5jaWVzTWV0Iiwid2FybmluZyIsImtleXMiLCJsb2FkZWRVbnRpbE5vdyIsImFsbCIsImluaXQiLCJleCIsInBhbmVUeXBlcyIsImhhcyIsInBhbmUiLCJvbGRQYW5lIiwibmV3UGFuZSIsIm9sZFR5cGUiLCJhdHRyRGF0YSIsInNldFR5cGUiLCJ0eXBlcyIsIm9uUGFuZVNwbGl0Iiwib3JpZ2luIiwib25QYW5lUmVzaXplIiwiUGFuZSIsInNlcGFyYXRvciIsInNpemUiLCJjYWxsYmFja3MiLCJ1cGRhdGVDYW52YXNTaXplIiwiY2FudmFzIiwiY29udGV4dCIsImdldENvbnRleHQiLCJVaW50OEFycmF5IiwiY3JlYXRlSW1hZ2VEYXRhIiwibWF0NCIsInBlcnNwZWN0aXZlIiwicHJvaiIsIkRFRzJSQUQiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kIiwidmlldyIsImxvb2tBdCIsInNjYWxlIiwicm9vdCIsInNldFJlbmRlciIsInNoYWRlciIsIlNoYWRlciIsInRlbXAiLCJtdnAiLCJ1bmlmb3JtcyIsInVfY29sb3IiLCJ1X2xpZ2h0dmVjdG9yIiwidmVjMyIsIm5vcm1hbGl6ZSIsInVfbW9kZWwiLCJ1X212cCIsImdyYXBoaWNzIiwicmVuZGVycyIsInN1cmZhY2UiLCJvYmpzIiwic2NlbmUiLCJtdWx0aXBseSIsIm1vZGVsIiwiZHJhdyIsIm1lc2giLCJwcmltaXRpdmUiLCJnZXRSZW5kZXIiLCJpbnRlcmFjdGlvbiIsIm9uTW91c2VEb3duIiwiZXZlbnQiLCJvbk1vdXNlVXAiLCJvbk1vdXNlTW92ZSIsInNldEludGVyYWN0aW9uIiwiaW50ZXJhY3Rpb25zIiwiZ2V0SW50ZXJhY3Rpb24iLCJkcmF3UmVuZGVyVGFyZ2V0IiwiaW1hZ2VEYXRhIiwiYnVmZmVyIiwiZ2wiLCJjbGVhciIsIkNPTE9SX0JVRkZFUl9CSVQiLCJERVBUSF9CVUZGRVJfQklUIiwidmlld3BvcnQiLCJyZW5kZXIiLCJyZWFkUGl4ZWxzIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJwdXRJbWFnZURhdGEiLCJHcmFwaGljcyIsIkdMIiwic2NyZWVuIiwiYW5pbWF0ZSIsIm9uZHJhdyIsInJlbmRlclRhcmdldHMiLCJjbGVhckNvbG9yIiwiZW5hYmxlIiwiREVQVEhfVEVTVCIsImludGVyYWN0aW9uTW9kZXMiLCJtYXQiLCJyb3RhdGVZIiwidHlwZSIsIlRSSUFOR0xFUyIsIk1lc2giLCJjdWJlIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUNBLFlBZUEsU0FBQUEsR0FBQUMsRUFBQUMsRUFBQUMsR0FDQUYsRUFBQUMsS0FBQUQsRUFBQUMsR0FBQUMsR0FkQUgsRUFBQUksTUFBQUgsVUFBQSxTQUFBLFdBRUEsSUFBQSxHQURBSSxHQUFBQyxLQUFBQyxTQUNBQyxFQUFBLEVBQUFBLEVBQUFILEVBQUFJLFNBQUFELEVBQ0EsSUFBQSxHQUFBRSxHQUFBRixFQUFBLEVBQUFFLEVBQUFMLEVBQUFJLFNBQUFDLEVBQ0FMLEVBQUFHLEtBQUFILEVBQUFLLElBQUFMLEVBQUFNLE9BQUFELElBQUEsRUFDQSxPQUFBTCxLQUdBTCxFQUFBSSxNQUFBSCxVQUFBLFVBQUEsU0FBQVcsR0FDQSxJQUFBLEdBQUFKLEdBQUEsRUFBQUEsRUFBQUYsS0FBQUcsT0FBQUQsSUFDQUksRUFBQU4sS0FBQUUsR0FBQUEsRUFBQUYsV0NiQSxXQUNBLFlBa0lBLFNBQUFOLEdBQUFDLEVBQUFDLEVBQUFDLEdBQ0FGLEVBQUFDLEtBQUFELEVBQUFDLEdBQUFDLEdBR0EsUUFBQVUsS0FDQSxNQUFBQyxNQUFBQyxNQUFBLE9BQUEsRUFBQUQsS0FBQUUsV0FDQUMsU0FBQSxJQUFBQyxVQUFBLEdBdElBbEIsRUFBQW1CLFlBQUFsQixVQUFBLFdBQUEsV0FDQSxHQUFBbUIsR0FBQUMsQ0FDQSxLQUFBLEdBQUFiLEtBQUFjLFdBQ0FGLEVBQUFkLEtBQUFpQixVQUFBakIsS0FBQWlCLFVBQUFDLE9BQUFDLFFBQUEsT0FBQSxL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QUFBc0IsR0FBQXVCLFVBQ0FyQyxLQUFBeUIsR0FBQWEsS0FBQUMsT0FDQXpDLE1BQUFvQyxNQUVBIiwiZmlsZSI6ImNvYndlYi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoKGZ1bmN0aW9uKCl7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgc2FmZUV4dGVuZChBcnJheS5wcm90b3R5cGUsICd1bmlxdWUnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgYSA9IHRoaXMuY29uY2F0KCk7XHJcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyArK2kpXHJcbiAgICAgICAgICAgIGZvcih2YXIgaiA9IGkgKyAxOyBqIDwgYS5sZW5ndGg7ICsrailcclxuICAgICAgICAgICAgICAgIGlmKGFbaV0gPT09IGFbal0pIGEuc3BsaWNlKGotLSwgMSk7XHJcbiAgICAgICAgcmV0dXJuIGE7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEFycmF5LnByb3RvdHlwZSwgJ2ZvckVhY2gnLCBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgY2FsbGJhY2sodGhpc1tpXSwgaSwgdGhpcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYWZlRXh0ZW5kKHByb3RvdHlwZSwgcHJvcGVydHksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYoIXByb3RvdHlwZVtwcm9wZXJ0eV0pIHByb3RvdHlwZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24oKXtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ2FkZENsYXNzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvbGRDbGFzc05hbWVzLCBuZXdDbGFzc05hbWVzO1xyXG4gICAgICAgIGZvcih2YXIgaSBpbiBhcmd1bWVudHMpe1xyXG4gICAgICAgICAgICBvbGRDbGFzc05hbWVzID0gIXRoaXMuY2xhc3NOYW1lID8gW10gOiB0aGlzLmNsYXNzTmFtZS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIG5ld0NsYXNzTmFtZXMgPSAhYXJndW1lbnRzW2ldID8gW10gOiBhcmd1bWVudHNbaV0udHJpbSgpLnJlcGxhY2UoL1xccysvZywgJyAnKS5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IG9sZENsYXNzTmFtZXMuY29uY2F0KG5ld0NsYXNzTmFtZXMpLnVuaXF1ZSgpLmpvaW4oJyAnKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ2hhc0NsYXNzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBxdWVyeUNsYXNzTmFtZXMsIGN1cnJlbnRDbGFzc05hbWVzID0gIXRoaXMuY2xhc3NOYW1lID8gW10gOiB0aGlzLmNsYXNzTmFtZS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgZm9yKHZhciBpIGluIGFyZ3VtZW50cyl7XHJcbiAgICAgICAgICAgIHF1ZXJ5Q2xhc3NOYW1lcyA9ICFhcmd1bWVudHNbaV0gPyBbXSA6IGFyZ3VtZW50c1tpXS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBxdWVyeUNsYXNzTmFtZXMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHF1ZXJ5Q2xhc3NOYW1lc1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENsYXNzTmFtZXMuaW5kZXhPZihuYW1lKSA9PSAtMSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ3JlbW92ZUNsYXNzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpbmRleCA9IDAsIGN1cnJlbnRDbGFzc05hbWVzLCByZW1vdmVDbGFzc05hbWVzO1xyXG4gICAgICAgIHZhciByZW1vdmVFYWNoID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgaW5kZXggPSBjdXJyZW50Q2xhc3NOYW1lcy5pbmRleE9mKG5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggIT0gLTEpXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Q2xhc3NOYW1lcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yKHZhciBpIGluIGFyZ3VtZW50cyl7XHJcbiAgICAgICAgICAgIGN1cnJlbnRDbGFzc05hbWVzID0gIXRoaXMuY2xhc3NOYW1lID8gW10gOiB0aGlzLmNsYXNzTmFtZS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzTmFtZXMgPSAhYXJndW1lbnRzW2ldID8gW10gOiBhcmd1bWVudHNbaV0udHJpbSgpLnJlcGxhY2UoL1xccysvZywgJyAnKS5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICByZW1vdmVDbGFzc05hbWVzLmZvckVhY2gocmVtb3ZlRWFjaCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gY3VycmVudENsYXNzTmFtZXMudW5pcXVlKCkuam9pbignICcpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnZGF0YScsIGZ1bmN0aW9uIChhdHRyLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICghd2luZG93Ll9fZGF0YV9jYWNoZSkgd2luZG93Ll9fZGF0YV9jYWNoZSA9IG5ldyBXZWFrTWFwKCk7XHJcbiAgICAgICAgdmFyIGVsQXR0cnMgPSB3aW5kb3cuX19kYXRhX2NhY2hlLmdldCh0aGlzKSB8fCB7fTtcclxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBlbEF0dHJzW2F0dHJdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHdpbmRvdy5fX2RhdGFfY2FjaGUuc2V0KHRoaXMsIGVsQXR0cnMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChhdHRyKSByZXR1cm4gZWxBdHRycyAmJiBlbEF0dHJzW2F0dHJdO1xyXG4gICAgICAgICAgICBlbHNlIHJldHVybiBlbEF0dHJzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnc2V0RGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgaWYgKCF3aW5kb3cuX19kYXRhX2NhY2hlKSB3aW5kb3cuX19kYXRhX2NhY2hlID0gbmV3IFdlYWtNYXAoKTtcclxuICAgICAgICB3aW5kb3cuX19kYXRhX2NhY2hlLnNldCh0aGlzLCBkYXRhKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnYXR0cicsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XHJcbiAgICAgICAgZWxzZSBpZiAodmFsdWUgPT09IG51bGwpXHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc2FmZUV4dGVuZChIVE1MRWxlbWVudC5wcm90b3R5cGUsICdhdHRyRGF0YScsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2RhdGEtJyArIG5hbWUsIHZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoRWxlbWVudC5wcm90b3R5cGUsICdtYXRjaGVzJyxcclxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzU2VsZWN0b3IgfHxcclxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcclxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fFxyXG4gICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm9NYXRjaGVzU2VsZWN0b3IgfHxcclxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcclxuICAgICAgICBmdW5jdGlvbihzKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRjaGVzID0gKHRoaXMuZG9jdW1lbnQgfHwgdGhpcy5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHMpLFxyXG4gICAgICAgICAgICAgICAgaSA9IG1hdGNoZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB3aGlsZSAoLS1pID49IDAgJiYgbWF0Y2hlcy5pdGVtKGkpICE9PSB0aGlzKSB7fVxyXG4gICAgICAgICAgICByZXR1cm4gaSA+IC0xO1xyXG4gICAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgc2FmZUV4dGVuZChIVE1MRWxlbWVudC5wcm90b3R5cGUsICdwYXJlbnQnLCBmdW5jdGlvbiAocXVlcnkpIHtcclxuICAgICAgICBpZiAoIXF1ZXJ5KSByZXR1cm4gdGhpcy5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgIHdoaWxlICghY3VycmVudC5tYXRjaGVzKHF1ZXJ5KSlcclxuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50RWxlbWVudDtcclxuICAgICAgICByZXR1cm4gY3VycmVudDtcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnaGVpZ2h0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUuaGVpZ2h0ID0gdmFsdWUgKyAncHgnO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0eWxlLmhlaWdodCA9IHZhbHVlO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRIZWlnaHQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ3dpZHRoJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUud2lkdGggPSB2YWx1ZSArICdweCc7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUud2lkdGggPSB2YWx1ZTtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50V2lkdGg7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKHdpbmRvdywgJ2d1aWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICdHVUlELScgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArIHM0KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ2d1aWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGd1aWQgPSBudWxsLCBvdmVybGFwID0gbnVsbDtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIGd1aWQgPSB3aW5kb3cuZ3VpZCgpO1xyXG4gICAgICAgICAgICBvdmVybGFwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyBndWlkKTtcclxuICAgICAgICB9IHdoaWxlKG92ZXJsYXApO1xyXG4gICAgICAgIHRoaXMuYXR0cignaWQnLCBndWlkKTtcclxuICAgICAgICByZXR1cm4gZ3VpZDtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhZmVFeHRlbmQocHJvdG90eXBlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcclxuICAgICAgICBpZighcHJvdG90eXBlW3Byb3BlcnR5XSkgcHJvdG90eXBlW3Byb3BlcnR5XSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHM0KCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKCgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwKVxyXG4gICAgICAgICAgICAudG9TdHJpbmcoMTYpLnN1YnN0cmluZygxKTtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24oKXtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB3aW5kb3cuZXh0ZW5kID0gZnVuY3Rpb24gKGRlZmF1bHRzLCBwcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gcHJvcGVydGllcylcclxuICAgICAgICAgICAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBwcm9wZXJ0aWVzW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKVxyXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZChkZWZhdWx0c1twcm9wZXJ0eV0sIHByb3BlcnRpZXNbcHJvcGVydHldKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0c1twcm9wZXJ0eV0gPSBwcm9wZXJ0aWVzW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKE9iamVjdCwgJ2Nsb25lJywgZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIHZhciBuZXdPYmogPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBvYmopXHJcbiAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBvYmpbcHJvcGVydHldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3T2JqW3Byb3BlcnR5XSA9IE9iamVjdC5jbG9uZShvYmpbcHJvcGVydHldKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBuZXdPYmpbcHJvcGVydHldID0gb2JqW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXdPYmo7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYWZlRXh0ZW5kKHByb3RvdHlwZSwgcHJvcGVydHksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYoIXByb3RvdHlwZVtwcm9wZXJ0eV0pIHByb3RvdHlwZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBUcmVlTm9kZSA9IGZ1bmN0aW9uIChwYXJlbnQsIGRhdGEpIHtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhIHx8IHt9O1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcclxuICAgIH07XHJcblxyXG4gICAgd2luZG93LlRyZWVOb2RlID0gVHJlZU5vZGU7XHJcblxyXG4gICAgVHJlZU5vZGUucHJvdG90eXBlLmlzUm9vdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMucGFyZW50O1xyXG4gICAgfTtcclxuXHJcbiAgICBUcmVlTm9kZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICB2YXIgY2hpbGQgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLCBkYXRhKTtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xyXG4gICAgICAgIHJldHVybiBjaGlsZDtcclxuICAgIH07XHJcblxyXG4gICAgVHJlZU5vZGUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4uc2xpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICBUcmVlTm9kZS5wcm90b3R5cGUuZGZzID0gZnVuY3Rpb24gKGNoZWNrKSB7XHJcbiAgICAgICAgdmFyIG91dCA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoIWNoZWNrIHx8IChjaGVjayAmJiBjaGVjayh0aGlzLmNoaWxkcmVuW2ldKSkpXHJcbiAgICAgICAgICAgICAgICBvdXQucHVzaCh0aGlzLmNoaWxkcmVuW2ldKTtcclxuICAgICAgICAgICAgb3V0LmNvbmNhdCh0aGlzLmNoaWxkcmVuW2ldLmRmcyhjaGVjaykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfTtcclxuXHJcbiAgICBUcmVlTm9kZS5wcm90b3R5cGUuYmZzID0gZnVuY3Rpb24gKGNoZWNrKSB7XHJcbiAgICAgICAgdmFyIG91dCA9IFtdLCBpO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICBpZiAoIWNoZWNrIHx8IChjaGVjayAmJiBjaGVjayh0aGlzLmNoaWxkcmVuW2ldKSkpXHJcbiAgICAgICAgICAgICAgICBvdXQucHVzaCh0aGlzLmNoaWxkcmVuW2ldKTtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgb3V0LmNvbmNhdCh0aGlzLmNoaWxkcmVuW2ldLmJmcyhjaGVjaykpO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9O1xyXG5cclxuICAgIFRyZWVOb2RlLmV4dGVuZCA9IGZ1bmN0aW9uIChkZWZhdWx0cykge1xyXG4gICAgICAgIHZhciBfVHJlZU5vZGUgPSBmdW5jdGlvbiAocGFyZW50LCBkYXRhKSB7XHJcbiAgICAgICAgICAgIFRyZWVOb2RlLmNhbGwodGhpcywgcGFyZW50LCBkYXRhKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIF9UcmVlTm9kZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFRyZWVOb2RlLnByb3RvdHlwZSk7XHJcbiAgICAgICAgX1RyZWVOb2RlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IF9UcmVlTm9kZTtcclxuICAgICAgICBleHRlbmQoX1RyZWVOb2RlLnByb3RvdHlwZSwgZGVmYXVsdHMpO1xyXG4gICAgICAgIHJldHVybiBuZXcgX1RyZWVOb2RlKG51bGwpO1xyXG4gICAgfTtcclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIEV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xyXG4gICAgfTtcclxuXHJcbiAgICBFdmVudEhhbmRsZXIucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgbmFtZSA9IGFyZ3VtZW50c1swXTtcclxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNbbmFtZV0gfHwgW107XHJcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGFyZ3VtZW50cywgMCwgMSk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UubG9nZ2VyLmRlYnVnKG5hbWUsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG5cclxuICAgIEV2ZW50SGFuZGxlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICghdGhpcy5saXN0ZW5lcnNbbmFtZV0pIHRoaXMubGlzdGVuZXJzW25hbWVdID0gW107XHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbbmFtZV0ucHVzaChjYWxsYmFjayk7XHJcbiAgICB9O1xyXG5cclxuICAgIEV2ZW50SGFuZGxlci5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmxpc3RlbmVyc1tuYW1lXTtcclxuICAgIH07XHJcblxyXG4gICAgRXZlbnRIYW5kbGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICh0aGlzLmxpc3RlbmVyc1tuYW1lXSkge1xyXG4gICAgICAgICAgICB2YXIgYXJyYXkgPSB0aGlzLmxpc3RlbmVyc1tuYW1lXTtcclxuICAgICAgICAgICAgaWYgKGFycmF5LmluZGV4T2YoY2FsbGJhY2spID4gLTEpIGFycmF5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB3aW5kb3cuRXZlbnRIYW5kbGVyID0gRXZlbnRIYW5kbGVyO1xyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbigpe1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gKCkge307XHJcblxyXG4gICAgdmFyIExvZ2dlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgaXNEZWJ1Zykge1xyXG4gICAgICAgIHRoaXMuZGVidWcgPSBpc0RlYnVnID8gY29uc29sZS5kZWJ1Zy5iaW5kKCkgOiBlbXB0eUZ1bmN0aW9uO1xyXG5cclxuICAgICAgICB0aGlzLmluZm8gPSBpc0RlYnVnID8gY29uc29sZS5pbmZvLmJpbmQoKSA6IGVtcHR5RnVuY3Rpb247XHJcblxyXG4gICAgICAgIHRoaXMud2FybiA9IGNvbnNvbGUud2Fybi5iaW5kKCk7XHJcblxyXG4gICAgICAgIHRoaXMuZXJyb3IgPSBjb25zb2xlLmVycm9yLmJpbmQoKTtcclxuICAgIH07XHJcblxyXG4gICAgd2luZG93LkxvZ2dlciA9IExvZ2dlcjtcclxufSkoKSk7XHJcbiIsIihmdW5jdGlvbigpe1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICAgICAgICBjb250YWluZXI6IHtcclxuICAgICAgICAgICAgc2VsZWN0b3I6ICcjY29id2ViJyxcclxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnY2ItY29udGFpbmVyJ1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdmFyIENvYndlYiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XHJcbiAgICAgICAgZXh0ZW5kKHRoaXMub3B0aW9ucywgb3B0aW9ucyB8fCB7fSk7XHJcblxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLm9wdGlvbnMuY29udGFpbmVyLnNlbGVjdG9yKTtcclxuICAgICAgICBpZiAoIXRoaXMuY29udGFpbmVyKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29udGFpbmVyIHNlbGVjdG9yOiBcXCcnICtcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5jb250YWluZXIuc2VsZWN0b3IgKyAnXFwnJyk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmNvbnRhaW5lci5jbGFzc05hbWUpO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmRhdGEoJ2luc3RhbmNlJywgdGhpcyk7XHJcblxyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbmV3IExvZ2dlcih0aGlzLCB0cnVlKTtcclxuICAgICAgICB0aGlzLmV2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXIodGhpcyk7XHJcbiAgICAgICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzLmxvYWQodGhpcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHdpbmRvdy5Db2J3ZWIgPSBDb2J3ZWI7XHJcbn0oKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUubW9kdWxlcyA9IHtcclxuICAgICAgICBhbGw6IHt9LFxyXG4gICAgICAgIGFkZDogZnVuY3Rpb24gKG5hbWUsIGluaXQsIGRlcGVuZGVuY2llcykge1xyXG4gICAgICAgICAgICBkZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXMgfHwgW107XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLmFsbFtuYW1lXSA9IHtcclxuICAgICAgICAgICAgICAgIGRlcGVuZGVuY2llczogZGVwZW5kZW5jaWVzLFxyXG4gICAgICAgICAgICAgICAgaW5pdDogaW5pdFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbG9hZDogZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIGFkZFJldmVyc2VEZXBlbmRlbmNpZXModGhpcy5hbGwpO1xyXG4gICAgICAgICAgICB2YXIgc29ydGVkTmFtZXMgPSB0b3BvbG9naWNhbFNvcnQoaW5zdGFuY2UsIHRoaXMuYWxsKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3J0ZWROYW1lcy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gc29ydGVkTmFtZXNbaV07XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsW25hbWVdLmluaXQoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLmV2ZW50cy50cmlnZ2VyKCdtb2R1bGVzLmxvYWRlZCcsIG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZXJyb3IoJ0xvYWRpbmcgbW9kdWxlICcgKyBuYW1lLCBleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuZXZlbnRzLnRyaWdnZXIoJ21vZHVsZXMuZXJyb3InLCBuYW1lLCBleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5zdGFuY2UuZXZlbnRzLnRyaWdnZXIoJ21vZHVsZXMubG9hZGVkLmFsbCcsIHNvcnRlZE5hbWVzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGFkZFJldmVyc2VEZXBlbmRlbmNpZXMgKG1vZHVsZXMpIHtcclxuICAgICAgICBmb3IgKHZhciBuYW1lIGluIG1vZHVsZXMpIHtcclxuICAgICAgICAgICAgdmFyIG1vZHVsZSA9IG1vZHVsZXNbbmFtZV07XHJcbiAgICAgICAgICAgIGlmICghbW9kdWxlLmRlcGVuZGFudCkgbW9kdWxlLmRlcGVuZGFudCA9IFtdO1xyXG4gICAgICAgICAgICBpZiAobW9kdWxlLmRlcGVuZGVuY2llcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5kZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVwUGx1Z2luID0gbW9kdWxlc1ttb2R1bGUuZGVwZW5kZW5jaWVzW2ldXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWRlcFBsdWdpbi5kZXBlbmRhbnQpIGRlcFBsdWdpbi5kZXBlbmRhbnQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBkZXBQbHVnaW4uZGVwZW5kYW50LnB1c2gobmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdG9wb2xvZ2ljYWxTb3J0IChpbnN0YW5jZSwgbW9kdWxlcykge1xyXG4gICAgICAgIHZhciBjYW5kaWRhdGVzID0gW10sIHNvcnRlZE5hbWVzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBtb2R1bGVzKVxyXG4gICAgICAgICAgICBpZiAobW9kdWxlc1tuYW1lXS5kZXBlbmRlbmNpZXMubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgY2FuZGlkYXRlcy5wdXNoKG5hbWUpO1xyXG4gICAgICAgIHdoaWxlIChjYW5kaWRhdGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIG5leHROYW1lID0gY2FuZGlkYXRlc1swXTtcclxuICAgICAgICAgICAgY2FuZGlkYXRlcy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgICAgIGlmIChtb2R1bGVzW25leHROYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vZHVsZSA9IG1vZHVsZXNbbmV4dE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgc29ydGVkTmFtZXMucHVzaChuZXh0TmFtZSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5kZXBlbmRhbnQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVwTmFtZSA9IG1vZHVsZS5kZXBlbmRhbnRbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbERlcGVuZGVuY2llc01ldChzb3J0ZWROYW1lcywgbW9kdWxlc1tkZXBOYW1lXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZXMucHVzaChkZXBOYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmV2ZW50cy50cmlnZ2VyKCdtb2R1bGVzLmVycm9yLm1pc3NpbmcnLCBuZXh0TmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIud2FybmluZygnTWlzc2luZyBtb2R1bGUgXFwnJyArIG5leHROYW1lICsgJ1xcJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhtb2R1bGVzKS5sZW5ndGggIT09IHNvcnRlZE5hbWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5ldmVudHMudHJpZ2dlcignbW9kdWxlcy5lcnJvci5jeWNsZScpO1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZXJyb3IoJ0RlcGVuZGVuY3kgY3ljbGUgZm91bmQgaW4gbW9kdWxlcycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc29ydGVkTmFtZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWxsRGVwZW5kZW5jaWVzTWV0IChsb2FkZWRVbnRpbE5vdywgbW9kdWxlKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUuZGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICBpZiAobG9hZGVkVW50aWxOb3cuaW5kZXhPZihtb2R1bGUuZGVwZW5kZW5jaWVzW2ldKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUubW9kdWxlcy5hZGQoJ3BhbmUtdHlwZXMnLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICB2YXIgcGFuZVR5cGVzID0ge1xyXG4gICAgICAgICAgICBhbGw6IHt9LFxyXG4gICAgICAgICAgICBhZGQ6IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hbGxbbmFtZV0gPSBjYWxsYmFjaztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWxsW25hbWVdO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5hbGxbbmFtZV07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGhhczogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhIXRoaXMuYWxsW25hbWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcGFuZVR5cGVzLmFkZCgnZGVmYXVsdCcsIGZ1bmN0aW9uIChwYW5lLCBpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZGVidWcoJ0RlZmF1bHQgcGFuZSB0eXBlICh0aGlzIGRvZXMgbm90aGluZyknKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UuZXZlbnRzLm9uKCdwYW5lLnNwbGl0JywgZnVuY3Rpb24gKG9sZFBhbmUsIG5ld1BhbmUpIHtcclxuICAgICAgICAgICAgdmFyIG9sZFR5cGUgPSBvbGRQYW5lLmF0dHJEYXRhKCdwYW5lLXR5cGUnKTtcclxuICAgICAgICAgICAgaWYgKG9sZFR5cGUpIGluc3RhbmNlLnBhbmUuc2V0VHlwZShuZXdQYW5lLCBvbGRUeXBlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UucGFuZS50eXBlcyA9IHBhbmVUeXBlcztcclxuXHJcbiAgICAgICAgaW5zdGFuY2UucGFuZS5zZXRUeXBlID0gZnVuY3Rpb24gKHBhbmUsIG5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudHlwZXMuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGVzLmdldChuYW1lKShwYW5lLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICBwYW5lLmF0dHJEYXRhKCdwYW5lLXR5cGUnLCBuYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9LCBbJ3BhbmUnXSk7XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMuYWRkKCdwYW5lJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UucGFuZSA9IG5ldyBQYW5lKHtcclxuICAgICAgICAgICAgY29udGFpbmVyOiBpbnN0YW5jZS5vcHRpb25zLmNvbnRhaW5lci5zZWxlY3RvcixcclxuICAgICAgICAgICAgc2VwYXJhdG9yOiB7XHJcbiAgICAgICAgICAgICAgICBzaXplOiAzXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNhbGxiYWNrczoge1xyXG4gICAgICAgICAgICAgICAgLy9vblBhbmVDcmVhdGU6IG9uUGFuZUNyZWF0ZSxcclxuICAgICAgICAgICAgICAgIG9uUGFuZVNwbGl0OiBvblBhbmVTcGxpdCxcclxuICAgICAgICAgICAgICAgIG9uUGFuZVJlc2l6ZTogb25QYW5lUmVzaXplLFxyXG4gICAgICAgICAgICAgICAgLy9vblBhbmVNZXJnZTogb25QYW5lTWVyZ2UsXHJcbiAgICAgICAgICAgICAgICAvL29uUGFuZURlc3Ryb3k6IG9uUGFuZURlc3Ryb3ksXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb25QYW5lQ3JlYXRlIChwYW5lKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ29uUGFuZUNyZWF0ZScsIHBhbmUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb25QYW5lU3BsaXQgKG9yaWdpbiwgbmV3UGFuZSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5ldmVudHMudHJpZ2dlcigncGFuZS5zcGxpdCcsIG9yaWdpbiwgbmV3UGFuZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBvblBhbmVSZXNpemUgKHBhbmUpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UuZXZlbnRzLnRyaWdnZXIoJ3BhbmUucmVzaXplJywgcGFuZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBvblBhbmVNZXJnZSAobWVyZ2VyLCB0b1JlbW92ZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdvblBhbmVNZXJnZScsIG1lcmdlciwgdG9SZW1vdmUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb25QYW5lRGVzdHJveSAocGFuZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdvblBhbmVEZXN0cm95JywgcGFuZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMuYWRkKCdzdXJmYWNlJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UucGFuZS50eXBlcy5hZGQoJ3N1cmZhY2UnLCBmdW5jdGlvbiAocGFuZSwgaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgICAgICAgICBwYW5lLmFwcGVuZChjYW52YXMpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBwcm9qOiBtYXQ0LmNyZWF0ZSgpLFxyXG4gICAgICAgICAgICAgICAgdmlldzogbWF0NC5jcmVhdGUoKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBtYXQ0LnBlcnNwZWN0aXZlKGRhdGEucHJvaiwgLTQ1ICogREVHMlJBRCxcclxuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCAvIGNhbnZhcy5oZWlnaHQsIDAuMSwgMTAwMCk7XHJcbiAgICAgICAgICAgIG1hdDQubG9va0F0KGRhdGEudmlldywgWzAsMiw0XSwgWzAsMCwwXSwgWzAsMSwwXSk7XHJcbiAgICAgICAgICAgIG1hdDQuc2NhbGUoZGF0YS52aWV3LCBkYXRhLnZpZXcsIFsxLDEuMiwxXSk7XHJcbiAgICAgICAgICAgIHBhbmUuZGF0YSgnc3VyZmFjZScsIGRhdGEpO1xyXG4gICAgICAgICAgICB1cGRhdGVDYW52YXNTaXplKHBhbmUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5ldmVudHMub24oJ3BhbmUucmVzaXplJywgZnVuY3Rpb24gKHBhbmUpIHtcclxuICAgICAgICAgICAgaWYgKHBhbmUuYXR0ckRhdGEoJ3BhbmUtdHlwZScpID09PSAnc3VyZmFjZScpIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUNhbnZhc1NpemUocGFuZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdmFyIHJvb3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGFuZScpO1xyXG4gICAgICAgIGluc3RhbmNlLnBhbmUuc2V0VHlwZShyb290LCAnc3VyZmFjZScpO1xyXG4gICAgICAgIGluc3RhbmNlLnBhbmUuc2V0UmVuZGVyKHJvb3QsICdzb2xpZCcpO1xyXG4gICAgfSwgWydwYW5lLXR5cGVzJywgJ3N1cmZhY2UtcmVuZGVyJ10pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZUNhbnZhc1NpemUgKHBhbmUpIHtcclxuICAgICAgICB2YXIgY2FudmFzID0gcGFuZS5xdWVyeVNlbGVjdG9yKCdjYW52YXMnKTtcclxuICAgICAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICAgIHZhciB3aWR0aCA9IHBhbmUud2lkdGgoKSwgaGVpZ2h0ID0gcGFuZS5oZWlnaHQoKTtcclxuICAgICAgICBwYW5lLmRhdGEoJ2J1ZmZlcicsIG5ldyBVaW50OEFycmF5KHdpZHRoICogaGVpZ2h0ICogNCkpO1xyXG4gICAgICAgIHBhbmUuZGF0YSgnaW1nRGF0YScsIGNvbnRleHQuY3JlYXRlSW1hZ2VEYXRhKHdpZHRoLCBoZWlnaHQpKTtcclxuXHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcclxuXHJcbiAgICAgICAgdmFyIGRhdGEgPSBwYW5lLmRhdGEoJ3N1cmZhY2UnKTtcclxuICAgICAgICBtYXQ0LnBlcnNwZWN0aXZlKGRhdGEucHJvaiwgLTQ1ICogREVHMlJBRCwgd2lkdGggLyBoZWlnaHQsIDAuMSwgMTAwMCk7XHJcbiAgICB9XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMuYWRkKCdyZW5kZXItc29saWQnLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICB2YXIgc2hhZGVyID0gbmV3IFNoYWRlcihcclxuICAgICAgICAgICAgJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDsnICtcclxuICAgICAgICAgICAgJ2F0dHJpYnV0ZSB2ZWMzIGFfdmVydGV4OycgK1xyXG4gICAgICAgICAgICAnYXR0cmlidXRlIHZlYzMgYV9ub3JtYWw7JyArXHJcbiAgICAgICAgICAgICd2YXJ5aW5nIHZlYzMgdl9ub3JtYWw7JyArXHJcbiAgICAgICAgICAgICd1bmlmb3JtIG1hdDQgdV9tdnA7JyArXHJcbiAgICAgICAgICAgICd1bmlmb3JtIG1hdDQgdV9tb2RlbDsnICtcclxuICAgICAgICAgICAgJ3ZvaWQgbWFpbigpIHsnICtcclxuICAgICAgICAgICAgJyAgICB2X25vcm1hbCA9ICh1X21vZGVsICogdmVjNChhX25vcm1hbCwwLjApKS54eXo7JyArXHJcbiAgICAgICAgICAgICcgICAgZ2xfUG9zaXRpb24gPSB1X212cCAqIHZlYzQoYV92ZXJ0ZXgsMS4wKTsnICtcclxuICAgICAgICAgICAgJ30nLFxyXG4gICAgICAgICAgICAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0OycgK1xyXG4gICAgICAgICAgICAndmFyeWluZyB2ZWMzIHZfbm9ybWFsOycgK1xyXG4gICAgICAgICAgICAndW5pZm9ybSB2ZWMzIHVfbGlnaHR2ZWN0b3I7JyArXHJcbiAgICAgICAgICAgICd1bmlmb3JtIHZlYzQgdV9jb2xvcjsnICtcclxuICAgICAgICAgICAgJ3ZvaWQgbWFpbigpIHsnICtcclxuICAgICAgICAgICAgJyAgdmVjMyBOID0gbm9ybWFsaXplKHZfbm9ybWFsKTsnICtcclxuICAgICAgICAgICAgJyAgZ2xfRnJhZ0NvbG9yID0gdV9jb2xvciAqIG1heCgwLjAsIGRvdCh1X2xpZ2h0dmVjdG9yLE4pKTsnICtcclxuICAgICAgICAgICAgJ30nXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdmFyIHRlbXAgPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICAgIHZhciBtdnAgPSBtYXQ0LmNyZWF0ZSgpO1xyXG5cclxuICAgICAgICB2YXIgdW5pZm9ybXMgPSB7XHJcbiAgICAgICAgICAgIHVfY29sb3I6IFsxLCAxLCAxLCAxXSxcclxuICAgICAgICAgICAgdV9saWdodHZlY3RvcjogdmVjMy5ub3JtYWxpemUodmVjMy5jcmVhdGUoKSwgWzEsIDIsIDNdKSxcclxuICAgICAgICAgICAgdV9tb2RlbDogbnVsbCxcclxuICAgICAgICAgICAgdV9tdnA6IG12cFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmdyYXBoaWNzLnJlbmRlcnMuYWRkKCdzb2xpZCcsIGZ1bmN0aW9uIChzdXJmYWNlKSB7XHJcbiAgICAgICAgICAgIHZhciBvYmpzID0gaW5zdGFuY2Uuc2NlbmUucm9vdC5kZnMoKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmpzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0gb2Jqc1tpXS5kYXRhO1xyXG4gICAgXHRcdFx0bWF0NC5tdWx0aXBseSh0ZW1wLCBzdXJmYWNlLnZpZXcsIG9iai5tb2RlbCk7XHJcbiAgICBcdFx0XHRtYXQ0Lm11bHRpcGx5KG12cCwgc3VyZmFjZS5wcm9qLCB0ZW1wKTtcclxuXHJcbiAgICBcdFx0XHR1bmlmb3Jtcy51X21vZGVsID0gb2JqLm1vZGVsO1xyXG4gICAgXHRcdFx0c2hhZGVyLnVuaWZvcm1zKHVuaWZvcm1zKS5kcmF3KG9iai5tZXNoLCBvYmoucHJpbWl0aXZlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0sIFsnZ3JhcGhpY3MtcmVuZGVyJ10pO1xyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzLmFkZCgnc3VyZmFjZS1yZW5kZXInLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBpbnN0YW5jZS5wYW5lLnNldFJlbmRlciA9IGZ1bmN0aW9uIChwYW5lLCBuYW1lKSB7XHJcbiAgICAgICAgICAgIHZhciByZW5kZXJzID0gaW5zdGFuY2UuZ3JhcGhpY3MucmVuZGVycztcclxuICAgICAgICAgICAgaWYgKHJlbmRlcnMuaGFzKG5hbWUpKVxyXG4gICAgICAgICAgICAgICAgcGFuZS5hdHRyRGF0YSgnc3VyZmFjZS1yZW5kZXInLCBuYW1lKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5wYW5lLmdldFJlbmRlciA9IGZ1bmN0aW9uIChwYW5lKSB7XHJcbiAgICAgICAgICAgIHZhciByZW5kZXJzID0gaW5zdGFuY2UuZ3JhcGhpY3MucmVuZGVycztcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSBwYW5lLmF0dHJEYXRhKCdzdXJmYWNlLXJlbmRlcicpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVuZGVycy5nZXQobmFtZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UuZXZlbnRzLm9uKCdwYW5lLnNwbGl0JywgZnVuY3Rpb24gKG9sZFBhbmUsIG5ld1BhbmUpIHtcclxuICAgICAgICAgICAgbmV3UGFuZS5hdHRyRGF0YSgnc3VyZmFjZS1yZW5kZXInLCBvbGRQYW5lLmF0dHJEYXRhKCdzdXJmYWNlLXJlbmRlcicpKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sIFsnZ3JhcGhpY3MtcmVuZGVyJ10pO1xyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzLmFkZCgnb2JqZWN0LWludGVyYWN0aW9uJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmludGVyYWN0aW9uLmFkZCgnb2JqZWN0Jywge1xyXG4gICAgICAgICAgICBvbk1vdXNlRG93bjogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZGVidWcoJ29uTW91c2VEb3duJywgZXZlbnQpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbk1vdXNlVXA6IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UubG9nZ2VyLmRlYnVnKCdvbk1vdXNlVXAnLCBldmVudCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uTW91c2VNb3ZlOiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmxvZ2dlci5kZWJ1Zygnb25Nb3VzZU1vdmUnLCBldmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9LCBbJ3N1cmZhY2UtcmVuZGVyJ10pO1xyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzLmFkZCgnc3VyZmFjZS1pbnRlcmFjdGlvbicsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGluc3RhbmNlLnBhbmUuc2V0SW50ZXJhY3Rpb24gPSBmdW5jdGlvbiAocGFuZSwgbmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb25zID0gaW5zdGFuY2UuaW50ZXJhY3Rpb247XHJcbiAgICAgICAgICAgIGlmIChpbnRlcmFjdGlvbnMuaGFzKG5hbWUpKVxyXG4gICAgICAgICAgICAgICAgcGFuZS5hdHRyRGF0YSgnc3VyZmFjZS1pbnRlcmFjdGlvbicsIG5hbWUpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGluc3RhbmNlLnBhbmUuZ2V0SW50ZXJhY3Rpb24gPSBmdW5jdGlvbiAocGFuZSkge1xyXG4gICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb25zID0gaW5zdGFuY2UuaW50ZXJhY3Rpb247XHJcbiAgICAgICAgICAgIHZhciBuYW1lID0gcGFuZS5hdHRyRGF0YSgnc3VyZmFjZS1pbnRlcmFjdGlvbicpO1xyXG4gICAgICAgICAgICByZXR1cm4gaW50ZXJhY3Rpb25zLmdldChuYW1lKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5ldmVudHMub24oJ3BhbmUuc3BsaXQnLCBmdW5jdGlvbiAob2xkUGFuZSwgbmV3UGFuZSkge1xyXG4gICAgICAgICAgICBuZXdQYW5lLmF0dHJEYXRhKCdzdXJmYWNlLWludGVyYWN0aW9uJywgb2xkUGFuZS5hdHRyRGF0YSgnc3VyZmFjZS1pbnRlcmFjdGlvbicpKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sIFsnaW50ZXJhY3Rpb24tbW9kZSddKTtcclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUubW9kdWxlcy5hZGQoJ2dyYXBoaWNzLXJlbmRlcicsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGluc3RhbmNlLmdyYXBoaWNzLnJlbmRlcnMgPSB7XHJcbiAgICAgICAgICAgIGFsbDoge30sXHJcbiAgICAgICAgICAgIGFkZDogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFsbFtuYW1lXSA9IGNhbGxiYWNrO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hbGxbbmFtZV07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFsbFtuYW1lXTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaGFzOiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5hbGxbbmFtZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSwgWydncmFwaGljcyddKTtcclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBHcmFwaGljcyA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgICAgICB0aGlzLmdsID0gR0wuY3JlYXRlKHtcclxuICAgICAgICAgICAgaGVpZ2h0OiBzY3JlZW4uaGVpZ2h0LFxyXG4gICAgICAgICAgICB3aWR0aDogc2NyZWVuLndpZHRoXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5nbC5hbmltYXRlKCk7XHJcbiAgICAgICAgdGhpcy5nbC5vbmRyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZW5kZXJUYXJnZXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnY2FudmFzJyk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVuZGVyVGFyZ2V0cy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgIGRyYXdSZW5kZXJUYXJnZXQoaW5zdGFuY2UsIHJlbmRlclRhcmdldHNbaV0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5nbC5jbGVhckNvbG9yKDAuNCwgMC40LCAwLjQsIDEpO1xyXG4gICAgICAgIHRoaXMuZ2wuZW5hYmxlKHRoaXMuZ2wuREVQVEhfVEVTVCk7XHJcbiAgICB9O1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUubW9kdWxlcy5hZGQoJ2dyYXBoaWNzJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UuZ3JhcGhpY3MgPSBuZXcgR3JhcGhpY3MoaW5zdGFuY2UpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gZHJhd1JlbmRlclRhcmdldCAoaW5zdGFuY2UsIGNhbnZhcykge1xyXG4gICAgICAgIHZhciBwYW5lID0gY2FudmFzLnBhcmVudCgnLnBhbmUnKTtcclxuICAgICAgICB2YXIgaW1hZ2VEYXRhID0gcGFuZS5kYXRhKCdpbWdEYXRhJyk7XHJcbiAgICAgICAgdmFyIHN1cmZhY2UgPSBwYW5lLmRhdGEoJ3N1cmZhY2UnKTtcclxuICAgICAgICB2YXIgYnVmZmVyID0gcGFuZS5kYXRhKCdidWZmZXInKTtcclxuICAgICAgICB2YXIgZ2wgPSBpbnN0YW5jZS5ncmFwaGljcy5nbDtcclxuXHJcbiAgICAgICAgdmFyIHdpZHRoICA9IGNhbnZhcy5jbGllbnRXaWR0aCwgaGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodDtcclxuICAgICAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUIHwgZ2wuREVQVEhfQlVGRkVSX0JJVCk7XHJcbiAgICAgICAgZ2wudmlld3BvcnQoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcblxyXG4gICAgICAgIHZhciByZW5kZXIgPSBpbnN0YW5jZS5wYW5lLmdldFJlbmRlcihwYW5lKTtcclxuICAgICAgICBpZiAocmVuZGVyKSByZW5kZXIoc3VyZmFjZSk7XHJcblxyXG4gICAgICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgICAgaWYgKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgZ2wucmVhZFBpeGVscygwLCAwLCB3aWR0aCwgaGVpZ2h0LCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBidWZmZXIpO1xyXG4gICAgICAgICAgICBpbWFnZURhdGEuZGF0YS5zZXQoYnVmZmVyKTtcclxuICAgICAgICAgICAgY29udGV4dC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMuYWRkKCdpbnRlcmFjdGlvbi1tb2RlJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgdmFyIGludGVyYWN0aW9uTW9kZXMgPSB7XHJcbiAgICAgICAgICAgIGFsbDoge30sXHJcbiAgICAgICAgICAgIGFkZDogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hbGxbbmFtZV0gPSBjYWxsYmFja3M7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFsbFtuYW1lXTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuYWxsW25hbWVdO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBoYXM6IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gISF0aGlzLmFsbFtuYW1lXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmludGVyYWN0aW9uID0gaW50ZXJhY3Rpb25Nb2RlcztcclxuICAgIH0pO1xyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzLmFkZCgnc2NlbmUnLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBpbnN0YW5jZS5zY2VuZSA9IHtcclxuICAgICAgICAgICAgcm9vdDogVHJlZU5vZGUuZXh0ZW5kKHt9KVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBtYXQgPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICAgIG1hdDQucm90YXRlWShtYXQsIG1hdCwgMC44KTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2Uuc2NlbmUucm9vdC5hZGQoe1xyXG4gICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcclxuICAgICAgICAgICAgcHJpbWl0aXZlOiBpbnN0YW5jZS5ncmFwaGljcy5nbC5UUklBTkdMRVMsXHJcbiAgICAgICAgICAgIG1lc2g6IEdMLk1lc2guY3ViZSgpLFxyXG4gICAgICAgICAgICBtb2RlbDogbWF0LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgWydncmFwaGljcyddKTtcclxufSkoKSk7XHJcbiJdfQ==
