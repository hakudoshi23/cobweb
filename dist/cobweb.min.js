"use strict";!function(){function e(e,t,n){e[t]||(e[t]=n)}e(Array.prototype,"unique",function(){for(var e=this.concat(),t=0;t<e.length;++t)for(var n=t+1;n<e.length;++n)e[t]===e[n]&&e.splice(n--,1);return e}),e(HTMLElement.prototype,"addClass",function(){for(var e in arguments){var t=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[],n=arguments[e]?arguments[e].trim().replace(/\s+/g," ").split(" "):[];this.className=t.concat(n).unique().join(" ")}}),e(HTMLElement.prototype,"height",function(){return this.getBoundingClientRect().height}),e(HTMLElement.prototype,"width",function(){return this.getBoundingClientRect().width}),e(Object,"keys",function(){var e=Object.prototype.hasOwnProperty,t=!{toString:null}.propertyIsEnumerable("toString"),n=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],o=n.length;return function(i){if("object"!=typeof i&&("function"!=typeof i||null===i))throw new TypeError("Object.keys called on non-object");var r,a,s=[];for(r in i)e.call(i,r)&&s.push(r);if(t)for(a=0;a<o;a++)e.call(i,n[a])&&s.push(n[a]);return s}}())}(),function(){var e=function(){this.listeners={}};e.prototype.trigger=function(){for(var e=arguments[0],t=this.listeners[e]||[],n=0;n<t.length;n++)Array.prototype.splice.call(arguments,0,1),t[n].apply(null,arguments)},e.prototype.on=function(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t)},e.prototype.off=function(e){delete this.listeners[e]},e.prototype.off=function(e,t){if(this.listeners[e]){var n=this.listeners[e];n.indexOf(t)>-1&&n.splice(index,1)}},window.EventHandler=e}(),function(){function e(t,n){for(var o in n)if(n.hasOwnProperty(o)){var i=n[o];"object"==typeof i?e(t[o],n[o]):t[o]=n[o]}}var t=function(n){this.options={container:{selector:"#cobweb",className:"cb-container"},menu:{className:"cb-menu"},logger:{className:"cb-logger"}},n&&"object"==typeof n&&e(this.options,n),this.container=document.querySelector(this.options.container.selector),this.container.addClass(this.options.container.className),this.events=new EventHandler,this.events.on("core.resize",function(e){e.plugins.surface.gl.canvas.height=e.container.height(),e.plugins.surface.gl.canvas.width=e.container.width()}),t.prototype.plugins.load(this);var o=this;window.addEventListener("resize",function(e){o.events.trigger("core.resize",o)})};window.Cobweb=t}(),function(){Cobweb.prototype.plugins=new function(){this.available={},this.add=function(){var e,t,n;if(2==arguments.length){if(e=arguments[0],n=arguments[1],t=[],"string"!=typeof e)throw new Error("Parameter 1: expected string, found "+typeof e);if("function"!=typeof n)throw new Error("Parameter 1: expected function, found "+typeof n)}else{if(3!=arguments.length)throw new Error("Invalid parameters: must be 2 or 3, found "+arguments.length);if(e=arguments[0],t=arguments[1],n=arguments[2],"string"!=typeof e)throw new Error("Parameter 1: expected string, found "+typeof e);if("array"!=typeof t)throw new Error("Parameter 2: expected array, found "+typeof t);if("function"!=typeof n)throw new Error("Parameter 3: expected function, found "+typeof n)}this.available[e]={dependencies:t,callback:n}},this.load=function(e){e.plugins={};for(var t in this.available)try{var n=new this.available[t].callback(e);e.events.trigger("plugins.loaded",t),e.plugins[t]=n}catch(n){e.events.trigger("plugins.error",t,n)}e.events.trigger("plugins.loaded.all",Object.keys(e.plugins))}}}(),function(){var e=function(e){var t=document.createElement("DIV");t.addClass(e.options.logger.className),e.container.append(t);var n=document.createElement("DIV");n.innerHTML="Lorem ipsum...",n.addClass("info"),t.append(n),this.info=function(e){n.innerHTML=e},e.events.on("logger.info",this.info)};Cobweb.prototype.plugins.add("logger",e)}(),function(){var e=function(e){this.container=document.createElement("DIV"),this.container.addClass(e.options.menu.className),e.container.append(this.container);var t=document.createElement("UL");t.addClass("main-menu"),this.container.append(t),this.items={File:{"Load...":function(){console.log("item click!")}},"Alert!":function(){e.events.trigger("logger.info","LOOK AT ME! O_O"),window.setTimeout(function(){e.events.trigger("logger.info","STAPH!")},2e3)},Help:{"About WebMesh":function(){console.log("About what?!")}}},this.update=function(){for(var e in this.items){var t=document.createElement("LI");t.innerHTML=e,t.addClass(e);var n=this.items[e];"function"==typeof n&&(t.onclick=n);var o=this.container.querySelector(".main-menu");o.append(t)}},this.update()};Cobweb.prototype.plugins.add("menu",e)}(),function(){var e=function(e){this.gl=GL.create({height:e.container.height(),width:e.container.width()}),this.gl.animate();var t={};t.primitive=this.gl.TRIANGLES,t.model=mat4.create(),t.mesh=GL.Mesh.cube();var n=mat4.create(),o=mat4.create(),i=mat4.create(),r=mat4.create(),a=mat4.create();mat4.perspective(n,45*DEG2RAD,this.gl.canvas.width/this.gl.canvas.height,.1,1e3),mat4.lookAt(o,[0,10,10],[0,0,0],[0,1,0]);var s=new Shader("precision highp float;            attribute vec3 a_vertex;            attribute vec3 a_normal;            varying vec3 v_normal;            uniform mat4 u_mvp;            uniform mat4 u_model;            void main() {                v_normal = (u_model * vec4(a_normal,0.0)).xyz;                gl_Position = u_mvp * vec4(a_vertex,1.0);            }","precision highp float;            varying vec3 v_normal;            uniform vec3 u_lightvector;            uniform vec4 u_color;            void main() {              vec3 N = normalize(v_normal);              gl_FragColor = u_color * max(0.0, dot(u_lightvector,N));            }");this.gl.clearColor(.4,.4,.4,1),this.gl.enable(this.gl.DEPTH_TEST);var l={u_color:[1,1,1,1],u_lightvector:vec3.normalize(vec3.create(),[1,1,1]),u_model:i,u_mvp:r},c=this;this.gl.ondraw=function(){c.gl.clear(c.gl.COLOR_BUFFER_BIT|c.gl.DEPTH_BUFFER_BIT),mat4.multiply(a,o,t.model),mat4.multiply(r,n,a),l.u_model=t.model,s.uniforms(l).draw(t.mesh,t.primitive)},this.gl.onupdate=function(e){mat4.rotateY(t.model,t.model,.2*e)},e.container.append(this.gl.canvas)};Cobweb.prototype.plugins.add("surface",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
