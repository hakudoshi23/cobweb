!function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}e(Array.prototype,"unique",function(){for(var e=this.concat(),t=0;t<e.length;++t)for(var n=t+1;n<e.length;++n)e[t]===e[n]&&e.splice(n--,1);return e}),e(Array.prototype,"forEach",function(e){for(var t=0;t<this.length;t++)e(this[t],t,this)})}(),function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}function t(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}e(HTMLElement.prototype,"addClass",function(){var e,t;for(var n in arguments)e=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[],t=arguments[n]?arguments[n].trim().replace(/\s+/g," ").split(" "):[],this.className=e.concat(t).unique().join(" ")}),e(HTMLElement.prototype,"hasClass",function(){var e,t=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[];for(var n in arguments){e=arguments[n]?arguments[n].trim().replace(/\s+/g," ").split(" "):[];for(var r=0;r<e.length;r++){var o=e[r];if(t.indexOf(o)==-1)return!1}}return!0}),e(HTMLElement.prototype,"removeClass",function(){var e,t,n=0,r=function(t){n=e.indexOf(t),n!=-1&&e.splice(n,1)};for(var o in arguments)e=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[],t=arguments[o]?arguments[o].trim().replace(/\s+/g," ").split(" "):[],t.forEach(r),this.className=e.unique().join(" ")}),e(HTMLElement.prototype,"data",function(e,t){window.__data_cache||(window.__data_cache=new WeakMap);var n=window.__data_cache.get(this)||{};return void 0===t?e?n&&n[e]:n:(n[e]=t,window.__data_cache.set(this,n),this)}),e(HTMLElement.prototype,"setData",function(e){return window.__data_cache||(window.__data_cache=new WeakMap),window.__data_cache.set(this,e),this}),e(HTMLElement.prototype,"attr",function(e,t){if(void 0!==t)this.setAttribute(e,t);else{if(null!==t)return this.getAttribute(e);this.removeAttribute(e)}return this}),e(HTMLElement.prototype,"attrData",function(e,t){return this.attr("data-"+e,t)}),e(Element.prototype,"matches",Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(e){for(var t=(this.document||this.ownerDocument).querySelectorAll(e),n=t.length;--n>=0&&t.item(n)!==this;);return n>-1}),e(HTMLElement.prototype,"parent",function(e){if(!e)return this.parentElement;for(var t=this.parentElement;!t.matches(e);)t=t.parentElement;return t}),e(HTMLElement.prototype,"height",function(){if(1!=arguments.length)return this.clientHeight;var e=arguments[0];"number"==typeof e?this.style.height=e+"px":this.style.height=e}),e(HTMLElement.prototype,"width",function(){if(1!=arguments.length)return this.clientWidth;var e=arguments[0];"number"==typeof e?this.style.width=e+"px":this.style.width=e}),e(window,"guid",function(){return"GUID-"+t()+"-"+t()+"-"+t()}),e(HTMLElement.prototype,"guid",function(){var e=null,t=null;do e=window.guid(),t=document.querySelector("#"+e);while(t);return this.attr("id",e),e})}(),function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}window.extend=function(e,t){for(var n in t)if(n&&t.hasOwnProperty(n)){var r=t[n];"object"==typeof r?extend(e[n],t[n]):e[n]=t[n]}},e(Object,"clone",function(e){var t={};for(var n in e)if(e.hasOwnProperty(n)){var r=e[n];"object"==typeof r?t[n]=Object.clone(e[n]):t[n]=e[n]}return t})}(),function(){"use strict";var e=function(e,t){this.data=t||{},this.parent=e,this.children=[]};window.TreeNode=e,e.prototype.isRoot=function(){return!this.parent},e.prototype.add=function(e){var t=new this.constructor(this,e);return this.children.push(t),t},e.prototype.remove=function(e){return this.children.slice(e,1),this},e.prototype.dfs=function(e){for(var t=[],n=0;n<this.children.length;n++)(!e||e&&e(this.children[n]))&&t.push(this.children[n]),t.concat(this.children[n].dfs(e));return t},e.prototype.bfs=function(e){var t,n=[];for(t=0;t<this.children.length;t++)(!e||e&&e(this.children[t]))&&n.push(this.children[t]);for(t=0;t<this.children.length;t++)n.concat(this.children[t].bfs(e));return n},e.extend=function(t){var n=function(t,n){e.call(this,t,n)};return n.prototype=Object.create(e.prototype),n.prototype.constructor=n,extend(n.prototype,t),new n(null)}}(),function(){"use strict";var e=function(e){this.instance=e,this.listeners={}};e.prototype.trigger=function(){var e=arguments[0],t=this.listeners[e]||[];Array.prototype.splice.call(arguments,0,1),this.instance.logger.debug(e,arguments);for(var n=0;n<t.length;n++)t[n].apply(null,arguments)},e.prototype.on=function(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t)},e.prototype.off=function(e){delete this.listeners[e]},e.prototype.off=function(e,t){if(this.listeners[e]){var n=this.listeners[e];n.indexOf(t)>-1&&n.splice(index,1)}},window.EventHandler=e}(),function(){"use strict";var e=function(){},t=function(t,n){this.debug=n?console.debug.bind():e,this.info=n?console.info.bind():e,this.warn=console.warn.bind(),this.error=console.error.bind()};window.Logger=t}(),function(){"use strict";var e={container:{selector:"#cobweb",className:"cb-container"}},t=function(n){if(this.options=e,extend(this.options,n||{}),this.container=document.querySelector(this.options.container.selector),!this.container)throw new Error("Invalid container selector: '"+this.options.container.selector+"'");this.container.addClass(this.options.container.className),this.container.data("instance",this),this.logger=new Logger(this,!0),this.events=new EventHandler(this),t.prototype.modules.load(this),this.events.trigger("app.loaded")};window.Cobweb=t}(),function(){"use strict";function e(e){for(var t in e){var n=e[t];if(n.dependant||(n.dependant=[]),n.dependencies.length>0)for(var r=0;r<n.dependencies.length;r++){var o=e[n.dependencies[r]];o.dependant||(o.dependant=[]),o.dependant.push(t)}}}function t(e,t){var r=[],o=[];for(var a in t)0===t[a].dependencies.length&&r.push(a);for(;r.length>0;){var i=r[0];if(r.splice(0,1),t[i]){var s=t[i];o.push(i);for(var c=0;c<s.dependant.length;c++){var u=s.dependant[c];n(o,t[u])&&r.push(u)}}else e.events.trigger("modules.error.missing",i),e.logger.warning("Missing module '"+i+"'")}return Object.keys(t).length!==o.length&&(e.events.trigger("modules.error.cycle"),e.logger.error("Dependency cycle found in modules")),o}function n(e,t){for(var n=0;n<t.dependencies.length;n++)if(e.indexOf(t.dependencies[n])===-1)return!1;return!0}Cobweb.prototype.modules={all:{},add:function(e,t,n){n=n||[],this.all[e]={dependencies:n,init:t}},load:function(n){this.instance=n,e(this.all);for(var r=t(n,this.all),o=0;o<r.length;o++){var a=r[o];try{this.all[a].init(n),n.events.trigger("modules.loaded",a)}catch(e){n.logger.error("Loading module "+a,e),n.events.trigger("modules.error",a,e)}}n.events.trigger("modules.loaded.all",r)},print:function(e){if(e)for(var t in this.all){var n=this.all[t];e.logger.debug("Name: ",t),e.logger.debug("\tDependencies: ",n.dependencies),e.logger.debug("\tDependant: ",n.dependant)}else console.error('Error: "load" should be called before "print"')}}}(),function(){"use strict";function e(e,n){var r=t();e.append(r)}function t(){var e=document.createElement("div");return e.className="pane-header",e}Cobweb.prototype.modules.add("pane-header",function(t){t.events.on("pane.create",function(n){e(n,t)})},["pane-types"])}(),function(){"use strict";Cobweb.prototype.modules.add("pane-types",function(e){var t={all:{},add:function(e,t){this.all[e]=t},get:function(e){return this.all[e]},remove:function(e){delete this.all[e]},has:function(e){return!!this.all[e]}};e.events.on("pane.split",function(t,n){var r=t.attrData("pane-type");r&&e.pane.setType(n,r)}),e.pane.types=t,e.pane.setType=function(t,n){if(this.types.has(n)){var r=this.types.get(n);r.onPaneType(t,e);var o=t.querySelector(".pane-header");r.onCreateHeader(o,e),t.attrData("pane-type",n)}}},["pane"])}(),function(){"use strict";Cobweb.prototype.modules.add("pane",function(e){function t(t){e.events.trigger("pane.create",t)}function n(t,n){e.events.trigger("pane.split",t,n)}function r(t){e.events.trigger("pane.resize",t)}e.events.on("app.loaded",function(){e.pane.internal=new Pane({container:e.options.container.selector,separator:{size:3},callbacks:{onPaneCreate:t,onPaneSplit:n,onPaneResize:r}})}),e.pane={}})}(),function(){"use strict";Cobweb.prototype.modules.add("interaction-mode",function(e){e.surface.interaction={all:{},add:function(e,t){this.all[e]=t},get:function(e){return this.all[e]},remove:function(e){delete this.all[e]},has:function(e){return!!this.all[e]}}},["surface"])}(),function(){"use strict";function e(e,t){var o=document.createElement("canvas");o.id="surface"+r++,o.className="surface",e.append(o),t.surface.data=t.surface.data||{},t.surface.data[o.id]={},t.surface.data[o.id].surface={proj:mat4.create(),center:[0,0,0],rotation:[0,-.4],distance:5,getView:function(e){var t=[0,1,0],n=[0,0,-this.distance];vec3.rotateX(n,n,this.rotation[1]),vec3.rotateY(n,n,-this.rotation[0]),vec3.add(n,n,this.center),mat4.lookAt(e,n,this.center,t)}},n(t,e),t.events.trigger("surface.create",o)}function t(e,t){var n=document.createElement("label");n.innerHTML="Surface Pane",e.appendChild(n)}function n(e,t){var n=t.querySelector("canvas"),r=n.getContext("2d"),o=e.surface.data[n.id],a=t.querySelector(".pane-header"),i=a?a.height():0,s=t.width(),c=t.height()-i;o.imgData=r.createImageData(s,c),o.buffer=new Uint8Array(s*c*4),n.height=c,n.width=s,mat4.perspective(o.surface.proj,45*DEG2RAD,s/c,.1,1e3)}var r=0;Cobweb.prototype.modules.add("surface",function(r){r.pane.types.add("surface",{onPaneType:e,onCreateHeader:t}),r.events.on("pane.resize",function(e){"surface"===e.attrData("pane-type")&&n(r,e)}),window.addEventListener("resize",function(e){for(var t=r.pane.internal.container.querySelectorAll(".pane canvas"),o=0;o<t.length;o++)n(r,t[o].parentNode)}),r.events.on("pane.create",function(e){r.pane.setType(e,"surface")}),r.surface={}},["pane-types"])}(),function(){"use strict";function e(e,t,n){t&&(e[0]=t[0]+.005*n[0],e[1]=t[1]+.005*n[1])}function t(e,t){return e?[e[0]-t[0],e[1]-t[1]]:[0,0]}var n=null,r=null;Cobweb.prototype.modules.add("common-interaction",function(o){o.surface.interaction.add("common",{onMouseMove:function(a,i){if(a.target.dataset.moving){var s=a.target,c=o.surface.data[s.id];if(c){var u=t(r,i);e(c.surface.rotation,n,u)}}return!1},onMouseDown:function(e,t){e.target.dataset.moving="true";var a=e.target,i=o.surface.data[a.id];return n=i.surface.rotation.slice(),r=t,!0},onMouseUp:function(a,i){delete a.target.dataset.moving;var s=a.target,c=o.surface.data[s.id],u=t(r,i);return e(c.surface.rotation,n,u),r=null,!0},onClick:function(e,t){return!0}})},["surface-interaction"])}(),function(){"use strict";Cobweb.prototype.modules.add("object-interaction",function(e){e.surface.interaction.add("object",{onMouseMove:function(e,t){return!0},onMouseDown:function(t,n){return e.logger.debug("onMouseDown",t),!0},onMouseUp:function(t,n){return e.logger.debug("onMouseUp",t),!0},onClick:function(t,n){return e.logger.debug("onClick",t),!0}}),e.events.on("surface.create",function(t){e.surface.setInteraction(t,"object")})},["surface-interaction"])}(),function(){"use strict";function e(e,n){var r=t(n);switch(n.type){case"mousemove":return e.onMouseMove(n,r);case"mousedown":return e.onMouseDown(n,r);case"mouseup":return e.onMouseUp(n,r);case"click":return e.onClick(n,r)}}function t(e){var t;return t=e.pageX||e.pageY?[e.pageX,e.pageY]:[e.clientX+document.body.scrollLeft+document.documentElement.scrollLeft,e.clientY+document.body.scrollTop+document.documentElement.scrollTop],t[0]-=e.target.offsetLeft,t[1]-=e.target.offsetTop,t}Cobweb.prototype.modules.add("surface-interaction",function(t){function n(n){var r=t.surface.getInteraction(n.target),o=e(r,n);if(o){var a=t.surface.interaction.get("common");e(a,n)}}t.surface.setInteraction=function(e,n){var r=t.surface.interaction;r.has(n)&&e.attrData("surface-interaction",n)},t.surface.getInteraction=function(e){var n=t.surface.interaction,r=e.attrData("surface-interaction");return n.get(r)},t.events.on("surface.create",function(e){e.onmousemove=n,e.onmousedown=n,e.onmouseup=n,e.onclick=n}),t.events.on("pane.split",function(e,t){t.attrData("surface-interaction",e.attrData("surface-interaction"))})},["interaction-mode","surface"])}(),function(){"use strict";Cobweb.prototype.modules.add("render-solid",function(e){var t=new Shader("precision highp float;attribute vec3 a_vertex;attribute vec3 a_normal;varying vec3 v_normal;uniform mat4 u_mvp;uniform mat4 u_model;void main() {    v_normal = (u_model * vec4(a_normal,0.0)).xyz;    gl_Position = u_mvp * vec4(a_vertex,1.0);}","precision highp float;varying vec3 v_normal;uniform vec3 u_lightvector;uniform vec4 u_color;void main() {  vec3 N = normalize(v_normal);  gl_FragColor = u_color * max(0.0, dot(u_lightvector,N));}"),n=mat4.create(),r=mat4.create(),o={u_color:[1,1,1,1],u_lightvector:vec3.normalize(vec3.create(),[1,-5,-3]),u_model:null,u_mvp:r};e.graphics.renders.add("solid",function(a){for(var i=e.scene.root.dfs(),s=0;s<i.length;s++){var c=i[s].data;a.getView(n),mat4.multiply(n,n,c.model),mat4.multiply(r,a.proj,n),o.u_model=c.model,t.uniforms(o).draw(c.mesh,c.primitive)}}),e.events.on("surface.create",function(t){e.surface.setRender(t,"solid")})},["surface-render"])}(),function(){"use strict";Cobweb.prototype.modules.add("surface-render",function(e){e.surface.setRender=function(t,n){var r=e.graphics.renders;r.has(n)&&t.attrData("render",n)},e.surface.getRender=function(t){var n=e.graphics.renders,r=t.attrData("render");return n.get(r)};for(var t=document.querySelectorAll(".pane"),n=0;n<t.length;n++)if("surface"==t[n].dataset.paneType){var r=t[n].querySelector("canvas");r.dataset.render="solid"}e.events.on("pane.split",function(e,t){t.attrData("surface-render",e.attrData("surface-render"))})},["graphics-render","surface"])}(),function(){"use strict";Cobweb.prototype.modules.add("graphics-render",function(e){e.graphics.renders={all:{},add:function(e,t){this.all[e]=t},get:function(e){return this.all[e]},remove:function(e){delete this.all[e]},has:function(e){return!!this.all[e]}}},["graphics"])}(),function(){"use strict";function e(e,t){var n=e.surface.data[t.id],r=e.graphics.gl,o=t.clientWidth,a=t.clientHeight;r.clear(r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT),r.viewport(0,0,o,a);var i=e.surface.getRender(t);i&&i(n.surface);var s=t.getContext("2d");s&&(r.readPixels(0,0,o,a,r.RGBA,r.UNSIGNED_BYTE,n.buffer),n.imgData.data.set(n.buffer),s.putImageData(n.imgData,0,0))}var t=function(t){this.instance=t,this.gl=GL.create({height:screen.height,width:screen.width}),this.gl.animate(),this.gl.ondraw=function(){for(var n=document.querySelectorAll("canvas"),r=0;r<n.length;r++)e(t,n[r])},this.gl.clearColor(.349,.349,.349,1),this.gl.enable(this.gl.DEPTH_TEST)};Cobweb.prototype.modules.add("graphics",function(e){e.graphics=new t(e)})}(),function(){"use strict";Cobweb.prototype.modules.add("scene",function(e){e.scene={root:TreeNode.extend({})};var t=mat4.create();mat4.rotateY(t,t,.8),e.scene.root.add({type:"object",primitive:e.graphics.gl.TRIANGLES,mesh:GL.Mesh.cube(),model:t})},["graphics"])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
