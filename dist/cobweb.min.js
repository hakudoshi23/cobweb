!function(){"use strict";function e(e){a(e||{},i);var t=new XMLHttpRequest;if(t.onreadystatechange=function(){4==this.readyState&&(200==this.status?e.success&&e.success(this.response):e.error&&error.success(this.response))},"GET"===e.method){var n=o(e.data),r=e.url+(n?"?"+n:"");t.open(e.method,r,e.async),t.send()}else"POST"===e.method&&(t.open(e.method,e.url,e.async),t.send(e.data));return t}function t(e,t,n){return Ajax.ajax({url:e,data:t,success:n,method:"GET"})}function n(e,t,n){return Ajax.ajax({url:e,data:t,success:function(e){n(JSON.parse(e))},method:"GET"})}function r(e,t,n){return Ajax.ajax({url:e,data:t,success:n,method:"POST"})}function o(e){var t="";for(var n in e){var r=n+"="+encodeURIComponent(e[n]);t+="&"+r}return t.slice(1)}function a(e,t){for(var n in t)if(n&&t.hasOwnProperty(n)){var r=t[n];"object"==typeof r?e[n]?a(e[n],r):e[n]=r:"undefined"==typeof e[n]&&(e[n]=r)}}var i={method:"GET",url:"",data:{},async:!0,success:null,error:null};window.Ajax={ajax:e,get:t,getJSON:n,post:r}}(),function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}e(Array.prototype,"unique",function(){for(var e=this.concat(),t=0;t<e.length;++t)for(var n=t+1;n<e.length;++n)e[t]===e[n]&&e.splice(n--,1);return e}),e(Array.prototype,"forEach",function(e){for(var t=0;t<this.length;t++)e(this[t],t,this)})}(),function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}function t(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}e(HTMLElement.prototype,"addClass",function(){var e,t;for(var n in arguments)e=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[],t=arguments[n]?arguments[n].trim().replace(/\s+/g," ").split(" "):[],this.className=e.concat(t).unique().join(" ")}),e(HTMLElement.prototype,"hasClass",function(){var e,t=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[];for(var n in arguments){e=arguments[n]?arguments[n].trim().replace(/\s+/g," ").split(" "):[];for(var r=0;r<e.length;r++){var o=e[r];if(t.indexOf(o)==-1)return!1}}return!0}),e(HTMLElement.prototype,"removeClass",function(){var e,t,n=0,r=function(t){n=e.indexOf(t),n!=-1&&e.splice(n,1)};for(var o in arguments)e=this.className?this.className.trim().replace(/\s+/g," ").split(" "):[],t=arguments[o]?arguments[o].trim().replace(/\s+/g," ").split(" "):[],t.forEach(r),this.className=e.unique().join(" ")}),e(HTMLElement.prototype,"data",function(e,t){window.__data_cache||(window.__data_cache=new WeakMap);var n=window.__data_cache.get(this)||{};return void 0===t?e?n&&n[e]:n:(n[e]=t,window.__data_cache.set(this,n),this)}),e(HTMLElement.prototype,"setData",function(e){return window.__data_cache||(window.__data_cache=new WeakMap),window.__data_cache.set(this,e),this}),e(HTMLElement.prototype,"attr",function(e,t){if(void 0!==t)this.setAttribute(e,t);else{if(null!==t)return this.getAttribute(e);this.removeAttribute(e)}return this}),e(HTMLElement.prototype,"attrData",function(e,t){return this.attr("data-"+e,t)}),e(Element.prototype,"matches",Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(e){for(var t=(this.document||this.ownerDocument).querySelectorAll(e),n=t.length;--n>=0&&t.item(n)!==this;);return n>-1}),e(HTMLElement.prototype,"parent",function(e){if(!e)return this.parentElement;for(var t=this.parentElement;!t.matches(e);)t=t.parentElement;return t}),e(HTMLElement.prototype,"height",function(){if(1!=arguments.length)return this.clientHeight;var e=arguments[0];"number"==typeof e?this.style.height=e+"px":this.style.height=e}),e(HTMLElement.prototype,"width",function(){if(1!=arguments.length)return this.clientWidth;var e=arguments[0];"number"==typeof e?this.style.width=e+"px":this.style.width=e}),e(window,"guid",function(){return"GUID-"+t()+"-"+t()+"-"+t()}),e(HTMLElement.prototype,"guid",function(){var e=null,t=null;do e=window.guid(),t=document.querySelector("#"+e);while(t);return this.attr("id",e),e})}(),function(){"use strict";function e(e,t,n){e[t]||(e[t]=n)}function t(e,n){for(var r in n)if(r&&n.hasOwnProperty(r)){var o=n[r];"object"==typeof o?e[r]?t(e[r],o):e[r]=o:"undefined"==typeof e[r]&&(e[r]=o)}}e(Object,"clone",function(e){var t={};for(var n in e)if(e.hasOwnProperty(n)){var r=e[n];"object"==typeof r?t[n]=Object.clone(e[n]):t[n]=e[n]}return t}),window.extend=t}(),function(){"use strict";var e=function(e,t){this.data=t||{},this.parent=e,this.children=[]};window.TreeNode=e,e.prototype.isRoot=function(){return!this.parent},e.prototype.add=function(e){var t=new this.constructor(this,e);return this.children.push(t),t},e.prototype.remove=function(e){return this.children.slice(e,1),this},e.prototype.dfs=function(e){for(var t=[],n=0;n<this.children.length;n++)(!e||e&&e(this.children[n]))&&t.push(this.children[n]),t.concat(this.children[n].dfs(e));return t},e.prototype.bfs=function(e){var t,n=[];for(t=0;t<this.children.length;t++)(!e||e&&e(this.children[t]))&&n.push(this.children[t]);for(t=0;t<this.children.length;t++)n.concat(this.children[t].bfs(e));return n},e.extend=function(t){var n=function(t,n){e.call(this,t,n)};return n.prototype=Object.create(e.prototype),n.prototype.constructor=n,extend(n.prototype,t),new n(null)}}(),function(){"use strict";var e=function(){this.listeners={}};e.prototype.trigger=function(){var e=arguments[0],t=this.listeners[e]||[];Array.prototype.splice.call(arguments,0,1),console.debug(e,arguments);for(var n=0;n<t.length;n++)t[n].apply(null,arguments)},e.prototype.on=function(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t)},e.prototype.off=function(e){delete this.listeners[e]},e.prototype.off=function(e,t){if(this.listeners[e]){var n=this.listeners[e];n.indexOf(t)>-1&&n.splice(index,1)}},window.EventHandler=e}(),function(){"use strict";var e=function(){},t=function(t,n){this.debug=n?console.debug.bind():e,this.info=n?console.info.bind():e,this.warn=console.warn.bind(),this.error=console.error.bind()};window.Logger=t}(),function(){"use strict";var e={container:{selector:"#cobweb",className:"cb-container"}},t=function(n){if(this.options=n||{},extend(this.options,e),this.container=document.querySelector(this.options.container.selector),!this.container)throw new Error("Invalid container selector: '"+this.options.container.selector+"'");this.container.addClass(this.options.container.className),this.container.data("instance",this),this.logger=new Logger(this,!0),this.events=new EventHandler(this),t.prototype.modules.load(this),this.events.trigger("app.loaded")};window.Cobweb=t}(),function(){"use strict";function e(e){for(var t in e){var n=e[t];if(n.dependant||(n.dependant=[]),n.dependencies.length>0)for(var r=0;r<n.dependencies.length;r++){var o=e[n.dependencies[r]];o.dependant||(o.dependant=[]),o.dependant.push(t)}}}function t(e,t){var r=[],o=[];for(var a in t)0===t[a].dependencies.length&&r.push(a);for(;r.length>0;){var i=r[0];if(r.splice(0,1),t[i]){var s=t[i];o.push(i);for(var c=0;c<s.dependant.length;c++){var u=s.dependant[c];n(o,t[u])&&r.push(u)}}else e.events.trigger("modules.error.missing",i),e.logger.warning("Missing module '"+i+"'")}return Object.keys(t).length!==o.length&&(e.events.trigger("modules.error.cycle"),e.logger.error("Dependency cycle found in modules")),o}function n(e,t){for(var n=0;n<t.dependencies.length;n++)if(e.indexOf(t.dependencies[n])===-1)return!1;return!0}Cobweb.prototype.modules={all:{},add:function(e,t,n){n=n||[],this.all[e]={dependencies:n,init:t}},load:function(n){this.instance=n,e(this.all);for(var r=t(n,this.all),o=0;o<r.length;o++){var a=r[o];try{this.all[a].init(n),n.events.trigger("modules.loaded",a)}catch(e){n.logger.error("Loading module "+a,e),n.events.trigger("modules.error",a,e)}}n.events.trigger("modules.loaded.all",r)}}}(),function(){"use strict";function e(e,n){var r=t();e.append(r)}function t(){var e=document.createElement("div");return e.className="pane-header",e}Cobweb.prototype.modules.add("pane-header",function(t){t.events.on("pane.create",function(n){e(n,t)})},["pane-types"])}(),function(){"use strict";Cobweb.prototype.modules.add("pane-types",function(e){var t={all:{},add:function(e,t){this.all[e]=t},get:function(e){return this.all[e]},remove:function(e){delete this.all[e]},has:function(e){return!!this.all[e]}};e.events.on("pane.split",function(t,n){var r=t.attrData("pane-type");r&&e.pane.setType(n,r)}),e.pane.types=t,e.pane.setType=function(t,n){if(this.types.has(n)){var r=this.types.get(n);r.onPaneType(t,e);var o=t.querySelector(".pane-header");r.onCreateHeader(o,e),t.dataset.paneType=n}},e.pane.getType=function(e){return e.dataset.paneType}},["pane"])}(),function(){"use strict";Cobweb.prototype.modules.add("pane",function(e){function t(t){e.events.trigger("pane.create",t)}function n(t,n){e.events.trigger("pane.split",t,n)}function r(t){e.events.trigger("pane.resize",t)}e.events.on("app.loaded",function(){e.pane.internal=new Pane({container:e.options.container.selector,separator:{size:3},callbacks:{onPaneCreate:t,onPaneSplit:n,onPaneResize:r}});var o=e.pane.internal.container.querySelector(".pane");e.pane.setType(o,"surface")}),e.pane={}})}(),function(){"use strict";Cobweb.prototype.modules.add("interaction-mode",function(e){e.surface.interaction={all:{},add:function(e,t){this.all[e]=t},get:function(e){return this.all[e]},remove:function(e){delete this.all[e]},has:function(e){return!!this.all[e]}}},["surface"])}(),function(){"use strict";function e(e,t){var o=document.createElement("canvas");o.id="surface"+r++,o.className="surface",e.append(o),t.surface.data=t.surface.data||{},t.surface.data[o.id]={},t.surface.data[o.id].surface={proj:mat4.create(),center:[0,0,0],rotation:[0,-.4],distance:5,getViewMatrix:function(e){var t=[0,0,0];this.getCameraPosition(t),mat4.lookAt(e,t,this.center,[0,1,0])},getCameraPosition:function(e){e[2]=-this.distance,vec3.rotateX(e,e,this.rotation[1]),vec3.rotateY(e,e,-this.rotation[0]),vec3.add(e,e,this.center)}},n(t,e),t.events.trigger("surface.create",o)}function t(e,t){var n=document.createElement("label");n.innerHTML="Surface Pane",e.appendChild(n)}function n(e,t){var n=t.querySelector("canvas"),r=n.getContext("2d"),o=e.surface.data[n.id],a=t.querySelector(".pane-header"),i=a?a.height():0,s=t.width(),c=t.height()-i;o.imgData=r.createImageData(s,c),o.buffer=new Uint8Array(s*c*4),n.height=c,n.width=s,mat4.perspective(o.surface.proj,45*DEG2RAD,s/c,.1,1e3)}var r=0;Cobweb.prototype.modules.add("surface",function(r){r.pane.types.add("surface",{onPaneType:e,onCreateHeader:t}),r.events.on("pane.resize",function(e){"surface"===e.attrData("pane-type")&&n(r,e)}),window.addEventListener("resize",function(e){for(var t=r.pane.internal.container.querySelectorAll(".pane canvas"),o=0;o<t.length;o++)n(r,t[o].parentNode)}),r.surface={}},["pane-types"])}(),function(){"use strict";function e(e,t,n){t&&(e[0]=t[0]+.005*n[0],e[1]=t[1]+.005*n[1])}function t(e,t){return e?[e[0]-t[0],e[1]-t[1]]:[0,0]}var n=null,r=null;Cobweb.prototype.modules.add("common-interaction",function(o){o.surface.interaction.add("common",{onMouseMove:function(a,i){if(a.target.dataset.moving){var s=a.target,c=o.surface.data[s.id];if(c){var u=t(r,i);e(c.surface.rotation,n,u)}}return!1},onMouseDown:function(e,t){if(2===e.which){e.target.dataset.moving="true";var a=e.target,i=o.surface.data[a.id];n=i.surface.rotation.slice(),r=t}return!0},onMouseUp:function(a,i){if(2===a.which){delete a.target.dataset.moving;var s=a.target,c=o.surface.data[s.id],u=t(r,i);e(c.surface.rotation,n,u),r=null}return!0},onClick:function(e,t){return!0}})},["surface-interaction"])}(),function(){"use strict";Cobweb.prototype.modules.add("object-interaction",function(e){e.surface.interaction.add("object",{onMouseMove:function(e,t){return!0},onMouseDown:function(t,n){return e.logger.debug("onMouseDown",t),!0},onMouseUp:function(t,n){return e.logger.debug("onMouseUp",t),!0},onClick:function(t,n){return e.logger.debug("onClick",t),!0}}),e.events.on("surface.create",function(t){e.surface.setInteraction(t,"object")})},["surface-interaction"])}(),function(){"use strict";function e(e,n){var r=t(n);switch(n.type){case"mousemove":return e.onMouseMove(n,r);case"mousedown":return e.onMouseDown(n,r);case"mouseup":return e.onMouseUp(n,r);case"click":return e.onClick(n,r)}}function t(e){var t;return t=e.pageX||e.pageY?[e.pageX,e.pageY]:[e.clientX+document.body.scrollLeft+document.documentElement.scrollLeft,e.clientY+document.body.scrollTop+document.documentElement.scrollTop],t[0]-=e.target.offsetLeft,t[1]-=e.target.offsetTop,t}Cobweb.prototype.modules.add("surface-interaction",function(t){function n(n){var r=t.surface.getInteraction(n.target),o=e(r,n);if(o){var a=t.surface.interaction.get("common");e(a,n)}}t.surface.setInteraction=function(e,n){var r=t.surface.interaction;r.has(n)&&e.attrData("surface-interaction",n)},t.surface.getInteraction=function(e){var n=t.surface.interaction,r=e.attrData("surface-interaction");return n.get(r)},t.events.on("surface.create",function(e){e.onmousemove=n,e.onmousedown=n,e.onmouseup=n,e.onclick=n}),t.events.on("pane.split",function(e,t){t.attrData("surface-interaction",e.attrData("surface-interaction"))})},["interaction-mode","surface"])}(),function(){"use strict";Cobweb.prototype.modules.add("render-solid",function(e){var t=new Shader("precision highp float;attribute vec3 a_vertex;attribute vec3 a_normal;varying vec3 v_normal;uniform mat4 u_mvp;uniform mat4 u_model;void main() {    v_normal = (u_model * vec4(a_normal,0.0)).xyz;    gl_Position = u_mvp * vec4(a_vertex,1.0);}","precision highp float;varying vec3 v_normal;uniform vec3 u_lightvector;uniform vec4 u_color;void main() {  vec3 N = normalize(v_normal);  vec4 ambient = vec4(0.1, 0.1, 0.1, 1);  gl_FragColor = ambient + u_color * max(0.0, dot(u_lightvector,N));}"),n=mat4.create(),r=mat4.create(),o={u_color:[.7,.7,.7,1],u_lightvector:null,u_model:null,u_mvp:r};e.graphics.renders.add("solid",function(a){for(var i=e.scene.root.dfs(),s=0;s<i.length;s++){var c=i[s].data;if("object"===c.type){var u=vec3.create();a.getCameraPosition(u),vec3.add(u,u,[-1,0,2]),vec3.normalize(u,u),o.u_lightvector=u,a.getViewMatrix(n),mat4.multiply(n,n,c.model),mat4.multiply(r,a.proj,n),o.u_model=c.model,t.uniforms(o).draw(c.mesh,c.primitive)}}}),e.events.on("surface.create",function(t){e.surface.setRender(t,"solid")})},["surface-render"])}(),function(){"use strict";Cobweb.prototype.modules.add("surface-render",function(e){e.surface.setRender=function(t,n){var r=e.graphics.renders;r.has(n)&&t.attrData("render",n)},e.surface.getRender=function(t){var n=e.graphics.renders,r=t.attrData("render");return n.get(r)};for(var t=document.querySelectorAll(".pane"),n=0;n<t.length;n++)if("surface"==t[n].dataset.paneType){var r=t[n].querySelector("canvas");r.dataset.render="solid"}e.events.on("pane.split",function(e,t){t.attrData("surface-render",e.attrData("surface-render"))})},["graphics-render","surface"])}(),function(){"use strict";Cobweb.prototype.modules.add("graphics-render",function(e){e.graphics.renders={all:{},add:function(e,t){this.all[e]=t},get:function(e){return this.all[e]},remove:function(e){delete this.all[e]},has:function(e){return!!this.all[e]}}},["graphics"])}(),function(){"use strict";function e(e,t){var n=e.surface.data[t.id],r=e.graphics.gl,o=t.clientWidth,a=t.clientHeight;r.clear(r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT),r.viewport(0,0,o,a);var i=e.surface.getRender(t);i&&i(n.surface);var s=t.getContext("2d");s&&(r.readPixels(0,0,o,a,r.RGBA,r.UNSIGNED_BYTE,n.buffer),n.imgData.data.set(n.buffer),s.putImageData(n.imgData,0,0))}var t=function(t){this.gl=GL.create({height:screen.height,width:screen.width}),this.gl.animate(),this.gl.ondraw=function(){for(var n=document.querySelectorAll("canvas"),r=0;r<n.length;r++)e(t,n[r])},this.gl.clearColor(.349,.349,.349,1),this.gl.enable(this.gl.DEPTH_TEST)};Cobweb.prototype.modules.add("graphics",function(e){e.graphics=new t(e)})}(),function(){"use strict";Cobweb.prototype.modules.add("scene",function(e){e.scene={root:TreeNode.extend({})};var t=mat4.create();mat4.rotateY(t,t,.8),e.scene.root.add({type:"object",primitive:e.graphics.gl.TRIANGLES,mesh:GL.Mesh.cube(),model:t}),e.scene.root.add({type:"ligth",color:[1,1,1],intensity:1})},["graphics"])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFqYXguanMiLCJhcnJheS5qcyIsImh0bWwuanMiLCJvYmouanMiLCJ0cmVlLmpzIiwiZXZlbnRzLmpzIiwibG9nZ2VyLmpzIiwiY29id2ViLmpzIiwibW9kdWxlcy5qcyIsInBhbmUvcGFuZS1oZWFkZXIuanMiLCJwYW5lL3BhbmUtdHlwZXMuanMiLCJwYW5lL3BhbmVzLmpzIiwicGFuZS9zdXJmYWNlL2ludGVyYWN0aW9uLW1vZGVzLmpzIiwicGFuZS9zdXJmYWNlL3N1cmZhY2UuanMiLCJwYW5lL3N1cmZhY2UvaW50ZXJhY3Rpb24vY29tbW9uLWludGVyYWN0aW9uLmpzIiwicGFuZS9zdXJmYWNlL2ludGVyYWN0aW9uL29iamVjdC1pbnRlcmFjdGlvbi5qcyIsInBhbmUvc3VyZmFjZS9pbnRlcmFjdGlvbi9zdXJmYWNlLWludGVyYWN0aW9uLmpzIiwicGFuZS9zdXJmYWNlL3JlbmRlci9yZW5kZXItc29saWQuanMiLCJwYW5lL3N1cmZhY2UvcmVuZGVyL3N1cmZhY2UtcmVuZGVyLmpzIiwiZ3JhcGhpYy1yZW5kZXIuanMiLCJncmFwaGljLmpzIiwic2NlbmUuanMiXSwibmFtZXMiOlsiYWpheCIsIm9wdGlvbnMiLCJfZXh0ZW5kIiwiZGVmYXVsdEFqYXhPcHRpb25zIiwieGh0dHAiLCJYTUxIdHRwUmVxdWVzdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInRoaXMiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwic3VjY2VzcyIsInJlc3BvbnNlIiwiZXJyb3IiLCJtZXRob2QiLCJwYXJhbXMiLCJvYmpUb1BhcmFtcyIsImRhdGEiLCJ1cmxXaXRoUGFyYW1zIiwidXJsIiwib3BlbiIsImFzeW5jIiwic2VuZCIsImdldCIsIkFqYXgiLCJnZXRKU09OIiwiSlNPTiIsInBhcnNlIiwicG9zdCIsIm9iaiIsImtleSIsIm5leHRQYXJhbSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNsaWNlIiwiZGVmYXVsdHMiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJ2YWx1ZSIsIndpbmRvdyIsInNhZmVFeHRlbmQiLCJwcm90b3R5cGUiLCJwcm9wZXJ0eSIsIkFycmF5IiwiYSIsImNvbmNhdCIsImkiLCJsZW5ndGgiLCJqIiwic3BsaWNlIiwiY2FsbGJhY2siLCJzNCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwiSFRNTEVsZW1lbnQiLCJvbGRDbGFzc05hbWVzIiwibmV3Q2xhc3NOYW1lcyIsImFyZ3VtZW50cyIsImNsYXNzTmFtZSIsInRyaW0iLCJyZXBsYWNlIiwic3BsaXQiLCJ1bmlxdWUiLCJqb2luIiwicXVlcnlDbGFzc05hbWVzIiwiY3VycmVudENsYXNzTmFtZXMiLCJpbmRleCIsIm5hbWUiLCJpbmRleE9mIiwicmVtb3ZlQ2xhc3NOYW1lcyIsInJlbW92ZUVhY2giLCJmb3JFYWNoIiwiYXR0ciIsIl9fZGF0YV9jYWNoZSIsIldlYWtNYXAiLCJlbEF0dHJzIiwidW5kZWZpbmVkIiwic2V0Iiwic2V0QXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiRWxlbWVudCIsIm1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsInMiLCJtYXRjaGVzIiwiZG9jdW1lbnQiLCJvd25lckRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsIml0ZW0iLCJxdWVyeSIsInBhcmVudEVsZW1lbnQiLCJjdXJyZW50IiwiY2xpZW50SGVpZ2h0Iiwic3R5bGUiLCJoZWlnaHQiLCJjbGllbnRXaWR0aCIsIndpZHRoIiwiZ3VpZCIsIm92ZXJsYXAiLCJxdWVyeVNlbGVjdG9yIiwiT2JqZWN0IiwibmV3T2JqIiwiY2xvbmUiLCJleHRlbmQiLCJUcmVlTm9kZSIsInBhcmVudCIsImNoaWxkcmVuIiwiaXNSb290IiwiYWRkIiwiY2hpbGQiLCJjb25zdHJ1Y3RvciIsInB1c2giLCJyZW1vdmUiLCJkZnMiLCJjaGVjayIsIm91dCIsImJmcyIsIl9UcmVlTm9kZSIsImNhbGwiLCJjcmVhdGUiLCJFdmVudEhhbmRsZXIiLCJsaXN0ZW5lcnMiLCJ0cmlnZ2VyIiwiY29uc29sZSIsImRlYnVnIiwiYXBwbHkiLCJvbiIsIm9mZiIsImFycmF5IiwiZW1wdHlGdW5jdGlvbiIsIkxvZ2dlciIsImluc3RhbmNlIiwiaXNEZWJ1ZyIsImJpbmQiLCJpbmZvIiwid2FybiIsImRlZmF1bHRPcHRpb25zIiwiY29udGFpbmVyIiwic2VsZWN0b3IiLCJDb2J3ZWIiLCJFcnJvciIsImFkZENsYXNzIiwibG9nZ2VyIiwiZXZlbnRzIiwibW9kdWxlcyIsImxvYWQiLCJhZGRSZXZlcnNlRGVwZW5kZW5jaWVzIiwibW9kdWxlIiwiZGVwZW5kYW50IiwiZGVwZW5kZW5jaWVzIiwiZGVwUGx1Z2luIiwidG9wb2xvZ2ljYWxTb3J0IiwiY2FuZGlkYXRlcyIsInNvcnRlZE5hbWVzIiwibmV4dE5hbWUiLCJkZXBOYW1lIiwiYWxsRGVwZW5kZW5jaWVzTWV0Iiwid2FybmluZyIsImtleXMiLCJsb2FkZWRVbnRpbE5vdyIsImFsbCIsImluaXQiLCJleCIsIm9uQ3JlYXRlQ2FsbGJhY2siLCJwYW5lIiwiaGVhZGVyIiwiY3JlYXRlSGVhZGVyIiwiYXBwZW5kIiwiZGl2IiwiY3JlYXRlRWxlbWVudCIsInBhbmVUeXBlcyIsImNhbGxiYWNrcyIsImhhcyIsIm9sZFBhbmUiLCJuZXdQYW5lIiwib2xkVHlwZSIsImF0dHJEYXRhIiwic2V0VHlwZSIsInR5cGVzIiwidHlwZUNhbGxiYWNrcyIsIm9uUGFuZVR5cGUiLCJwYW5lSGVhZGVyIiwib25DcmVhdGVIZWFkZXIiLCJkYXRhc2V0IiwicGFuZVR5cGUiLCJnZXRUeXBlIiwib25QYW5lQ3JlYXRlIiwib25QYW5lU3BsaXQiLCJvcmlnaW4iLCJvblBhbmVSZXNpemUiLCJpbnRlcm5hbCIsIlBhbmUiLCJzZXBhcmF0b3IiLCJzaXplIiwicm9vdCIsInN1cmZhY2UiLCJpbnRlcmFjdGlvbiIsIm9uU3VyZmFjZVBhbmVUeXBlIiwiY2FudmFzIiwiaWQiLCJzdXJmYWNlSW5kZXgiLCJwcm9qIiwibWF0NCIsImNlbnRlciIsInJvdGF0aW9uIiwiZGlzdGFuY2UiLCJnZXRWaWV3TWF0cml4IiwidmlldyIsImV5ZSIsImdldENhbWVyYVBvc2l0aW9uIiwibG9va0F0IiwidmVjMyIsInJvdGF0ZVgiLCJyb3RhdGVZIiwidXBkYXRlQ2FudmFzU2l6ZSIsIm9uQ3JlYXRlU3VyZmFjZUhlYWRlciIsImxhYmVsIiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsImhlYWRlckhlaWdodCIsImltZ0RhdGEiLCJjcmVhdGVJbWFnZURhdGEiLCJidWZmZXIiLCJVaW50OEFycmF5IiwicGVyc3BlY3RpdmUiLCJERUcyUkFEIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50Iiwic3VyZmFjZXMiLCJwYXJlbnROb2RlIiwiY29tYmluZSIsInRhcmdldCIsIm9yaWdpbmFsUm90YXRpb24iLCJkZWx0YSIsImdldENvb3Jkc0RlbHRhIiwiaW5pdGlhbCIsIm1vdXNlRG93bkNvb3JkcyIsIm9uTW91c2VNb3ZlIiwicmVhbENvb3JkcyIsIm1vdmluZyIsIm9uTW91c2VEb3duIiwid2hpY2giLCJvbk1vdXNlVXAiLCJvbkNsaWNrIiwic2V0SW50ZXJhY3Rpb24iLCJydW5DYWxsYmFjayIsImdldExvY2FsQ29vcmRpbmF0ZXMiLCJ0eXBlIiwiY29vcmRpbmF0ZXMiLCJwYWdlWCIsInBhZ2VZIiwiY2xpZW50WCIsImJvZHkiLCJzY3JvbGxMZWZ0IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50WSIsInNjcm9sbFRvcCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJvblN1cmZhY2VFdmVudCIsImdldEludGVyYWN0aW9uIiwia2VlcFJ1bm5pbmciLCJjb21tb24iLCJpbnRlcmFjdGlvbnMiLCJvbm1vdXNlbW92ZSIsIm9ubW91c2Vkb3duIiwib25tb3VzZXVwIiwib25jbGljayIsInNoYWRlciIsIlNoYWRlciIsInRlbXAiLCJtdnAiLCJ1bmlmb3JtcyIsInVfY29sb3IiLCJ1X2xpZ2h0dmVjdG9yIiwidV9tb2RlbCIsInVfbXZwIiwiZ3JhcGhpY3MiLCJyZW5kZXJzIiwib2JqcyIsInNjZW5lIiwibGlnaHREaXJlY3Rpb24iLCJub3JtYWxpemUiLCJtdWx0aXBseSIsIm1vZGVsIiwiZHJhdyIsIm1lc2giLCJwcmltaXRpdmUiLCJzZXRSZW5kZXIiLCJnZXRSZW5kZXIiLCJwYW5lcyIsInJlbmRlciIsImRyYXdSZW5kZXJUYXJnZXQiLCJnbCIsImNsZWFyIiwiQ09MT1JfQlVGRkVSX0JJVCIsIkRFUFRIX0JVRkZFUl9CSVQiLCJ2aWV3cG9ydCIsInJlYWRQaXhlbHMiLCJSR0JBIiwiVU5TSUdORURfQllURSIsInB1dEltYWdlRGF0YSIsIkdyYXBoaWNzIiwiR0wiLCJzY3JlZW4iLCJhbmltYXRlIiwib25kcmF3IiwicmVuZGVyVGFyZ2V0cyIsImNsZWFyQ29sb3IiLCJlbmFibGUiLCJERVBUSF9URVNUIiwibWF0IiwiVFJJQU5HTEVTIiwiTWVzaCIsImN1YmUiLCJjb2xvciIsImludGVuc2l0eSJdLCJtYXBwaW5ncyI6IkNBQUEsV0FDQSxZQVdBLFNBQUFBLEdBQUFDLEdBQ0FDLEVBQUFELE1BQUFFLEVBQ0EsSUFBQUMsR0FBQSxHQUFBQyxlQVVBLElBVEFELEVBQUFFLG1CQUFBLFdBQ0EsR0FBQUMsS0FBQUMsYUFDQSxLQUFBRCxLQUFBRSxPQUNBUixFQUFBUyxTQUFBVCxFQUFBUyxRQUFBSCxLQUFBSSxVQUVBVixFQUFBVyxPQUFBQSxNQUFBRixRQUFBSCxLQUFBSSxZQUlBLFFBQUFWLEVBQUFZLE9BQUEsQ0FDQSxHQUFBQyxHQUFBQyxFQUFBZCxFQUFBZSxNQUNBQyxFQUFBaEIsRUFBQWlCLEtBQUFKLEVBQUEsSUFBQUEsRUFBQSxHQUNBVixHQUFBZSxLQUFBbEIsRUFBQVksT0FBQUksRUFBQWhCLEVBQUFtQixPQUNBaEIsRUFBQWlCLFdBQ0EsU0FBQXBCLEVBQUFZLFNBQ0FULEVBQUFl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a0YsR0FBQSxTQUFBN0ssR0FDQWpJLEtBQUFxUyxHQUFBVSxHQUFBMUwsUUFDQXpCLE9BQUFvTixPQUFBcE4sT0FDQUUsTUFBQWtOLE9BQUFsTixRQUVBOUYsS0FBQXFTLEdBQUFZLFVBQ0FqVCxLQUFBcVMsR0FBQWEsT0FBQSxXQUVBLElBQUEsR0FEQUMsR0FBQWhPLFNBQUFFLGlCQUFBLFVBQ0FoRCxFQUFBLEVBQUFBLEVBQUE4USxFQUFBN1EsT0FBQUQsSUFDQStQLEVBQUFuSyxFQUFBa0wsRUFBQTlRLEtBRUFyQyxLQUFBcVMsR0FBQWUsV0FBQSxLQUFBLEtBQUEsS0FBQSxHQUNBcFQsS0FBQXFTLEdBQUFnQixPQUFBclQsS0FBQXFTLEdBQUFpQixZQUdBN0ssUUFBQXpHLFVBQUE4RyxRQUFBcEMsSUFBQSxXQUFBLFNBQUF1QixHQUNBQSxFQUFBb0osU0FBQSxHQUFBeUIsR0FBQTdLLFFDbkJBLFdBQ0EsWUFFQVEsUUFBQXpHLFVBQUE4RyxRQUFBcEMsSUFBQSxRQUFBLFNBQUF1QixHQUNBQSxFQUFBdUosT0FDQXhGLEtBQUExRixTQUFBRCxXQUdBLElBQUFrTixHQUFBL0csS0FBQW5GLFFBQ0FtRixNQUFBVyxRQUFBb0csRUFBQUEsRUFBQSxJQUVBdEwsRUFBQXVKLE1BQUF4RixLQUFBdEYsS0FDQTZJLEtBQUEsU0FDQXdDLFVBQUE5SixFQUFBb0osU0FBQWdCLEdBQUFtQixVQUNBMUIsS0FBQWlCLEdBQUFVLEtBQUFDLE9BQ0E5QixNQUFBMkIsSUFFQXRMLEVBQUF1SixNQUFBeEYsS0FBQXRGLEtBQ0E2SSxLQUFBLFFBQ0FvRSxPQUFBLEVBQUEsRUFBQSxHQUNBQyxVQUFBLE1BRUEiLCJmaWxlIjoiY29id2ViLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIigoZnVuY3Rpb24oKXtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgZGVmYXVsdEFqYXhPcHRpb25zID0ge1xyXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgdXJsOiAnJyxcclxuICAgICAgICBkYXRhOiB7fSxcclxuICAgICAgICBhc3luYzogdHJ1ZSxcclxuICAgICAgICBzdWNjZXNzOiBudWxsLFxyXG4gICAgICAgIGVycm9yOiBudWxsXHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGFqYXggKG9wdGlvbnMpIHtcclxuICAgICAgICBfZXh0ZW5kKG9wdGlvbnMgfHwge30sIGRlZmF1bHRBamF4T3B0aW9ucyk7XHJcbiAgICAgICAgdmFyIHhodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgeGh0dHAub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT0gNCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnN1Y2Nlc3MpIG9wdGlvbnMuc3VjY2Vzcyh0aGlzLnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZXJyb3IpIGVycm9yLnN1Y2Nlc3ModGhpcy5yZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChvcHRpb25zLm1ldGhvZCA9PT0gJ0dFVCcpIHtcclxuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IG9ialRvUGFyYW1zKG9wdGlvbnMuZGF0YSk7XHJcbiAgICAgICAgICAgIHZhciB1cmxXaXRoUGFyYW1zID0gb3B0aW9ucy51cmwgKyAocGFyYW1zID8gJz8nICsgcGFyYW1zIDogJycpO1xyXG4gICAgICAgICAgICB4aHR0cC5vcGVuKG9wdGlvbnMubWV0aG9kLCB1cmxXaXRoUGFyYW1zLCBvcHRpb25zLmFzeW5jKTtcclxuICAgICAgICAgICAgeGh0dHAuc2VuZCgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5tZXRob2QgPT09ICdQT1NUJykge1xyXG4gICAgICAgICAgICB4aHR0cC5vcGVuKG9wdGlvbnMubWV0aG9kLCBvcHRpb25zLnVybCwgb3B0aW9ucy5hc3luYyk7XHJcbiAgICAgICAgICAgIHhodHRwLnNlbmQob3B0aW9ucy5kYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHhodHRwO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldCAodXJsLCBkYXRhLCBzdWNjZXNzKSB7XHJcbiAgICAgICAgcmV0dXJuIEFqYXguYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsLFxyXG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBzdWNjZXNzLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0SlNPTiAodXJsLCBkYXRhLCBzdWNjZXNzKSB7XHJcbiAgICAgICAgcmV0dXJuIEFqYXguYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsLFxyXG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MoSlNPTi5wYXJzZShyZXNwb25zZSkpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcG9zdCAodXJsLCBkYXRhLCBzdWNjZXNzKSB7XHJcbiAgICAgICAgcmV0dXJuIEFqYXguYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsLFxyXG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBzdWNjZXNzLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHdpbmRvdy5BamF4ID0ge1xyXG4gICAgICAgIGFqYXg6IGFqYXgsXHJcbiAgICAgICAgZ2V0OiBnZXQsXHJcbiAgICAgICAgZ2V0SlNPTjogZ2V0SlNPTixcclxuICAgICAgICBwb3N0OiBwb3N0XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIG9ialRvUGFyYW1zIChvYmopIHtcclxuICAgICAgICB2YXIgcGFyYW1zID0gJyc7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgICAgICB2YXIgbmV4dFBhcmFtID0ga2V5ICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtrZXldKTtcclxuICAgICAgICAgICAgcGFyYW1zICs9ICcmJyArIG5leHRQYXJhbTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhcmFtcy5zbGljZSgxKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfZXh0ZW5kKG9wdGlvbnMsIGRlZmF1bHRzKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBkZWZhdWx0cykge1xyXG4gICAgICAgICAgICBpZiAocHJvcCAmJiBkZWZhdWx0cy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZGVmYXVsdHNbcHJvcF07XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zW3Byb3BdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9leHRlbmQob3B0aW9uc1twcm9wXSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zW3Byb3BdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zW3Byb3BdID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zW3Byb3BdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uKCl7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgc2FmZUV4dGVuZChBcnJheS5wcm90b3R5cGUsICd1bmlxdWUnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgYSA9IHRoaXMuY29uY2F0KCk7XHJcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyArK2kpXHJcbiAgICAgICAgICAgIGZvcih2YXIgaiA9IGkgKyAxOyBqIDwgYS5sZW5ndGg7ICsrailcclxuICAgICAgICAgICAgICAgIGlmKGFbaV0gPT09IGFbal0pIGEuc3BsaWNlKGotLSwgMSk7XHJcbiAgICAgICAgcmV0dXJuIGE7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEFycmF5LnByb3RvdHlwZSwgJ2ZvckVhY2gnLCBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgY2FsbGJhY2sodGhpc1tpXSwgaSwgdGhpcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYWZlRXh0ZW5kKHByb3RvdHlwZSwgcHJvcGVydHksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYoIXByb3RvdHlwZVtwcm9wZXJ0eV0pIHByb3RvdHlwZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24oKXtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ2FkZENsYXNzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvbGRDbGFzc05hbWVzLCBuZXdDbGFzc05hbWVzO1xyXG4gICAgICAgIGZvcih2YXIgaSBpbiBhcmd1bWVudHMpe1xyXG4gICAgICAgICAgICBvbGRDbGFzc05hbWVzID0gIXRoaXMuY2xhc3NOYW1lID8gW10gOiB0aGlzLmNsYXNzTmFtZS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIG5ld0NsYXNzTmFtZXMgPSAhYXJndW1lbnRzW2ldID8gW10gOiBhcmd1bWVudHNbaV0udHJpbSgpLnJlcGxhY2UoL1xccysvZywgJyAnKS5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IG9sZENsYXNzTmFtZXMuY29uY2F0KG5ld0NsYXNzTmFtZXMpLnVuaXF1ZSgpLmpvaW4oJyAnKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ2hhc0NsYXNzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBxdWVyeUNsYXNzTmFtZXMsIGN1cnJlbnRDbGFzc05hbWVzID0gIXRoaXMuY2xhc3NOYW1lID8gW10gOiB0aGlzLmNsYXNzTmFtZS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgZm9yKHZhciBpIGluIGFyZ3VtZW50cyl7XHJcbiAgICAgICAgICAgIHF1ZXJ5Q2xhc3NOYW1lcyA9ICFhcmd1bWVudHNbaV0gPyBbXSA6IGFyZ3VtZW50c1tpXS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBxdWVyeUNsYXNzTmFtZXMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHF1ZXJ5Q2xhc3NOYW1lc1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENsYXNzTmFtZXMuaW5kZXhPZihuYW1lKSA9PSAtMSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ3JlbW92ZUNsYXNzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpbmRleCA9IDAsIGN1cnJlbnRDbGFzc05hbWVzLCByZW1vdmVDbGFzc05hbWVzO1xyXG4gICAgICAgIHZhciByZW1vdmVFYWNoID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgaW5kZXggPSBjdXJyZW50Q2xhc3NOYW1lcy5pbmRleE9mKG5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggIT0gLTEpXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Q2xhc3NOYW1lcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yKHZhciBpIGluIGFyZ3VtZW50cyl7XHJcbiAgICAgICAgICAgIGN1cnJlbnRDbGFzc05hbWVzID0gIXRoaXMuY2xhc3NOYW1lID8gW10gOiB0aGlzLmNsYXNzTmFtZS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzTmFtZXMgPSAhYXJndW1lbnRzW2ldID8gW10gOiBhcmd1bWVudHNbaV0udHJpbSgpLnJlcGxhY2UoL1xccysvZywgJyAnKS5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICByZW1vdmVDbGFzc05hbWVzLmZvckVhY2gocmVtb3ZlRWFjaCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gY3VycmVudENsYXNzTmFtZXMudW5pcXVlKCkuam9pbignICcpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnZGF0YScsIGZ1bmN0aW9uIChhdHRyLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICghd2luZG93Ll9fZGF0YV9jYWNoZSkgd2luZG93Ll9fZGF0YV9jYWNoZSA9IG5ldyBXZWFrTWFwKCk7XHJcbiAgICAgICAgdmFyIGVsQXR0cnMgPSB3aW5kb3cuX19kYXRhX2NhY2hlLmdldCh0aGlzKSB8fCB7fTtcclxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBlbEF0dHJzW2F0dHJdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHdpbmRvdy5fX2RhdGFfY2FjaGUuc2V0KHRoaXMsIGVsQXR0cnMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChhdHRyKSByZXR1cm4gZWxBdHRycyAmJiBlbEF0dHJzW2F0dHJdO1xyXG4gICAgICAgICAgICBlbHNlIHJldHVybiBlbEF0dHJzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnc2V0RGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgaWYgKCF3aW5kb3cuX19kYXRhX2NhY2hlKSB3aW5kb3cuX19kYXRhX2NhY2hlID0gbmV3IFdlYWtNYXAoKTtcclxuICAgICAgICB3aW5kb3cuX19kYXRhX2NhY2hlLnNldCh0aGlzLCBkYXRhKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnYXR0cicsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XHJcbiAgICAgICAgZWxzZSBpZiAodmFsdWUgPT09IG51bGwpXHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc2FmZUV4dGVuZChIVE1MRWxlbWVudC5wcm90b3R5cGUsICdhdHRyRGF0YScsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2RhdGEtJyArIG5hbWUsIHZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoRWxlbWVudC5wcm90b3R5cGUsICdtYXRjaGVzJyxcclxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzU2VsZWN0b3IgfHxcclxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcclxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fFxyXG4gICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm9NYXRjaGVzU2VsZWN0b3IgfHxcclxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcclxuICAgICAgICBmdW5jdGlvbihzKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRjaGVzID0gKHRoaXMuZG9jdW1lbnQgfHwgdGhpcy5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHMpLFxyXG4gICAgICAgICAgICAgICAgaSA9IG1hdGNoZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB3aGlsZSAoLS1pID49IDAgJiYgbWF0Y2hlcy5pdGVtKGkpICE9PSB0aGlzKSB7fVxyXG4gICAgICAgICAgICByZXR1cm4gaSA+IC0xO1xyXG4gICAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgc2FmZUV4dGVuZChIVE1MRWxlbWVudC5wcm90b3R5cGUsICdwYXJlbnQnLCBmdW5jdGlvbiAocXVlcnkpIHtcclxuICAgICAgICBpZiAoIXF1ZXJ5KSByZXR1cm4gdGhpcy5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgIHdoaWxlICghY3VycmVudC5tYXRjaGVzKHF1ZXJ5KSlcclxuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50RWxlbWVudDtcclxuICAgICAgICByZXR1cm4gY3VycmVudDtcclxuICAgIH0pO1xyXG5cclxuICAgIHNhZmVFeHRlbmQoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnaGVpZ2h0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUuaGVpZ2h0ID0gdmFsdWUgKyAncHgnO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0eWxlLmhlaWdodCA9IHZhbHVlO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRIZWlnaHQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ3dpZHRoJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUud2lkdGggPSB2YWx1ZSArICdweCc7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUud2lkdGggPSB2YWx1ZTtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50V2lkdGg7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKHdpbmRvdywgJ2d1aWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICdHVUlELScgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArIHM0KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzYWZlRXh0ZW5kKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ2d1aWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGd1aWQgPSBudWxsLCBvdmVybGFwID0gbnVsbDtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIGd1aWQgPSB3aW5kb3cuZ3VpZCgpO1xyXG4gICAgICAgICAgICBvdmVybGFwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyBndWlkKTtcclxuICAgICAgICB9IHdoaWxlKG92ZXJsYXApO1xyXG4gICAgICAgIHRoaXMuYXR0cignaWQnLCBndWlkKTtcclxuICAgICAgICByZXR1cm4gZ3VpZDtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhZmVFeHRlbmQocHJvdG90eXBlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcclxuICAgICAgICBpZighcHJvdG90eXBlW3Byb3BlcnR5XSkgcHJvdG90eXBlW3Byb3BlcnR5XSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHM0KCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKCgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwKVxyXG4gICAgICAgICAgICAudG9TdHJpbmcoMTYpLnN1YnN0cmluZygxKTtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24oKXtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBzYWZlRXh0ZW5kKE9iamVjdCwgJ2Nsb25lJywgZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIHZhciBuZXdPYmogPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBvYmopXHJcbiAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBvYmpbcHJvcGVydHldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3T2JqW3Byb3BlcnR5XSA9IE9iamVjdC5jbG9uZShvYmpbcHJvcGVydHldKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBuZXdPYmpbcHJvcGVydHldID0gb2JqW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXdPYmo7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzYWZlRXh0ZW5kKHByb3RvdHlwZSwgcHJvcGVydHksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYoIXByb3RvdHlwZVtwcm9wZXJ0eV0pIHByb3RvdHlwZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICB3aW5kb3cuZXh0ZW5kID0gX2V4dGVuZDtcclxuXHJcbiAgICBmdW5jdGlvbiBfZXh0ZW5kKG9wdGlvbnMsIGRlZmF1bHRzKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBkZWZhdWx0cykge1xyXG4gICAgICAgICAgICBpZiAocHJvcCAmJiBkZWZhdWx0cy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZGVmYXVsdHNbcHJvcF07XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zW3Byb3BdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9leHRlbmQob3B0aW9uc1twcm9wXSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zW3Byb3BdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zW3Byb3BdID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zW3Byb3BdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgVHJlZU5vZGUgPSBmdW5jdGlvbiAocGFyZW50LCBkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YSB8fCB7fTtcclxuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuID0gW107XHJcbiAgICB9O1xyXG5cclxuICAgIHdpbmRvdy5UcmVlTm9kZSA9IFRyZWVOb2RlO1xyXG5cclxuICAgIFRyZWVOb2RlLnByb3RvdHlwZS5pc1Jvb3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLnBhcmVudDtcclxuICAgIH07XHJcblxyXG4gICAgVHJlZU5vZGUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgdmFyIGNoaWxkID0gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcywgZGF0YSk7XHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcclxuICAgICAgICByZXR1cm4gY2hpbGQ7XHJcbiAgICB9O1xyXG5cclxuICAgIFRyZWVOb2RlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLnNsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgVHJlZU5vZGUucHJvdG90eXBlLmRmcyA9IGZ1bmN0aW9uIChjaGVjaykge1xyXG4gICAgICAgIHZhciBvdXQgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKCFjaGVjayB8fCAoY2hlY2sgJiYgY2hlY2sodGhpcy5jaGlsZHJlbltpXSkpKVxyXG4gICAgICAgICAgICAgICAgb3V0LnB1c2godGhpcy5jaGlsZHJlbltpXSk7XHJcbiAgICAgICAgICAgIG91dC5jb25jYXQodGhpcy5jaGlsZHJlbltpXS5kZnMoY2hlY2spKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH07XHJcblxyXG4gICAgVHJlZU5vZGUucHJvdG90eXBlLmJmcyA9IGZ1bmN0aW9uIChjaGVjaykge1xyXG4gICAgICAgIHZhciBvdXQgPSBbXSwgaTtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgaWYgKCFjaGVjayB8fCAoY2hlY2sgJiYgY2hlY2sodGhpcy5jaGlsZHJlbltpXSkpKVxyXG4gICAgICAgICAgICAgICAgb3V0LnB1c2godGhpcy5jaGlsZHJlbltpXSk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIG91dC5jb25jYXQodGhpcy5jaGlsZHJlbltpXS5iZnMoY2hlY2spKTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfTtcclxuXHJcbiAgICBUcmVlTm9kZS5leHRlbmQgPSBmdW5jdGlvbiAoZGVmYXVsdHMpIHtcclxuICAgICAgICB2YXIgX1RyZWVOb2RlID0gZnVuY3Rpb24gKHBhcmVudCwgZGF0YSkge1xyXG4gICAgICAgICAgICBUcmVlTm9kZS5jYWxsKHRoaXMsIHBhcmVudCwgZGF0YSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBfVHJlZU5vZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShUcmVlTm9kZS5wcm90b3R5cGUpO1xyXG4gICAgICAgIF9UcmVlTm9kZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBfVHJlZU5vZGU7XHJcbiAgICAgICAgZXh0ZW5kKF9UcmVlTm9kZS5wcm90b3R5cGUsIGRlZmF1bHRzKTtcclxuICAgICAgICByZXR1cm4gbmV3IF9UcmVlTm9kZShudWxsKTtcclxuICAgIH07XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBFdmVudEhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSB7fTtcclxuICAgIH07XHJcblxyXG4gICAgRXZlbnRIYW5kbGVyLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIG5hbWUgPSBhcmd1bWVudHNbMF07XHJcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzW25hbWVdIHx8IFtdO1xyXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbChhcmd1bWVudHMsIDAsIDEpO1xyXG4gICAgICAgIGNvbnNvbGUuZGVidWcobmFtZSwgYXJndW1lbnRzKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG5cclxuICAgIEV2ZW50SGFuZGxlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICghdGhpcy5saXN0ZW5lcnNbbmFtZV0pIHRoaXMubGlzdGVuZXJzW25hbWVdID0gW107XHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbbmFtZV0ucHVzaChjYWxsYmFjayk7XHJcbiAgICB9O1xyXG5cclxuICAgIEV2ZW50SGFuZGxlci5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmxpc3RlbmVyc1tuYW1lXTtcclxuICAgIH07XHJcblxyXG4gICAgRXZlbnRIYW5kbGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICh0aGlzLmxpc3RlbmVyc1tuYW1lXSkge1xyXG4gICAgICAgICAgICB2YXIgYXJyYXkgPSB0aGlzLmxpc3RlbmVyc1tuYW1lXTtcclxuICAgICAgICAgICAgaWYgKGFycmF5LmluZGV4T2YoY2FsbGJhY2spID4gLTEpIGFycmF5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB3aW5kb3cuRXZlbnRIYW5kbGVyID0gRXZlbnRIYW5kbGVyO1xyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbigpe1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gKCkge307XHJcblxyXG4gICAgdmFyIExvZ2dlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgaXNEZWJ1Zykge1xyXG4gICAgICAgIHRoaXMuZGVidWcgPSBpc0RlYnVnID8gY29uc29sZS5kZWJ1Zy5iaW5kKCkgOiBlbXB0eUZ1bmN0aW9uO1xyXG5cclxuICAgICAgICB0aGlzLmluZm8gPSBpc0RlYnVnID8gY29uc29sZS5pbmZvLmJpbmQoKSA6IGVtcHR5RnVuY3Rpb247XHJcblxyXG4gICAgICAgIHRoaXMud2FybiA9IGNvbnNvbGUud2Fybi5iaW5kKCk7XHJcblxyXG4gICAgICAgIHRoaXMuZXJyb3IgPSBjb25zb2xlLmVycm9yLmJpbmQoKTtcclxuICAgIH07XHJcblxyXG4gICAgd2luZG93LkxvZ2dlciA9IExvZ2dlcjtcclxufSkoKSk7XHJcbiIsIihmdW5jdGlvbigpe1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICAgICAgICBjb250YWluZXI6IHtcclxuICAgICAgICAgICAgc2VsZWN0b3I6ICcjY29id2ViJyxcclxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnY2ItY29udGFpbmVyJ1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdmFyIENvYndlYiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgICAgICBleHRlbmQodGhpcy5vcHRpb25zLCBkZWZhdWx0T3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLm9wdGlvbnMuY29udGFpbmVyLnNlbGVjdG9yKTtcclxuICAgICAgICBpZiAoIXRoaXMuY29udGFpbmVyKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29udGFpbmVyIHNlbGVjdG9yOiBcXCcnICtcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5jb250YWluZXIuc2VsZWN0b3IgKyAnXFwnJyk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmNvbnRhaW5lci5jbGFzc05hbWUpO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmRhdGEoJ2luc3RhbmNlJywgdGhpcyk7XHJcblxyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbmV3IExvZ2dlcih0aGlzLCB0cnVlKTtcclxuICAgICAgICB0aGlzLmV2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXIodGhpcyk7XHJcbiAgICAgICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzLmxvYWQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5ldmVudHMudHJpZ2dlcignYXBwLmxvYWRlZCcpO1xyXG4gICAgfTtcclxuXHJcbiAgICB3aW5kb3cuQ29id2ViID0gQ29id2ViO1xyXG59KCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMgPSB7XHJcbiAgICAgICAgYWxsOiB7fSxcclxuICAgICAgICBhZGQ6IGZ1bmN0aW9uIChuYW1lLCBpbml0LCBkZXBlbmRlbmNpZXMpIHtcclxuICAgICAgICAgICAgZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzIHx8IFtdO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hbGxbbmFtZV0gPSB7XHJcbiAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXM6IGRlcGVuZGVuY2llcyxcclxuICAgICAgICAgICAgICAgIGluaXQ6IGluaXRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxvYWQ6IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlID0gaW5zdGFuY2U7XHJcbiAgICAgICAgICAgIGFkZFJldmVyc2VEZXBlbmRlbmNpZXModGhpcy5hbGwpO1xyXG4gICAgICAgICAgICB2YXIgc29ydGVkTmFtZXMgPSB0b3BvbG9naWNhbFNvcnQoaW5zdGFuY2UsIHRoaXMuYWxsKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3J0ZWROYW1lcy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gc29ydGVkTmFtZXNbaV07XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsW25hbWVdLmluaXQoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLmV2ZW50cy50cmlnZ2VyKCdtb2R1bGVzLmxvYWRlZCcsIG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZXJyb3IoJ0xvYWRpbmcgbW9kdWxlICcgKyBuYW1lLCBleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuZXZlbnRzLnRyaWdnZXIoJ21vZHVsZXMuZXJyb3InLCBuYW1lLCBleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5zdGFuY2UuZXZlbnRzLnRyaWdnZXIoJ21vZHVsZXMubG9hZGVkLmFsbCcsIHNvcnRlZE5hbWVzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGFkZFJldmVyc2VEZXBlbmRlbmNpZXMgKG1vZHVsZXMpIHtcclxuICAgICAgICBmb3IgKHZhciBuYW1lIGluIG1vZHVsZXMpIHtcclxuICAgICAgICAgICAgdmFyIG1vZHVsZSA9IG1vZHVsZXNbbmFtZV07XHJcbiAgICAgICAgICAgIGlmICghbW9kdWxlLmRlcGVuZGFudCkgbW9kdWxlLmRlcGVuZGFudCA9IFtdO1xyXG4gICAgICAgICAgICBpZiAobW9kdWxlLmRlcGVuZGVuY2llcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5kZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVwUGx1Z2luID0gbW9kdWxlc1ttb2R1bGUuZGVwZW5kZW5jaWVzW2ldXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWRlcFBsdWdpbi5kZXBlbmRhbnQpIGRlcFBsdWdpbi5kZXBlbmRhbnQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBkZXBQbHVnaW4uZGVwZW5kYW50LnB1c2gobmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdG9wb2xvZ2ljYWxTb3J0IChpbnN0YW5jZSwgbW9kdWxlcykge1xyXG4gICAgICAgIHZhciBjYW5kaWRhdGVzID0gW10sIHNvcnRlZE5hbWVzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBtb2R1bGVzKVxyXG4gICAgICAgICAgICBpZiAobW9kdWxlc1tuYW1lXS5kZXBlbmRlbmNpZXMubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgY2FuZGlkYXRlcy5wdXNoKG5hbWUpO1xyXG4gICAgICAgIHdoaWxlIChjYW5kaWRhdGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIG5leHROYW1lID0gY2FuZGlkYXRlc1swXTtcclxuICAgICAgICAgICAgY2FuZGlkYXRlcy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgICAgIGlmIChtb2R1bGVzW25leHROYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vZHVsZSA9IG1vZHVsZXNbbmV4dE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgc29ydGVkTmFtZXMucHVzaChuZXh0TmFtZSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5kZXBlbmRhbnQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVwTmFtZSA9IG1vZHVsZS5kZXBlbmRhbnRbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbERlcGVuZGVuY2llc01ldChzb3J0ZWROYW1lcywgbW9kdWxlc1tkZXBOYW1lXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZXMucHVzaChkZXBOYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmV2ZW50cy50cmlnZ2VyKCdtb2R1bGVzLmVycm9yLm1pc3NpbmcnLCBuZXh0TmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIud2FybmluZygnTWlzc2luZyBtb2R1bGUgXFwnJyArIG5leHROYW1lICsgJ1xcJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhtb2R1bGVzKS5sZW5ndGggIT09IHNvcnRlZE5hbWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5ldmVudHMudHJpZ2dlcignbW9kdWxlcy5lcnJvci5jeWNsZScpO1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZXJyb3IoJ0RlcGVuZGVuY3kgY3ljbGUgZm91bmQgaW4gbW9kdWxlcycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc29ydGVkTmFtZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWxsRGVwZW5kZW5jaWVzTWV0IChsb2FkZWRVbnRpbE5vdywgbW9kdWxlKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUuZGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICBpZiAobG9hZGVkVW50aWxOb3cuaW5kZXhPZihtb2R1bGUuZGVwZW5kZW5jaWVzW2ldKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUubW9kdWxlcy5hZGQoJ3BhbmUtaGVhZGVyJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UuZXZlbnRzLm9uKCdwYW5lLmNyZWF0ZScsIGZ1bmN0aW9uIChwYW5lKSB7XHJcbiAgICAgICAgICAgIG9uQ3JlYXRlQ2FsbGJhY2socGFuZSwgaW5zdGFuY2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgWydwYW5lLXR5cGVzJ10pO1xyXG5cclxuICAgIGZ1bmN0aW9uIG9uQ3JlYXRlQ2FsbGJhY2sgKHBhbmUsIGluc3RhbmNlKSB7XHJcbiAgICAgICAgdmFyIGhlYWRlciA9IGNyZWF0ZUhlYWRlcigpO1xyXG4gICAgICAgIHBhbmUuYXBwZW5kKGhlYWRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlSGVhZGVyICgpIHtcclxuICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZGl2LmNsYXNzTmFtZSA9ICdwYW5lLWhlYWRlcic7XHJcbiAgICAgICAgcmV0dXJuIGRpdjtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUubW9kdWxlcy5hZGQoJ3BhbmUtdHlwZXMnLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICB2YXIgcGFuZVR5cGVzID0ge1xyXG4gICAgICAgICAgICBhbGw6IHt9LFxyXG4gICAgICAgICAgICBhZGQ6IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFja3MpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWxsW25hbWVdID0gY2FsbGJhY2tzO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hbGxbbmFtZV07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFsbFtuYW1lXTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaGFzOiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5hbGxbbmFtZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5ldmVudHMub24oJ3BhbmUuc3BsaXQnLCBmdW5jdGlvbiAob2xkUGFuZSwgbmV3UGFuZSkge1xyXG4gICAgICAgICAgICB2YXIgb2xkVHlwZSA9IG9sZFBhbmUuYXR0ckRhdGEoJ3BhbmUtdHlwZScpO1xyXG4gICAgICAgICAgICBpZiAob2xkVHlwZSkgaW5zdGFuY2UucGFuZS5zZXRUeXBlKG5ld1BhbmUsIG9sZFR5cGUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5wYW5lLnR5cGVzID0gcGFuZVR5cGVzO1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5wYW5lLnNldFR5cGUgPSBmdW5jdGlvbiAocGFuZSwgbmFtZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50eXBlcy5oYXMobmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0eXBlQ2FsbGJhY2tzID0gdGhpcy50eXBlcy5nZXQobmFtZSk7XHJcbiAgICAgICAgICAgICAgICB0eXBlQ2FsbGJhY2tzLm9uUGFuZVR5cGUocGFuZSwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhbmVIZWFkZXIgPSBwYW5lLnF1ZXJ5U2VsZWN0b3IoJy5wYW5lLWhlYWRlcicpO1xyXG4gICAgICAgICAgICAgICAgdHlwZUNhbGxiYWNrcy5vbkNyZWF0ZUhlYWRlcihwYW5lSGVhZGVyLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICBwYW5lLmRhdGFzZXQucGFuZVR5cGUgPSBuYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UucGFuZS5nZXRUeXBlID0gZnVuY3Rpb24gKHBhbmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhbmUuZGF0YXNldC5wYW5lVHlwZTtcclxuICAgICAgICB9O1xyXG4gICAgfSwgWydwYW5lJ10pO1xyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzLmFkZCgncGFuZScsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGluc3RhbmNlLmV2ZW50cy5vbignYXBwLmxvYWRlZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UucGFuZS5pbnRlcm5hbCA9IG5ldyBQYW5lKHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogaW5zdGFuY2Uub3B0aW9ucy5jb250YWluZXIuc2VsZWN0b3IsXHJcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3I6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAzXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25QYW5lQ3JlYXRlOiBvblBhbmVDcmVhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgb25QYW5lU3BsaXQ6IG9uUGFuZVNwbGl0LFxyXG4gICAgICAgICAgICAgICAgICAgIG9uUGFuZVJlc2l6ZTogb25QYW5lUmVzaXplLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vb25QYW5lTWVyZ2U6IG9uUGFuZU1lcmdlLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vb25QYW5lRGVzdHJveTogb25QYW5lRGVzdHJveSxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcm9vdCA9IGluc3RhbmNlLnBhbmUuaW50ZXJuYWwuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5wYW5lJyk7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnBhbmUuc2V0VHlwZShyb290LCAnc3VyZmFjZScpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5wYW5lID0ge307XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9uUGFuZUNyZWF0ZSAocGFuZSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5ldmVudHMudHJpZ2dlcigncGFuZS5jcmVhdGUnLCBwYW5lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9uUGFuZVNwbGl0IChvcmlnaW4sIG5ld1BhbmUpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UuZXZlbnRzLnRyaWdnZXIoJ3BhbmUuc3BsaXQnLCBvcmlnaW4sIG5ld1BhbmUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb25QYW5lUmVzaXplIChwYW5lKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmV2ZW50cy50cmlnZ2VyKCdwYW5lLnJlc2l6ZScsIHBhbmUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb25QYW5lTWVyZ2UgKG1lcmdlciwgdG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5kZWJ1Zygnb25QYW5lTWVyZ2UnLCBtZXJnZXIsIHRvUmVtb3ZlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9uUGFuZURlc3Ryb3kgKHBhbmUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5kZWJ1Zygnb25QYW5lRGVzdHJveScsIHBhbmUpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzLmFkZCgnaW50ZXJhY3Rpb24tbW9kZScsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGluc3RhbmNlLnN1cmZhY2UuaW50ZXJhY3Rpb24gPSB7XHJcbiAgICAgICAgICAgIGFsbDoge30sXHJcbiAgICAgICAgICAgIGFkZDogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hbGxbbmFtZV0gPSBjYWxsYmFja3M7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFsbFtuYW1lXTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuYWxsW25hbWVdO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBoYXM6IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gISF0aGlzLmFsbFtuYW1lXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9LCBbJ3N1cmZhY2UnXSk7XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgc3VyZmFjZUluZGV4ID0gMDtcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMuYWRkKCdzdXJmYWNlJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UucGFuZS50eXBlcy5hZGQoJ3N1cmZhY2UnLCB7XHJcbiAgICAgICAgICAgIG9uUGFuZVR5cGU6IG9uU3VyZmFjZVBhbmVUeXBlLFxyXG4gICAgICAgICAgICBvbkNyZWF0ZUhlYWRlcjogb25DcmVhdGVTdXJmYWNlSGVhZGVyXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmV2ZW50cy5vbigncGFuZS5yZXNpemUnLCBmdW5jdGlvbiAocGFuZSkge1xyXG4gICAgICAgICAgICBpZiAocGFuZS5hdHRyRGF0YSgncGFuZS10eXBlJykgPT09ICdzdXJmYWNlJylcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUNhbnZhc1NpemUoaW5zdGFuY2UsIHBhbmUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBzdXJmYWNlcyA9IGluc3RhbmNlLnBhbmUuaW50ZXJuYWwuY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAucXVlcnlTZWxlY3RvckFsbCgnLnBhbmUgY2FudmFzJyk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3VyZmFjZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUNhbnZhc1NpemUoaW5zdGFuY2UsIHN1cmZhY2VzW2ldLnBhcmVudE5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLnN1cmZhY2UgPSB7fTtcclxuICAgIH0sIFsncGFuZS10eXBlcyddKTtcclxuXHJcbiAgICBmdW5jdGlvbiBvblN1cmZhY2VQYW5lVHlwZSAocGFuZSwgaW5zdGFuY2UpIHtcclxuICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgICAgY2FudmFzLmlkID0gJ3N1cmZhY2UnICsgKHN1cmZhY2VJbmRleCsrKTtcclxuICAgICAgICBjYW52YXMuY2xhc3NOYW1lID0gJ3N1cmZhY2UnO1xyXG4gICAgICAgIHBhbmUuYXBwZW5kKGNhbnZhcyk7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLnN1cmZhY2UuZGF0YSA9IGluc3RhbmNlLnN1cmZhY2UuZGF0YSB8fCB7fTtcclxuICAgICAgICBpbnN0YW5jZS5zdXJmYWNlLmRhdGFbY2FudmFzLmlkXSA9IHt9O1xyXG4gICAgICAgIGluc3RhbmNlLnN1cmZhY2UuZGF0YVtjYW52YXMuaWRdLnN1cmZhY2UgPSB7XHJcbiAgICAgICAgICAgIHByb2o6IG1hdDQuY3JlYXRlKCksXHJcbiAgICAgICAgICAgIGNlbnRlcjogWzAsIDAsIDBdLFxyXG4gICAgICAgICAgICByb3RhdGlvbjogWzAsIC0wLjRdLFxyXG4gICAgICAgICAgICBkaXN0YW5jZTogNSxcclxuICAgICAgICAgICAgZ2V0Vmlld01hdHJpeDogZnVuY3Rpb24gKHZpZXcpIHtcclxuICAgICAgICAgICAgICAgIHZhciBleWUgPSBbMCwgMCwgMF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldENhbWVyYVBvc2l0aW9uKGV5ZSk7XHJcbiAgICAgICAgICAgICAgICBtYXQ0Lmxvb2tBdCh2aWV3LCBleWUsIHRoaXMuY2VudGVyLCBbMCwgMSwgMF0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRDYW1lcmFQb3NpdGlvbjogZnVuY3Rpb24gKGV5ZSkge1xyXG4gICAgICAgICAgICAgICAgZXllWzJdID0gLXRoaXMuZGlzdGFuY2U7XHJcbiAgICAgICAgICAgICAgICB2ZWMzLnJvdGF0ZVgoZXllLCBleWUsIHRoaXMucm90YXRpb25bMV0pO1xyXG4gICAgICAgICAgICAgICAgdmVjMy5yb3RhdGVZKGV5ZSwgZXllLCAtdGhpcy5yb3RhdGlvblswXSk7XHJcbiAgICAgICAgICAgICAgICB2ZWMzLmFkZChleWUsIGV5ZSwgdGhpcy5jZW50ZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdXBkYXRlQ2FudmFzU2l6ZShpbnN0YW5jZSwgcGFuZSk7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmV2ZW50cy50cmlnZ2VyKCdzdXJmYWNlLmNyZWF0ZScsIGNhbnZhcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gb25DcmVhdGVTdXJmYWNlSGVhZGVyIChoZWFkZXIsIGluc3RhbmNlKSB7XHJcbiAgICAgICAgdmFyIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgICAgICBsYWJlbC5pbm5lckhUTUwgPSAnU3VyZmFjZSBQYW5lJztcclxuICAgICAgICBoZWFkZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZUNhbnZhc1NpemUgKGluc3RhbmNlLCBwYW5lKSB7XHJcbiAgICAgICAgdmFyIGNhbnZhcyA9IHBhbmUucXVlcnlTZWxlY3RvcignY2FudmFzJyk7XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgICB2YXIgZGF0YSA9IGluc3RhbmNlLnN1cmZhY2UuZGF0YVtjYW52YXMuaWRdO1xyXG5cclxuICAgICAgICB2YXIgaGVhZGVyID0gcGFuZS5xdWVyeVNlbGVjdG9yKCcucGFuZS1oZWFkZXInKTtcclxuICAgICAgICB2YXIgaGVhZGVySGVpZ2h0ID0gaGVhZGVyID8gaGVhZGVyLmhlaWdodCgpIDogMDtcclxuXHJcbiAgICAgICAgdmFyIHdpZHRoID0gcGFuZS53aWR0aCgpLCBoZWlnaHQgPSBwYW5lLmhlaWdodCgpIC0gaGVhZGVySGVpZ2h0O1xyXG4gICAgICAgIGRhdGEuaW1nRGF0YSA9IGNvbnRleHQuY3JlYXRlSW1hZ2VEYXRhKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgIGRhdGEuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod2lkdGggKiBoZWlnaHQgKiA0KTtcclxuXHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcclxuXHJcbiAgICAgICAgbWF0NC5wZXJzcGVjdGl2ZShkYXRhLnN1cmZhY2UucHJvaiwgNDUgKiBERUcyUkFELCB3aWR0aCAvIGhlaWdodCwgMC4xLCAxMDAwKTtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBvcmlnaW5hbFJvdGF0aW9uID0gbnVsbDtcclxuICAgIHZhciBtb3VzZURvd25Db29yZHMgPSBudWxsO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUubW9kdWxlcy5hZGQoJ2NvbW1vbi1pbnRlcmFjdGlvbicsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGluc3RhbmNlLnN1cmZhY2UuaW50ZXJhY3Rpb24uYWRkKCdjb21tb24nLCB7XHJcbiAgICAgICAgICAgIG9uTW91c2VNb3ZlOiBmdW5jdGlvbiAoZXZlbnQsIHJlYWxDb29yZHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQuZGF0YXNldC5tb3ZpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2FudmFzID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gaW5zdGFuY2Uuc3VyZmFjZS5kYXRhW2NhbnZhcy5pZF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gZ2V0Q29vcmRzRGVsdGEobW91c2VEb3duQ29vcmRzLCByZWFsQ29vcmRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tYmluZShkYXRhLnN1cmZhY2Uucm90YXRpb24sIG9yaWdpbmFsUm90YXRpb24sIGRlbHRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uTW91c2VEb3duOiBmdW5jdGlvbiAoZXZlbnQsIHJlYWxDb29yZHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC53aGljaCA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5kYXRhc2V0Lm1vdmluZyA9ICd0cnVlJztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2FudmFzID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gaW5zdGFuY2Uuc3VyZmFjZS5kYXRhW2NhbnZhcy5pZF07XHJcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxSb3RhdGlvbiA9IGRhdGEuc3VyZmFjZS5yb3RhdGlvbi5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vdXNlRG93bkNvb3JkcyA9IHJlYWxDb29yZHM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25Nb3VzZVVwOiBmdW5jdGlvbiAoZXZlbnQsIHJlYWxDb29yZHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC53aGljaCA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBldmVudC50YXJnZXQuZGF0YXNldC5tb3Zpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhbnZhcyA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGluc3RhbmNlLnN1cmZhY2UuZGF0YVtjYW52YXMuaWRdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IGdldENvb3Jkc0RlbHRhKG1vdXNlRG93bkNvb3JkcywgcmVhbENvb3Jkcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tYmluZShkYXRhLnN1cmZhY2Uucm90YXRpb24sIG9yaWdpbmFsUm90YXRpb24sIGRlbHRhKTtcclxuICAgICAgICAgICAgICAgICAgICBtb3VzZURvd25Db29yZHMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIChldmVudCwgcmVhbENvb3Jkcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sIFsnc3VyZmFjZS1pbnRlcmFjdGlvbiddKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb21iaW5lICh0YXJnZXQsIG9yaWdpbmFsUm90YXRpb24sIGRlbHRhKSB7XHJcbiAgICAgICAgaWYgKCFvcmlnaW5hbFJvdGF0aW9uKSByZXR1cm47XHJcbiAgICAgICAgdGFyZ2V0WzBdID0gb3JpZ2luYWxSb3RhdGlvblswXSArIGRlbHRhWzBdICogMC4wMDU7XHJcbiAgICAgICAgdGFyZ2V0WzFdID0gb3JpZ2luYWxSb3RhdGlvblsxXSArIGRlbHRhWzFdICogMC4wMDU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Q29vcmRzRGVsdGEgKGluaXRpYWwsIGN1cnJlbnQpIHtcclxuICAgICAgICBpZiAoIWluaXRpYWwpIHJldHVybiBbMCwgMF07XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgaW5pdGlhbFswXSAtIGN1cnJlbnRbMF0sXHJcbiAgICAgICAgICAgIGluaXRpYWxbMV0gLSBjdXJyZW50WzFdXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUubW9kdWxlcy5hZGQoJ29iamVjdC1pbnRlcmFjdGlvbicsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGluc3RhbmNlLnN1cmZhY2UuaW50ZXJhY3Rpb24uYWRkKCdvYmplY3QnLCB7XHJcbiAgICAgICAgICAgIG9uTW91c2VNb3ZlOiBmdW5jdGlvbiAoZXZlbnQsIHJlYWxDb29yZHMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbk1vdXNlRG93bjogZnVuY3Rpb24gKGV2ZW50LCByZWFsQ29vcmRzKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZGVidWcoJ29uTW91c2VEb3duJywgZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uTW91c2VVcDogZnVuY3Rpb24gKGV2ZW50LCByZWFsQ29vcmRzKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5sb2dnZXIuZGVidWcoJ29uTW91c2VVcCcsIGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiAoZXZlbnQsIHJlYWxDb29yZHMpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmxvZ2dlci5kZWJ1Zygnb25DbGljaycsIGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmV2ZW50cy5vbignc3VyZmFjZS5jcmVhdGUnLCBmdW5jdGlvbiAoc3VyZmFjZSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5zdXJmYWNlLnNldEludGVyYWN0aW9uKHN1cmZhY2UsICdvYmplY3QnKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9LCBbJ3N1cmZhY2UtaW50ZXJhY3Rpb24nXSk7XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMuYWRkKCdzdXJmYWNlLWludGVyYWN0aW9uJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2Uuc3VyZmFjZS5zZXRJbnRlcmFjdGlvbiA9IGZ1bmN0aW9uIChzdXJmYWNlLCBuYW1lKSB7XHJcbiAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbnMgPSBpbnN0YW5jZS5zdXJmYWNlLmludGVyYWN0aW9uO1xyXG4gICAgICAgICAgICBpZiAoaW50ZXJhY3Rpb25zLmhhcyhuYW1lKSlcclxuICAgICAgICAgICAgICAgIHN1cmZhY2UuYXR0ckRhdGEoJ3N1cmZhY2UtaW50ZXJhY3Rpb24nLCBuYW1lKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5zdXJmYWNlLmdldEludGVyYWN0aW9uID0gZnVuY3Rpb24gKHN1cmZhY2UpIHtcclxuICAgICAgICAgICAgdmFyIGludGVyYWN0aW9ucyA9IGluc3RhbmNlLnN1cmZhY2UuaW50ZXJhY3Rpb247XHJcbiAgICAgICAgICAgIHZhciBuYW1lID0gc3VyZmFjZS5hdHRyRGF0YSgnc3VyZmFjZS1pbnRlcmFjdGlvbicpO1xyXG4gICAgICAgICAgICByZXR1cm4gaW50ZXJhY3Rpb25zLmdldChuYW1lKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5ldmVudHMub24oJ3N1cmZhY2UuY3JlYXRlJywgZnVuY3Rpb24gKHN1cmZhY2UpIHtcclxuICAgICAgICAgICAgc3VyZmFjZS5vbm1vdXNlbW92ZSA9IG9uU3VyZmFjZUV2ZW50O1xyXG4gICAgICAgICAgICBzdXJmYWNlLm9ubW91c2Vkb3duID0gb25TdXJmYWNlRXZlbnQ7XHJcbiAgICAgICAgICAgIHN1cmZhY2Uub25tb3VzZXVwID0gb25TdXJmYWNlRXZlbnQ7XHJcbiAgICAgICAgICAgIHN1cmZhY2Uub25jbGljayA9IG9uU3VyZmFjZUV2ZW50O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBvblN1cmZhY2VFdmVudCAoZXZlbnQpIHtcclxuICAgICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IGluc3RhbmNlLnN1cmZhY2UuZ2V0SW50ZXJhY3Rpb24oZXZlbnQudGFyZ2V0KTtcclxuICAgICAgICAgICAgdmFyIGtlZXBSdW5uaW5nID0gcnVuQ2FsbGJhY2soY2FsbGJhY2tzLCBldmVudCk7XHJcbiAgICAgICAgICAgIGlmIChrZWVwUnVubmluZykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbW1vbiA9IGluc3RhbmNlLnN1cmZhY2UuaW50ZXJhY3Rpb24uZ2V0KCdjb21tb24nKTtcclxuICAgICAgICAgICAgICAgIHJ1bkNhbGxiYWNrKGNvbW1vbiwgZXZlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnN0YW5jZS5ldmVudHMub24oJ3BhbmUuc3BsaXQnLCBmdW5jdGlvbiAob2xkUGFuZSwgbmV3UGFuZSkge1xyXG4gICAgICAgICAgICBuZXdQYW5lLmF0dHJEYXRhKCdzdXJmYWNlLWludGVyYWN0aW9uJywgb2xkUGFuZS5hdHRyRGF0YSgnc3VyZmFjZS1pbnRlcmFjdGlvbicpKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sIFsnaW50ZXJhY3Rpb24tbW9kZScsICdzdXJmYWNlJ10pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJ1bkNhbGxiYWNrIChjYWxsYmFja3MsIGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIHJlYWxDb29yZHMgPSBnZXRMb2NhbENvb3JkaW5hdGVzKGV2ZW50KTtcclxuICAgICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnbW91c2Vtb3ZlJzogcmV0dXJuIGNhbGxiYWNrcy5vbk1vdXNlTW92ZShldmVudCwgcmVhbENvb3Jkcyk7XHJcbiAgICAgICAgICAgIGNhc2UgJ21vdXNlZG93bic6IHJldHVybiBjYWxsYmFja3Mub25Nb3VzZURvd24oZXZlbnQsIHJlYWxDb29yZHMpO1xyXG4gICAgICAgICAgICBjYXNlICdtb3VzZXVwJzogcmV0dXJuIGNhbGxiYWNrcy5vbk1vdXNlVXAoZXZlbnQsIHJlYWxDb29yZHMpO1xyXG4gICAgICAgICAgICBjYXNlICdjbGljayc6IHJldHVybiBjYWxsYmFja3Mub25DbGljayhldmVudCwgcmVhbENvb3Jkcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldExvY2FsQ29vcmRpbmF0ZXMgKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIGNvb3JkaW5hdGVzO1xyXG4gICAgICAgIGlmIChldmVudC5wYWdlWCB8fCBldmVudC5wYWdlWSkge1xyXG4gICAgICAgICAgICBjb29yZGluYXRlcyA9IFtldmVudC5wYWdlWCwgZXZlbnQucGFnZVldO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzID0gW1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuY2xpZW50WCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCArIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LFxyXG4gICAgICAgICAgICAgICAgZXZlbnQuY2xpZW50WSArIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wICsgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcFxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb29yZGluYXRlc1swXSAtPSBldmVudC50YXJnZXQub2Zmc2V0TGVmdDtcclxuICAgICAgICBjb29yZGluYXRlc1sxXSAtPSBldmVudC50YXJnZXQub2Zmc2V0VG9wO1xyXG4gICAgICAgIHJldHVybiBjb29yZGluYXRlcztcclxuICAgIH1cclxufSkoKSk7XHJcbiIsIigoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIENvYndlYi5wcm90b3R5cGUubW9kdWxlcy5hZGQoJ3JlbmRlci1zb2xpZCcsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIHZhciBzaGFkZXIgPSBuZXcgU2hhZGVyKFxyXG4gICAgICAgICAgICAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0OycgK1xyXG4gICAgICAgICAgICAnYXR0cmlidXRlIHZlYzMgYV92ZXJ0ZXg7JyArXHJcbiAgICAgICAgICAgICdhdHRyaWJ1dGUgdmVjMyBhX25vcm1hbDsnICtcclxuICAgICAgICAgICAgJ3ZhcnlpbmcgdmVjMyB2X25vcm1hbDsnICtcclxuICAgICAgICAgICAgJ3VuaWZvcm0gbWF0NCB1X212cDsnICtcclxuICAgICAgICAgICAgJ3VuaWZvcm0gbWF0NCB1X21vZGVsOycgK1xyXG4gICAgICAgICAgICAndm9pZCBtYWluKCkgeycgK1xyXG4gICAgICAgICAgICAnICAgIHZfbm9ybWFsID0gKHVfbW9kZWwgKiB2ZWM0KGFfbm9ybWFsLDAuMCkpLnh5ejsnICtcclxuICAgICAgICAgICAgJyAgICBnbF9Qb3NpdGlvbiA9IHVfbXZwICogdmVjNChhX3ZlcnRleCwxLjApOycgK1xyXG4gICAgICAgICAgICAnfScsXHJcbiAgICAgICAgICAgICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7JyArXHJcbiAgICAgICAgICAgICd2YXJ5aW5nIHZlYzMgdl9ub3JtYWw7JyArXHJcbiAgICAgICAgICAgICd1bmlmb3JtIHZlYzMgdV9saWdodHZlY3RvcjsnICtcclxuICAgICAgICAgICAgJ3VuaWZvcm0gdmVjNCB1X2NvbG9yOycgK1xyXG4gICAgICAgICAgICAndm9pZCBtYWluKCkgeycgK1xyXG4gICAgICAgICAgICAnICB2ZWMzIE4gPSBub3JtYWxpemUodl9ub3JtYWwpOycgK1xyXG4gICAgICAgICAgICAnICB2ZWM0IGFtYmllbnQgPSB2ZWM0KDAuMSwgMC4xLCAwLjEsIDEpOycgK1xyXG4gICAgICAgICAgICAnICBnbF9GcmFnQ29sb3IgPSBhbWJpZW50ICsgdV9jb2xvciAqIG1heCgwLjAsIGRvdCh1X2xpZ2h0dmVjdG9yLE4pKTsnICtcclxuICAgICAgICAgICAgJ30nXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdmFyIHRlbXAgPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICAgIHZhciBtdnAgPSBtYXQ0LmNyZWF0ZSgpO1xyXG5cclxuICAgICAgICB2YXIgdW5pZm9ybXMgPSB7XHJcbiAgICAgICAgICAgIHVfY29sb3I6IFswLjcsIDAuNywgMC43LCAxXSxcclxuICAgICAgICAgICAgdV9saWdodHZlY3RvcjogbnVsbCxcclxuICAgICAgICAgICAgdV9tb2RlbDogbnVsbCxcclxuICAgICAgICAgICAgdV9tdnA6IG12cFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmdyYXBoaWNzLnJlbmRlcnMuYWRkKCdzb2xpZCcsIGZ1bmN0aW9uIChzdXJmYWNlKSB7XHJcbiAgICAgICAgICAgIHZhciBvYmpzID0gaW5zdGFuY2Uuc2NlbmUucm9vdC5kZnMoKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmpzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0gb2Jqc1tpXS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9iai50eXBlID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsaWdodERpcmVjdGlvbiA9IHZlYzMuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VyZmFjZS5nZXRDYW1lcmFQb3NpdGlvbihsaWdodERpcmVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmVjMy5hZGQobGlnaHREaXJlY3Rpb24sIGxpZ2h0RGlyZWN0aW9uLCBbLTEsIDAsIDJdKTtcclxuICAgICAgICAgICAgICAgICAgICB2ZWMzLm5vcm1hbGl6ZShsaWdodERpcmVjdGlvbiwgbGlnaHREaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLnVfbGlnaHR2ZWN0b3IgPSBsaWdodERpcmVjdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3VyZmFjZS5nZXRWaWV3TWF0cml4KHRlbXApO1xyXG4gICAgICAgIFx0XHRcdG1hdDQubXVsdGlwbHkodGVtcCwgdGVtcCwgb2JqLm1vZGVsKTtcclxuICAgICAgICBcdFx0XHRtYXQ0Lm11bHRpcGx5KG12cCwgc3VyZmFjZS5wcm9qLCB0ZW1wKTtcclxuXHJcbiAgICAgICAgXHRcdFx0dW5pZm9ybXMudV9tb2RlbCA9IG9iai5tb2RlbDtcclxuICAgICAgICBcdFx0XHRzaGFkZXIudW5pZm9ybXModW5pZm9ybXMpLmRyYXcob2JqLm1lc2gsIG9iai5wcmltaXRpdmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmV2ZW50cy5vbignc3VyZmFjZS5jcmVhdGUnLCBmdW5jdGlvbiAoc3VyZmFjZSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5zdXJmYWNlLnNldFJlbmRlcihzdXJmYWNlLCAnc29saWQnKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sIFsnc3VyZmFjZS1yZW5kZXInXSk7XHJcbn0pKCkpO1xyXG4iLCIoKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMuYWRkKCdzdXJmYWNlLXJlbmRlcicsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGluc3RhbmNlLnN1cmZhY2Uuc2V0UmVuZGVyID0gZnVuY3Rpb24gKHN1cmZhY2UsIG5hbWUpIHtcclxuICAgICAgICAgICAgdmFyIHJlbmRlcnMgPSBpbnN0YW5jZS5ncmFwaGljcy5yZW5kZXJzO1xyXG4gICAgICAgICAgICBpZiAocmVuZGVycy5oYXMobmFtZSkpXHJcbiAgICAgICAgICAgICAgICBzdXJmYWNlLmF0dHJEYXRhKCdyZW5kZXInLCBuYW1lKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5zdXJmYWNlLmdldFJlbmRlciA9IGZ1bmN0aW9uIChzdXJmYWNlKSB7XHJcbiAgICAgICAgICAgIHZhciByZW5kZXJzID0gaW5zdGFuY2UuZ3JhcGhpY3MucmVuZGVycztcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSBzdXJmYWNlLmF0dHJEYXRhKCdyZW5kZXInKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcnMuZ2V0KG5hbWUpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBwYW5lcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wYW5lJyk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAocGFuZXNbaV0uZGF0YXNldC5wYW5lVHlwZSA9PSAnc3VyZmFjZScpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjYW52YXMgPSBwYW5lc1tpXS5xdWVyeVNlbGVjdG9yKCdjYW52YXMnKTtcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5kYXRhc2V0LnJlbmRlciA9ICdzb2xpZCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmV2ZW50cy5vbigncGFuZS5zcGxpdCcsIGZ1bmN0aW9uIChvbGRQYW5lLCBuZXdQYW5lKSB7XHJcbiAgICAgICAgICAgIG5ld1BhbmUuYXR0ckRhdGEoJ3N1cmZhY2UtcmVuZGVyJywgb2xkUGFuZS5hdHRyRGF0YSgnc3VyZmFjZS1yZW5kZXInKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBbJ2dyYXBoaWNzLXJlbmRlcicsICdzdXJmYWNlJ10pO1xyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzLmFkZCgnZ3JhcGhpY3MtcmVuZGVyJywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UuZ3JhcGhpY3MucmVuZGVycyA9IHtcclxuICAgICAgICAgICAgYWxsOiB7fSxcclxuICAgICAgICAgICAgYWRkOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWxsW25hbWVdID0gY2FsbGJhY2s7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFsbFtuYW1lXTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuYWxsW25hbWVdO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBoYXM6IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gISF0aGlzLmFsbFtuYW1lXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9LCBbJ2dyYXBoaWNzJ10pO1xyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIEdyYXBoaWNzID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgdGhpcy5nbCA9IEdMLmNyZWF0ZSh7XHJcbiAgICAgICAgICAgIGhlaWdodDogc2NyZWVuLmhlaWdodCxcclxuICAgICAgICAgICAgd2lkdGg6IHNjcmVlbi53aWR0aFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZ2wuYW5pbWF0ZSgpO1xyXG4gICAgICAgIHRoaXMuZ2wub25kcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVuZGVyVGFyZ2V0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2NhbnZhcycpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlbmRlclRhcmdldHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICBkcmF3UmVuZGVyVGFyZ2V0KGluc3RhbmNlLCByZW5kZXJUYXJnZXRzW2ldKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZ2wuY2xlYXJDb2xvcigwLjM0OSwgMC4zNDksIDAuMzQ5LCAxKTtcclxuICAgICAgICB0aGlzLmdsLmVuYWJsZSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xyXG4gICAgfTtcclxuXHJcbiAgICBDb2J3ZWIucHJvdG90eXBlLm1vZHVsZXMuYWRkKCdncmFwaGljcycsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGluc3RhbmNlLmdyYXBoaWNzID0gbmV3IEdyYXBoaWNzKGluc3RhbmNlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIGRyYXdSZW5kZXJUYXJnZXQgKGluc3RhbmNlLCBjYW52YXMpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IGluc3RhbmNlLnN1cmZhY2UuZGF0YVtjYW52YXMuaWRdO1xyXG4gICAgICAgIHZhciBnbCA9IGluc3RhbmNlLmdyYXBoaWNzLmdsO1xyXG5cclxuICAgICAgICB2YXIgd2lkdGggID0gY2FudmFzLmNsaWVudFdpZHRoLCBoZWlnaHQgPSBjYW52YXMuY2xpZW50SGVpZ2h0O1xyXG4gICAgICAgIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgfCBnbC5ERVBUSF9CVUZGRVJfQklUKTtcclxuICAgICAgICBnbC52aWV3cG9ydCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgdmFyIHJlbmRlciA9IGluc3RhbmNlLnN1cmZhY2UuZ2V0UmVuZGVyKGNhbnZhcyk7XHJcbiAgICAgICAgaWYgKHJlbmRlcikgcmVuZGVyKGRhdGEuc3VyZmFjZSk7XHJcblxyXG4gICAgICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgICAgaWYgKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgZ2wucmVhZFBpeGVscygwLCAwLCB3aWR0aCwgaGVpZ2h0LCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBkYXRhLmJ1ZmZlcik7XHJcbiAgICAgICAgICAgIGRhdGEuaW1nRGF0YS5kYXRhLnNldChkYXRhLmJ1ZmZlcik7XHJcbiAgICAgICAgICAgIGNvbnRleHQucHV0SW1hZ2VEYXRhKGRhdGEuaW1nRGF0YSwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpKTtcclxuIiwiKChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgQ29id2ViLnByb3RvdHlwZS5tb2R1bGVzLmFkZCgnc2NlbmUnLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBpbnN0YW5jZS5zY2VuZSA9IHtcclxuICAgICAgICAgICAgcm9vdDogVHJlZU5vZGUuZXh0ZW5kKHt9KVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBtYXQgPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICAgIG1hdDQucm90YXRlWShtYXQsIG1hdCwgMC44KTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2Uuc2NlbmUucm9vdC5hZGQoe1xyXG4gICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcclxuICAgICAgICAgICAgcHJpbWl0aXZlOiBpbnN0YW5jZS5ncmFwaGljcy5nbC5UUklBTkdMRVMsXHJcbiAgICAgICAgICAgIG1lc2g6IEdMLk1lc2guY3ViZSgpLFxyXG4gICAgICAgICAgICBtb2RlbDogbWF0LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGluc3RhbmNlLnNjZW5lLnJvb3QuYWRkKHtcclxuICAgICAgICAgICAgdHlwZTogJ2xpZ3RoJyxcclxuICAgICAgICAgICAgY29sb3I6IFsxLCAxLCAxXSxcclxuICAgICAgICAgICAgaW50ZW5zaXR5OiAxXHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBbJ2dyYXBoaWNzJ10pO1xyXG59KSgpKTtcclxuIl19
