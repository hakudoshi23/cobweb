{"version":3,"sources":["jspane.js"],"names":["wrapByGroupIfNeeded","self","pane","axis","group","parentNode","isGroup","className","indexOf","hasRightAxis","dataset","createGroup","replaceElement","appendChild","setDimensions","getDimensions","unwrapFromGroupIfNeeded","hasSingleChildren","children","length","document","createElement","createAnchor","onAnchorMouseDown","anchor","addEventListener","delta","JSON","stringify","getAnchorDelta","event","center","getElementCenter","pageX","pageY","updateAnchorFeedback","treshhold","action","getAnchorAction","replace","a","b","updateSeparatorPanes","separator","axisIndex","axisToIndex","parseFloat","deltaPercentage","getClientProperty","pane1","previousSibling","pane2","nextSibling","pane1Dimensions","pane2Dimensions","runCallback","callbackName","callback","options","callbacks","args","Array","prototype","slice","call","arguments","apply","element","getBoundingClientRect","left","width","top","height","axisWithCapital","charAt","toUpperCase","propertyName","current","toReplace","parent","insertBefore","removeChild","extend","defaults","properties","property","hasOwnProperty","value","defaultOptions","container","size","onPaneCreate","onPaneSplit","onPaneResize","onPaneMerge","onPaneDestroy","Pane","createPane","createSeparator","onSeparatorMouseDown","axisLetter","target","positionArray","position","initial","this","fn","containerId","querySelector","rootPane","clientX","clientY","parse","split","merge","actionRemoved","newPane","currentPaneDimensions","newPaneDimensions","updateGroupDimensions","toRemove","paneDimensions","toRemoveDimensions","dimensions","dimensionsAsString","getGroup","style","panes","getPanes","sepSize","getSeparatorsSize","subSize","newWidth","newHeight","isChanged","subPanes","getAllPanes","i","updateDimensions","isGroupNode","output","classList","contains","push","querySelectorAll","getSeparators","total","separators","setGroupDimensions","arrayOfDimensions","dim","getGroupDimensions","window"],"mappings":"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","file":"jspane.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    var defaultOptions = {\r\n        container: '#jspane',\r\n        anchor: {\r\n            treshhold: 20\r\n        },\r\n        separator: {\r\n            size: 5\r\n        },\r\n        callbacks: {\r\n            onPaneCreate: null,\r\n            onPaneSplit: null,\r\n            onPaneResize: null,\r\n            onPaneMerge: null,\r\n            onPaneDestroy: null,\r\n        }\r\n    };\r\n\r\n    var Pane = function (options) {\r\n        this.fn = Pane.prototype;\r\n        var self = this;\r\n\r\n        this.options = defaultOptions;\r\n        extend(defaultOptions, options);\r\n\r\n        var containerId = this.options.container;\r\n        this.container = document.querySelector(containerId);\r\n\r\n        this.current = {\r\n            separator: null,\r\n            anchor: null\r\n        };\r\n\r\n        var rootPane = createPane();\r\n        this.container.appendChild(rootPane);\r\n        runCallback(self, 'onPaneCreate', rootPane);\r\n\r\n        document.addEventListener('mousemove', function (event) {\r\n            var delta = 0;\r\n            if (self.current.anchor) {\r\n                var anchor = self.current.anchor;\r\n                delta = getAnchorDelta(anchor, event);\r\n\r\n                anchor.dataset.delta = JSON.stringify(delta);\r\n                updateAnchorFeedback(anchor, delta, self.options.anchor.treshhold);\r\n            }\r\n            if (self.current.separator) {\r\n                var separator = self.current.separator;\r\n                var group = separator.parentNode;\r\n                var axis = group.dataset.axis;\r\n\r\n                var current = [event.clientX, event.clientY];\r\n                var initial = JSON.parse(separator.dataset.initial);\r\n                delta = current[axisToIndex(axis)] - initial;\r\n                separator.dataset.delta = delta;\r\n\r\n                updateSeparatorPanes(self, separator, axis, delta);\r\n                separator.dataset.initial = JSON.stringify(initial + delta);\r\n            }\r\n        });\r\n\r\n        document.addEventListener('mouseup', function (event) {\r\n            if (self.current.separator) self.current.separator = null;\r\n            if (self.current.anchor) {\r\n                var anchor = self.current.anchor;\r\n                var delta = JSON.parse(anchor.dataset.delta);\r\n\r\n                var pane = anchor.parentNode;\r\n                switch (getAnchorAction(delta, self.options.anchor.treshhold)) {\r\n                    case 'left': self.split(pane, 'width'); break;\r\n                    case 'right': self.merge(pane, 'width'); break;\r\n                    case 'up': self.split(pane, 'height'); break;\r\n                    case 'down': self.merge(pane, 'height'); break;\r\n                }\r\n                var actionRemoved = anchor.className.replace(/\\s+action-\\w*/, '');\r\n                anchor.dataset.delta = JSON.stringify([0, 0]);\r\n                anchor.className = actionRemoved;\r\n\r\n                self.current.anchor = null;\r\n            }\r\n        });\r\n\r\n        this.split = function (pane, axis) {\r\n            var group = wrapByGroupIfNeeded(self, pane, axis);\r\n            var newPane = createPane();\r\n            var separator = createSeparator(self.options.separator.size, axis);\r\n\r\n            var axisIndex = axisToIndex(axis);\r\n            var currentPaneDimensions = self.getDimensions(pane);\r\n            var newPaneDimensions = self.getDimensions(newPane);\r\n            newPaneDimensions[axisIndex] = currentPaneDimensions[axisIndex] / 2.0;\r\n            currentPaneDimensions[axisIndex] = currentPaneDimensions[axisIndex] / 2.0;\r\n\r\n            group.insertBefore(newPane, pane.nextSibling);\r\n            group.insertBefore(separator, pane.nextSibling);\r\n\r\n            self.setDimensions(pane, currentPaneDimensions);\r\n            self.setDimensions(newPane, newPaneDimensions);\r\n            self.updateGroupDimensions(group);\r\n            runCallback(self, 'onPaneCreate', newPane);\r\n            runCallback(self, 'onPaneSplit', pane, newPane);\r\n        };\r\n\r\n        this.merge = function (pane, axis) {\r\n            if (pane.nextSibling) {\r\n                var group = pane.parentNode;\r\n                if (group.dataset.axis === axis) {\r\n                    var toRemove = pane.nextSibling.nextSibling;\r\n                    runCallback(self, 'onPaneMerge', pane, toRemove);\r\n                    runCallback(self, 'onPaneDestroy', toRemove);\r\n\r\n                    var paneDimensions = self.getDimensions(pane);\r\n                    var toRemoveDimensions = self.getDimensions(toRemove);\r\n\r\n                    group.removeChild(pane.nextSibling);\r\n                    group.removeChild(pane.nextSibling);\r\n\r\n                    var axisIndex = axisToIndex(axis);\r\n                    paneDimensions[axisIndex] += toRemoveDimensions[axisIndex];\r\n                    self.setDimensions(pane, paneDimensions);\r\n\r\n                    unwrapFromGroupIfNeeded(self, pane, axis);\r\n                    self.updateGroupDimensions(pane.parentNode);\r\n                }\r\n            }\r\n        };\r\n\r\n        function createPane () {\r\n            var pane = document.createElement('div');\r\n            pane.className = 'pane';\r\n            pane.appendChild(createAnchor(onAnchorMouseDown));\r\n            self.setDimensions(pane, [100, 100]);\r\n            return pane;\r\n        }\r\n\r\n        function createSeparator (size, axis) {\r\n            var separator = document.createElement('div');\r\n            separator.addEventListener('mousedown', onSeparatorMouseDown);\r\n            var axisLetter = axisToIndex(axis) ? 'h' : 'v';\r\n            separator.className = 'pane-separator pane-separator-' + axisLetter;\r\n            return separator;\r\n        }\r\n\r\n        function onAnchorMouseDown (event) {\r\n            self.current.anchor = event.target;\r\n        }\r\n\r\n        function onSeparatorMouseDown (event) {\r\n            var separator = event.target;\r\n            self.current.separator = separator;\r\n            var group = separator.parentNode;\r\n            var axis = group.dataset.axis;\r\n            var positionArray = [event.pageX, event.pageY];\r\n            var position = positionArray[axisToIndex(axis)];\r\n            separator.dataset.initial = JSON.stringify(position);\r\n        }\r\n    };\r\n\r\n    Pane.prototype.setDimensions = function (pane, dimensions) {\r\n        var dimensionsAsString = JSON.stringify(dimensions);\r\n        pane.dataset.dimensions = dimensionsAsString;\r\n\r\n        var group = this.getGroup(pane);\r\n        if (group === null) {\r\n            pane.style.width = 'calc(100% - 0px)';\r\n            pane.style.height = 'calc(100% - 0px)';\r\n            runCallback(this, 'onPaneResize', pane);\r\n        } else {\r\n            var panes = this.getPanes(group);\r\n            var sepSize = this.getSeparatorsSize(group);\r\n            var axis = group.dataset.axis;\r\n\r\n            var subSize = [0, 0];\r\n            if (panes.length > 0)\r\n                subSize[axisToIndex(axis)] = (sepSize / panes.length);\r\n            var newWidth = 'calc(' + dimensions[0] + '% - ' + subSize[0] + 'px)';\r\n            var newHeight = 'calc(' + dimensions[1] + '% - ' + subSize[1] + 'px)';\r\n            var isChanged = (pane.style.width != newWidth) ||\r\n                (pane.style.height != newHeight);\r\n            pane.style.width = newWidth;\r\n            pane.style.height = newHeight;\r\n\r\n            if (isChanged) {\r\n                runCallback(this, 'onPaneResize', pane);\r\n                if (pane.className.indexOf('pane-group') > -1) {\r\n                    var subPanes = this.getAllPanes(pane);\r\n                    for (var i = 0; i < subPanes.length; i++)\r\n                        runCallback(this, 'onPaneResize', subPanes[i]);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    Pane.prototype.updateDimensions = function (pane) {\r\n        this.setDimensions(pane, this.getDimensions(pane));\r\n    };\r\n\r\n    Pane.prototype.getDimensions = function (pane) {\r\n        return JSON.parse(pane.dataset.dimensions);\r\n    };\r\n\r\n    Pane.prototype.getGroup = function (pane) {\r\n        var parent = pane.parentNode;\r\n        if (parent) {\r\n            var isGroupNode = parent.className.indexOf('pane-group') != -1;\r\n            if (isGroupNode) return parent;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    Pane.prototype.updateGroupDimensions = function (group) {\r\n        var panes = this.getPanes(group);\r\n        for (var i = 0; i < panes.length; i++)\r\n            this.updateDimensions(panes[i]);\r\n    };\r\n\r\n    Pane.prototype.getPanes = function (group) {\r\n        var output = [], children = group.children;\r\n        for (var i = 0; i < children.length; i++) {\r\n            if (children[i].classList.contains('pane')) {\r\n                output.push(children[i]);\r\n            }\r\n        }\r\n        return output;\r\n    };\r\n\r\n    Pane.prototype.getAllPanes = function (group) {\r\n        return group.querySelectorAll('.pane');\r\n    };\r\n\r\n    Pane.prototype.getSeparators = function (group) {\r\n        var output = [], children = group.children;\r\n        for (var i = 0; i < children.length; i++) {\r\n            if (children[i].classList.contains('pane-separator')) {\r\n                output.push(children[i]);\r\n            }\r\n        }\r\n        return output;\r\n    };\r\n\r\n    Pane.prototype.getSeparatorsSize = function (group) {\r\n        if (!group) return 0;\r\n        var total = 0;\r\n        var axis = group.dataset.axis;\r\n        var separators = this.getSeparators(group);\r\n        for (var i = 0; i < separators.length; i++)\r\n            total += getClientProperty(separators[i], axis);\r\n        return total;\r\n    };\r\n\r\n    Pane.prototype.setGroupDimensions = function (group, arrayOfDimensions) {\r\n        var axis = group.dataset.axis;\r\n        var panes = this.getPanes(group);\r\n        var axisIndex = axisToIndex(axis);\r\n        for (var i = 0; i < panes.length; i++) {\r\n            var pane = panes[i];\r\n            var dim = this.getDimensions(pane);\r\n            dim[axisIndex] = arrayOfDimensions[i];\r\n            this.setDimensions(pane, dim);\r\n        }\r\n    };\r\n\r\n    Pane.prototype.getGroupDimensions = function (group) {\r\n        var output = [];\r\n        var axis = group.dataset.axis;\r\n        var panes = this.getPanes(group);\r\n        var axisIndex = axisToIndex(axis);\r\n        for (var i = 0; i < panes.length; i++) {\r\n            var pane = panes[i];\r\n            var dim = this.getDimensions(pane);\r\n            output.push(dim[axisIndex]);\r\n        }\r\n        return output;\r\n    };\r\n\r\n    window.Pane = Pane;\r\n\r\n    function wrapByGroupIfNeeded (self, pane, axis) {\r\n        var group = pane.parentNode;\r\n        var isGroup = group.className.indexOf('pane-group') != -1;\r\n        var hasRightAxis = group.dataset.axis === axis;\r\n        if (!isGroup || !hasRightAxis) {\r\n            group = createGroup(axis);\r\n            replaceElement(pane, group);\r\n            group.appendChild(pane);\r\n            self.setDimensions(group, self.getDimensions(pane));\r\n            self.setDimensions(pane, [100, 100]);\r\n        }\r\n        return group;\r\n    }\r\n\r\n    function unwrapFromGroupIfNeeded (self, pane, axis) {\r\n        var group = pane.parentNode;\r\n        var isGroup = group.className.indexOf('pane-group') != -1;\r\n        var hasSingleChildren = group.children.length === 1;\r\n        if (isGroup && hasSingleChildren) {\r\n            self.setDimensions(pane, self.getDimensions(group));\r\n            replaceElement(group, pane);\r\n        }\r\n    }\r\n\r\n    function createGroup (axis) {\r\n        var group = document.createElement('div');\r\n        group.className = 'pane pane-group';\r\n        group.dataset.axis = axis;\r\n        return group;\r\n    }\r\n\r\n    function createAnchor (onAnchorMouseDown) {\r\n        var anchor = document.createElement('div');\r\n        anchor.className = 'pane-anchor';\r\n        anchor.addEventListener('mousedown', onAnchorMouseDown);\r\n        anchor.dataset.delta = JSON.stringify([0, 0]);\r\n        return anchor;\r\n    }\r\n\r\n    function getAnchorDelta (anchor, event) {\r\n        var center = getElementCenter(anchor);\r\n        return [center[0] - event.pageX, center[1] - event.pageY];\r\n    }\r\n\r\n    function updateAnchorFeedback (anchor, delta, treshhold) {\r\n        var action = getAnchorAction(delta, treshhold);\r\n        anchor.className = anchor.className.replace(/\\s+action-\\w*/, '');\r\n        if (action) anchor.className += ' action-' + action;\r\n    }\r\n\r\n    function getAnchorAction (delta, treshhold) {\r\n        if (delta[0] > treshhold || delta[1] > treshhold ||\r\n            delta[0] < -treshhold || delta[1] < -treshhold) {\r\n            var a = delta[0] >= delta[1];\r\n            var b = delta[0] >= -delta[1];\r\n            if (a && b) return 'left';\r\n            if (!a && !b) return 'right';\r\n            if (!a && b) return 'up';\r\n            if (a && !b) return 'down';\r\n        } else return '';\r\n    }\r\n\r\n    function updateSeparatorPanes (self, separator, axis) {\r\n        var group = separator.parentNode;\r\n        var axisIndex = axisToIndex(axis);\r\n        var delta = parseFloat(separator.dataset.delta);\r\n        var deltaPercentage = delta *100 / getClientProperty(group, axis);\r\n        var pane1 = separator.previousSibling;\r\n        var pane2 = separator.nextSibling;\r\n        var pane1Dimensions = self.getDimensions(pane1);\r\n        var pane2Dimensions = self.getDimensions(pane2);\r\n        pane1Dimensions[axisIndex] += deltaPercentage;\r\n        pane2Dimensions[axisIndex] -= deltaPercentage;\r\n        self.setDimensions(pane1, pane1Dimensions);\r\n        self.setDimensions(pane2, pane2Dimensions);\r\n    }\r\n\r\n    function runCallback (self, callbackName) {\n        var callback = self.options.callbacks[callbackName];\r\n        if (callback) {\r\n            var args = Array.prototype.slice.call(arguments, 2);\r\n            callback.apply(null, args);\r\n        }\r\n    }\r\n\r\n    function getElementCenter (element) {\r\n        var b = element.getBoundingClientRect();\r\n        return [b.left + (b.width / 2), b.top + (b.height / 2)];\r\n    }\r\n\r\n    function getClientProperty (element, axis) {\r\n        var axisWithCapital = axis.charAt(0).toUpperCase() + axis.slice(1);\r\n        var propertyName = 'client' + axisWithCapital;\r\n        return element[propertyName];\r\n    }\r\n\r\n    function replaceElement (current, toReplace) {\r\n        var parent = current.parentNode;\r\n        parent.insertBefore(toReplace, current);\r\n        parent.removeChild(current);\r\n    }\r\n\r\n    function axisToIndex (axis) {\r\n        if (axis === 'width') return 0;\r\n        else if (axis === 'height') return 1;\r\n    }\r\n\r\n    function extend (defaults, properties) {\r\n        for (var property in properties)\r\n            if (property && properties.hasOwnProperty(property)) {\r\n                var value = properties[property];\r\n                if (typeof value === 'object')\r\n                    extend(defaults[property], properties[property]);\r\n                else\r\n                    defaults[property] = properties[property];\r\n            }\r\n    }\r\n})();\r\n"]}