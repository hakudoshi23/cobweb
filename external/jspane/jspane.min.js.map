{"version":3,"sources":["jspane.js"],"names":["wrapByGroupIfNeeded","self","pane","axis","group","parentNode","isGroup","className","indexOf","hasRightAxis","dataset","createGroup","replaceElement","append","setDimensions","getDimensions","unwrapFromGroupIfNeeded","hasSingleChildren","children","length","document","createElement","createAnchor","onAnchorMouseDown","anchor","addEventListener","delta","JSON","stringify","getAnchorDelta","event","center","getElementCenter","pageX","pageY","updateAnchorFeedback","treshhold","action","getAnchorAction","replace","a","b","updateSeparatorPanes","separator","axisIndex","axisToIndex","parseFloat","deltaPercentage","getClientProperty","pane1","previousSibling","pane2","nextSibling","pane1Dimensions","pane2Dimensions","runCallback","callbackName","callback","options","callbacks","args","Array","prototype","slice","call","arguments","apply","element","getBoundingClientRect","left","width","top","height","axisWithCapital","charAt","toUpperCase","propertyName","current","toReplace","parent","insertBefore","removeChild","extend","defaults","properties","property","hasOwnProperty","value","defaultOptions","container","size","onPaneCreate","onPaneSplit","onPaneResize","onPaneMerge","onPaneDestroy","Pane","createPane","createSeparator","onSeparatorMouseDown","arrow","style","cursor","target","positionArray","position","initial","this","fn","containerId","querySelector","rootPane","clientX","clientY","parse","split","merge","actionRemoved","newPane","currentPaneDimensions","newPaneDimensions","updateGroupDimensions","toRemove","paneDimensions","toRemoveDimensions","dimensions","dimensionsAsString","getGroup","panes","getPanes","sepSize","getSeparatorsSize","subSize","newWidth","newHeight","isChanged","subPanes","getAllPanes","i","updateDimensions","isGroupNode","querySelectorAll","getSeparators","total","separators","setGroupDimensions","arrayOfDimensions","dim","getGroupDimensions","output","push","window"],"mappings":"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","file":"jspane.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    var defaultOptions = {\r\n        container: '#jspane',\r\n        anchor: {\r\n            treshhold: 20\r\n        },\r\n        separator: {\r\n            size: 5\r\n        },\r\n        callbacks: {\r\n            onPaneCreate: null,\r\n            onPaneSplit: null,\r\n            onPaneResize: null,\r\n            onPaneMerge: null,\r\n            onPaneDestroy: null,\r\n        }\r\n    };\r\n\r\n    var Pane = function (options) {\r\n        this.fn = Pane.prototype;\r\n        var self = this;\r\n\r\n        this.options = defaultOptions;\r\n        extend(defaultOptions, options);\r\n\r\n        var containerId = this.options.container;\r\n        this.container = document.querySelector(containerId);\r\n\r\n        this.current = {\r\n            separator: null,\r\n            anchor: null\r\n        };\r\n\r\n        var rootPane = createPane();\r\n        this.container.append(rootPane);\r\n\r\n        document.addEventListener('mousemove', function (event) {\r\n            var delta = 0;\r\n            if (self.current.anchor) {\r\n                var anchor = self.current.anchor;\r\n                delta = getAnchorDelta(anchor, event);\r\n\r\n                anchor.dataset.delta = JSON.stringify(delta);\r\n                updateAnchorFeedback(anchor, delta, self.options.anchor.treshhold);\r\n            }\r\n            if (self.current.separator) {\r\n                var separator = self.current.separator;\r\n                var group = separator.parentNode;\r\n                var axis = group.dataset.axis;\r\n\r\n                var current = [event.clientX, event.clientY];\r\n                var initial = JSON.parse(separator.dataset.initial);\r\n                delta = current[axisToIndex(axis)] - initial;\r\n                separator.dataset.delta = delta;\r\n\r\n                updateSeparatorPanes(self, separator, axis, delta);\r\n                separator.dataset.initial = JSON.stringify(initial + delta);\r\n            }\r\n        });\r\n\r\n        document.addEventListener('mouseup', function (event) {\r\n            if (self.current.separator) self.current.separator = null;\r\n            if (self.current.anchor) {\r\n                var anchor = self.current.anchor;\r\n                var delta = JSON.parse(anchor.dataset.delta);\r\n\r\n                var pane = anchor.parentNode;\r\n                switch (getAnchorAction(delta, self.options.anchor.treshhold)) {\r\n                    case 'left': self.split(pane, 'width'); break;\r\n                    case 'right': self.merge(pane, 'width'); break;\r\n                    case 'up': self.split(pane, 'height'); break;\r\n                    case 'down': self.merge(pane, 'height'); break;\r\n                }\r\n                var actionRemoved = anchor.className.replace(/\\s+action-\\w*/, '');\r\n                anchor.dataset.delta = JSON.stringify([0, 0]);\r\n                anchor.className = actionRemoved;\r\n\r\n                self.current.anchor = null;\r\n            }\r\n        });\r\n\r\n        this.split = function (pane, axis) {\r\n            var group = wrapByGroupIfNeeded(self, pane, axis);\r\n            var newPane = createPane();\r\n            var separator = createSeparator(self.options.separator.size, axis);\r\n\r\n            var axisIndex = axisToIndex(axis);\r\n            var currentPaneDimensions = self.getDimensions(pane);\r\n            var newPaneDimensions = self.getDimensions(newPane);\r\n            newPaneDimensions[axisIndex] = currentPaneDimensions[axisIndex] / 2.0;\r\n            currentPaneDimensions[axisIndex] = currentPaneDimensions[axisIndex] / 2.0;\r\n\r\n            group.insertBefore(newPane, pane.nextSibling);\r\n            group.insertBefore(separator, pane.nextSibling);\r\n\r\n            self.setDimensions(pane, currentPaneDimensions);\r\n            self.setDimensions(newPane, newPaneDimensions);\r\n            self.updateGroupDimensions(group);\r\n            runCallback(self, 'onPaneSplit', pane, newPane);\r\n        };\r\n\r\n        this.merge = function (pane, axis) {\r\n            if (pane.nextSibling) {\r\n                var group = pane.parentNode;\r\n                if (group.dataset.axis === axis) {\r\n                    var toRemove = pane.nextSibling.nextSibling;\r\n                    runCallback(self, 'onPaneMerge', pane, toRemove);\r\n                    runCallback(self, 'onPaneDestroy', toRemove);\r\n\r\n                    var paneDimensions = self.getDimensions(pane);\r\n                    var toRemoveDimensions = self.getDimensions(toRemove);\r\n\r\n                    group.removeChild(pane.nextSibling);\r\n                    group.removeChild(pane.nextSibling);\r\n\r\n                    var axisIndex = axisToIndex(axis);\r\n                    paneDimensions[axisIndex] += toRemoveDimensions[axisIndex];\r\n                    self.setDimensions(pane, paneDimensions);\r\n\r\n                    unwrapFromGroupIfNeeded(self, pane, axis);\r\n                    self.updateGroupDimensions(pane.parentNode);\r\n                }\r\n            }\r\n        };\r\n\r\n        function createPane () {\r\n            var pane = document.createElement('div');\r\n            pane.className = 'pane';\r\n            pane.append(createAnchor(onAnchorMouseDown));\r\n            runCallback(self, 'onPaneCreate', pane);\r\n            self.setDimensions(pane, [100, 100]);\r\n            return pane;\r\n        }\r\n\r\n        function createSeparator (size, axis) {\r\n            var separator = document.createElement('div');\r\n            separator.addEventListener('mousedown', onSeparatorMouseDown);\r\n            var arrow = axisToIndex(axis) ? 'ns' : 'ew';\r\n            separator.style.cursor = arrow + '-resize';\r\n            separator.className = 'pane-separator';\r\n            separator.style[axis] = size + 'px';\r\n            return separator;\r\n        }\r\n\r\n        function onAnchorMouseDown (event) {\r\n            self.current.anchor = event.target;\r\n        }\r\n\r\n        function onSeparatorMouseDown (event) {\r\n            var separator = event.target;\r\n            self.current.separator = separator;\r\n            var group = separator.parentNode;\r\n            var axis = group.dataset.axis;\r\n            var positionArray = [event.pageX, event.pageY];\r\n            var position = positionArray[axisToIndex(axis)];\r\n            separator.dataset.initial = JSON.stringify(position);\r\n        }\r\n    };\r\n\r\n    Pane.prototype.setDimensions = function (pane, dimensions) {\r\n        var dimensionsAsString = JSON.stringify(dimensions);\r\n        pane.dataset.dimensions = dimensionsAsString;\r\n\r\n        var group = this.getGroup(pane);\r\n        if (group === null) {\r\n            pane.style.width = 'calc(100% - 0px)';\r\n            pane.style.height = 'calc(100% - 0px)';\r\n            runCallback(this, 'onPaneResize', pane);\r\n        } else {\r\n            var panes = this.getPanes(group);\r\n            var sepSize = this.getSeparatorsSize(group);\r\n            var axis = group.dataset.axis;\r\n\r\n            var subSize = [0, 0];\r\n            if (panes.length > 0)\r\n                subSize[axisToIndex(axis)] = (sepSize / panes.length);\r\n            var newWidth = 'calc(' + dimensions[0] + '% - ' + subSize[0] + 'px)';\r\n            var newHeight = 'calc(' + dimensions[1] + '% - ' + subSize[1] + 'px)';\r\n            var isChanged = (pane.style.width != newWidth) ||\r\n                (pane.style.height != newHeight);\r\n            pane.style.width = newWidth;\r\n            pane.style.height = newHeight;\r\n\r\n            if (isChanged) {\r\n                runCallback(this, 'onPaneResize', pane);\r\n                if (pane.className.indexOf('pane-group') > -1) {\r\n                    var subPanes = this.getAllPanes(pane);\r\n                    for (var i = 0; i < subPanes.length; i++)\r\n                        runCallback(this, 'onPaneResize', subPanes[i]);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    Pane.prototype.updateDimensions = function (pane) {\r\n        this.setDimensions(pane, this.getDimensions(pane));\r\n    };\r\n\r\n    Pane.prototype.getDimensions = function (pane) {\r\n        return JSON.parse(pane.dataset.dimensions);\r\n    };\r\n\r\n    Pane.prototype.getGroup = function (pane) {\r\n        var parent = pane.parentNode;\r\n        if (parent) {\r\n            var isGroupNode = parent.className.indexOf('pane-group') != -1;\r\n            if (isGroupNode) return parent;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    Pane.prototype.updateGroupDimensions = function (group) {\r\n        var panes = this.getPanes(group);\r\n        for (var i = 0; i < panes.length; i++)\r\n            this.updateDimensions(panes[i]);\r\n    };\r\n\r\n    Pane.prototype.getPanes = function (group) {\r\n        return group.querySelectorAll(':scope > .pane');\r\n    };\r\n\r\n    Pane.prototype.getAllPanes = function (group) {\r\n        return group.querySelectorAll('.pane');\r\n    };\r\n\r\n    Pane.prototype.getSeparators = function (group) {\r\n        return group.querySelectorAll(':scope > .pane-separator');\r\n    };\r\n\r\n    Pane.prototype.getSeparatorsSize = function (group) {\r\n        if (!group) return 0;\r\n        var total = 0;\r\n        var axis = group.dataset.axis;\r\n        var separators = this.getSeparators(group);\r\n        for (var i = 0; i < separators.length; i++)\r\n            total += getClientProperty(separators[i], axis);\r\n        return total;\r\n    };\r\n\r\n    Pane.prototype.setGroupDimensions = function (group, arrayOfDimensions) {\r\n        var axis = group.dataset.axis;\r\n        var panes = this.getPanes(group);\r\n        var axisIndex = axisToIndex(axis);\r\n        for (var i = 0; i < panes.length; i++) {\r\n            var pane = panes[i];\r\n            var dim = this.getDimensions(pane);\r\n            dim[axisIndex] = arrayOfDimensions[i];\r\n            this.setDimensions(pane, dim);\r\n        }\r\n    };\r\n\r\n    Pane.prototype.getGroupDimensions = function (group) {\r\n        var output = [];\r\n        var axis = group.dataset.axis;\r\n        var panes = this.getPanes(group);\r\n        var axisIndex = axisToIndex(axis);\r\n        for (var i = 0; i < panes.length; i++) {\r\n            var pane = panes[i];\r\n            var dim = this.getDimensions(pane);\r\n            output.push(dim[axisIndex]);\r\n        }\r\n        return output;\r\n    };\r\n\r\n    window.Pane = Pane;\r\n\r\n    function wrapByGroupIfNeeded (self, pane, axis) {\r\n        var group = pane.parentNode;\r\n        var isGroup = group.className.indexOf('pane-group') != -1;\r\n        var hasRightAxis = group.dataset.axis === axis;\r\n        if (!isGroup || !hasRightAxis) {\r\n            group = createGroup(axis);\r\n            replaceElement(pane, group);\r\n            group.append(pane);\r\n            self.setDimensions(group, self.getDimensions(pane));\r\n            self.setDimensions(pane, [100, 100]);\r\n        }\r\n        return group;\r\n    }\r\n\r\n    function unwrapFromGroupIfNeeded (self, pane, axis) {\r\n        var group = pane.parentNode;\r\n        var isGroup = group.className.indexOf('pane-group') != -1;\r\n        var hasSingleChildren = group.children.length === 1;\r\n        if (isGroup && hasSingleChildren) {\r\n            self.setDimensions(pane, self.getDimensions(group));\r\n            replaceElement(group, pane);\r\n        }\r\n    }\r\n\r\n    function createGroup (axis) {\r\n        var group = document.createElement('div');\r\n        group.className = 'pane pane-group';\r\n        group.dataset.axis = axis;\r\n        return group;\r\n    }\r\n\r\n    function createAnchor (onAnchorMouseDown) {\r\n        var anchor = document.createElement('div');\r\n        anchor.className = 'pane-anchor';\r\n        anchor.addEventListener('mousedown', onAnchorMouseDown);\r\n        anchor.dataset.delta = JSON.stringify([0, 0]);\r\n        return anchor;\r\n    }\r\n\r\n    function getAnchorDelta (anchor, event) {\r\n        var center = getElementCenter(anchor);\r\n        return [center[0] - event.pageX, center[1] - event.pageY];\r\n    }\r\n\r\n    function updateAnchorFeedback (anchor, delta, treshhold) {\r\n        var action = getAnchorAction(delta, treshhold);\r\n        anchor.className = anchor.className.replace(/\\s+action-\\w*/, '');\r\n        if (action) anchor.className += ' action-' + action;\r\n    }\r\n\r\n    function getAnchorAction (delta, treshhold) {\r\n        if (delta[0] > treshhold || delta[1] > treshhold ||\r\n            delta[0] < -treshhold || delta[1] < -treshhold) {\r\n            var a = delta[0] >= delta[1];\r\n            var b = delta[0] >= -delta[1];\r\n            if (a && b) return 'left';\r\n            if (!a && !b) return 'right';\r\n            if (!a && b) return 'up';\r\n            if (a && !b) return 'down';\r\n        } else return '';\r\n    }\r\n\r\n    function updateSeparatorPanes (self, separator, axis) {\r\n        var group = separator.parentNode;\r\n        var axisIndex = axisToIndex(axis);\r\n        var delta = parseFloat(separator.dataset.delta);\r\n        var deltaPercentage = delta *100 / getClientProperty(group, axis);\r\n        var pane1 = separator.previousSibling;\r\n        var pane2 = separator.nextSibling;\r\n        var pane1Dimensions = self.getDimensions(pane1);\r\n        var pane2Dimensions = self.getDimensions(pane2);\r\n        pane1Dimensions[axisIndex] += deltaPercentage;\r\n        pane2Dimensions[axisIndex] -= deltaPercentage;\r\n        self.setDimensions(pane1, pane1Dimensions);\r\n        self.setDimensions(pane2, pane2Dimensions);\r\n    }\r\n\r\n    function runCallback (self, callbackName) {\n        var callback = self.options.callbacks[callbackName];\r\n        if (callback) {\r\n            var args = Array.prototype.slice.call(arguments, 2);\r\n            callback.apply(null, args);\r\n        }\r\n    }\r\n\r\n    function getElementCenter (element) {\r\n        var b = element.getBoundingClientRect();\r\n        return [b.left + (b.width / 2), b.top + (b.height / 2)];\r\n    }\r\n\r\n    function getClientProperty (element, axis) {\r\n        var axisWithCapital = axis.charAt(0).toUpperCase() + axis.slice(1);\r\n        var propertyName = 'client' + axisWithCapital;\r\n        return element[propertyName];\r\n    }\r\n\r\n    function replaceElement (current, toReplace) {\r\n        var parent = current.parentNode;\r\n        parent.insertBefore(toReplace, current);\r\n        parent.removeChild(current);\r\n    }\r\n\r\n    function axisToIndex (axis) {\r\n        if (axis === 'width') return 0;\r\n        else if (axis === 'height') return 1;\r\n    }\r\n\r\n    function extend (defaults, properties) {\r\n        for (var property in properties)\r\n            if (property && properties.hasOwnProperty(property)) {\r\n                var value = properties[property];\r\n                if (typeof value === 'object')\r\n                    extend(defaults[property], properties[property]);\r\n                else\r\n                    defaults[property] = properties[property];\r\n            }\r\n    }\r\n})();\r\n"]}